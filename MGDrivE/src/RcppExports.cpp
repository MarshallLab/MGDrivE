// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// SymCubeC
void SymCubeC(arma::dcube& lowerMat);
RcppExport SEXP _MGDrivE_SymCubeC(SEXP lowerMatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::dcube& >::type lowerMat(lowerMatSEXP);
    SymCubeC(lowerMat);
    return R_NilValue;
END_RCPP
}
// shiftAndUpdatePopVector
void shiftAndUpdatePopVector(ListOf<NumericVector>& popVector, const NumericVector newPop);
RcppExport SEXP _MGDrivE_shiftAndUpdatePopVector(SEXP popVectorSEXP, SEXP newPopSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ListOf<NumericVector>& >::type popVector(popVectorSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type newPop(newPopSEXP);
    shiftAndUpdatePopVector(popVector, newPop);
    return R_NilValue;
END_RCPP
}
// rDirichlet
NumericVector rDirichlet(const NumericVector& migrationPoint);
RcppExport SEXP _MGDrivE_rDirichlet(SEXP migrationPointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type migrationPoint(migrationPointSEXP);
    rcpp_result_gen = Rcpp::wrap(rDirichlet(migrationPoint));
    return rcpp_result_gen;
END_RCPP
}
// quantileC
NumericMatrix quantileC(IntegerMatrix& Trials, const NumericVector& Probs);
RcppExport SEXP _MGDrivE_quantileC(SEXP TrialsSEXP, SEXP ProbsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix& >::type Trials(TrialsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type Probs(ProbsSEXP);
    rcpp_result_gen = Rcpp::wrap(quantileC(Trials, Probs));
    return rcpp_result_gen;
END_RCPP
}
// calc_haversine
Rcpp::NumericMatrix calc_haversine(const Rcpp::NumericMatrix& longlats);
RcppExport SEXP _MGDrivE_calc_haversine(SEXP longlatsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type longlats(longlatsSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_haversine(longlats));
    return rcpp_result_gen;
END_RCPP
}
// calc_LognormalKernel
Rcpp::NumericMatrix calc_LognormalKernel(const Rcpp::NumericMatrix& distMat, const double& meanlog, const double& sdlog);
RcppExport SEXP _MGDrivE_calc_LognormalKernel(SEXP distMatSEXP, SEXP meanlogSEXP, SEXP sdlogSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type distMat(distMatSEXP);
    Rcpp::traits::input_parameter< const double& >::type meanlog(meanlogSEXP);
    Rcpp::traits::input_parameter< const double& >::type sdlog(sdlogSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_LognormalKernel(distMat, meanlog, sdlog));
    return rcpp_result_gen;
END_RCPP
}
// calc_GammaKernel
Rcpp::NumericMatrix calc_GammaKernel(const Rcpp::NumericMatrix& distMat, const double& shape, const double& rate);
RcppExport SEXP _MGDrivE_calc_GammaKernel(SEXP distMatSEXP, SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type distMat(distMatSEXP);
    Rcpp::traits::input_parameter< const double& >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const double& >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_GammaKernel(distMat, shape, rate));
    return rcpp_result_gen;
END_RCPP
}
// calc_ExpKernel
Rcpp::NumericMatrix calc_ExpKernel(const Rcpp::NumericMatrix& distMat, const double& r);
RcppExport SEXP _MGDrivE_calc_ExpKernel(SEXP distMatSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type distMat(distMatSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_ExpKernel(distMat, r));
    return rcpp_result_gen;
END_RCPP
}
// calc_HurdleExpKernel
Rcpp::NumericMatrix calc_HurdleExpKernel(const Rcpp::NumericMatrix& distMat, double r, double pi);
RcppExport SEXP _MGDrivE_calc_HurdleExpKernel(SEXP distMatSEXP, SEXP rSEXP, SEXP piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type distMat(distMatSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_HurdleExpKernel(distMat, r, pi));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MGDrivE_SymCubeC", (DL_FUNC) &_MGDrivE_SymCubeC, 1},
    {"_MGDrivE_shiftAndUpdatePopVector", (DL_FUNC) &_MGDrivE_shiftAndUpdatePopVector, 2},
    {"_MGDrivE_rDirichlet", (DL_FUNC) &_MGDrivE_rDirichlet, 1},
    {"_MGDrivE_quantileC", (DL_FUNC) &_MGDrivE_quantileC, 2},
    {"_MGDrivE_calc_haversine", (DL_FUNC) &_MGDrivE_calc_haversine, 1},
    {"_MGDrivE_calc_LognormalKernel", (DL_FUNC) &_MGDrivE_calc_LognormalKernel, 3},
    {"_MGDrivE_calc_GammaKernel", (DL_FUNC) &_MGDrivE_calc_GammaKernel, 3},
    {"_MGDrivE_calc_ExpKernel", (DL_FUNC) &_MGDrivE_calc_ExpKernel, 2},
    {"_MGDrivE_calc_HurdleExpKernel", (DL_FUNC) &_MGDrivE_calc_HurdleExpKernel, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_MGDrivE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
