[{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"landscape-setup","dir":"Articles","previous_headings":"","what":"Landscape Setup","title":"MGDrivE Examples","text":"MGDrivE capable running one population, simple network, networks derived real locations parameterized using local topology climate. Topology climate analysis scope vignette, show setup simple, single-node examples real landscapes parameterized distance. key flexibility landscape module MGDrivE requires matrix daily movement rates nodes. Nodes listed along X/Y-axis, diagonal representing proportion mosquitoes don’t leave node day. example produces moveMat object - matrix daily movement rates. used migrationMale /migrationFemale matrices constructor Network object.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"single-population","dir":"Articles","previous_headings":"Landscape Setup","what":"Single Population","title":"MGDrivE Examples","text":"node network represents independent population. Thus, important MGDrivE run single node. single population can provided parameterizing MGDrivE 1--1 matrix, 100% chance individuals staying location (.e., else move, thus remain).","code":"# setup movement matrix for 1 node moveMat <- matrix(data = 1, nrow = 1, ncol = 1) moveMat #>      [,1] #> [1,]    1"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"two-populations","dir":"Articles","previous_headings":"Landscape Setup","what":"Two Populations","title":"MGDrivE Examples","text":"Extending single population example, running MGDrivE 2 populations also simple. However, movement rates calculated using rows, .e., movement critters node 1 node parameterized row 1 movement matrix. Thus, rows movement matrix must normalized sum 1.","code":"# setup movement matrix for 2 nodes  #################### # 2 nodes, no migration #################### moveMat <- matrix(data = c(1,0,0,1), nrow = 2, ncol = 2, byrow = TRUE) moveMat #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1  #################### # 2 nodes, with migration #################### # 5% migration per day from population 1 # 10% migraton per day from population 2 #  Notice that the rows sum to 1 moveMat <- matrix(data = c(0.95, 0.05, 0.10, 0.90),                   nrow = 2, ncol = 2, byrow = TRUE) moveMat #>      [,1] [,2] #> [1,] 0.95 0.05 #> [2,] 0.10 0.90"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"n-populations","dir":"Articles","previous_headings":"Landscape Setup","what":"n Populations","title":"MGDrivE Examples","text":"MGDrivE can run arbitrary networks, provided rows movement matrix normalized. two examples, one completely random, one migration population either side , populations line.","code":"# setup random movement matrix for 5 nodes  #################### # 5 nodes #################### nNodes <- 5  # fill with random data moveMat <- matrix(data = runif(n = nNodes*nNodes), nrow = nNodes, ncol = nNodes)  # normalize moveMat <- moveMat/rowSums(x = moveMat) moveMat #>           [,1]       [,2]       [,3]       [,4]       [,5] #> [1,] 0.2448828 0.13895585 0.12253207 0.25163078 0.24199852 #> [2,] 0.2669949 0.20987141 0.20489206 0.27871981 0.03952180 #> [3,] 0.1162291 0.05470122 0.37966140 0.04772306 0.40168521 #> [4,] 0.2624233 0.20761107 0.08071609 0.15010016 0.29914933 #> [5,] 0.2617368 0.28756166 0.18854677 0.22853249 0.03362227 # setup line with 10 nodes  #################### # 10 nodes in a line #################### nNodes <- 10  # define function for use triDiag <- function(upper, lower){    # return matrix   retMat <- matrix(data = 0, nrow = length(upper) + 1, ncol = length(upper) + 1)    # set index values for upper/lower triangles   indx <- 1:length(upper)    # set forward/backward migration using matrix access   retMat[cbind(indx+1,indx)] <- lower   retMat[cbind(indx,indx+1)] <- upper    # set stay probs   diag(x = retMat) <- 1-rowSums(x = retMat)    return(retMat) }  # fill movement matrix #  Remember, rows need to sum to 1. moveMat <- triDiag(upper = rep.int(x = 0.05, times = nNodes-1),                    lower = rep.int(x = 0.05, times = nNodes-1))  moveMat #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,] 0.95 0.05 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0.00 #>  [2,] 0.05 0.90 0.05 0.00 0.00 0.00 0.00 0.00 0.00  0.00 #>  [3,] 0.00 0.05 0.90 0.05 0.00 0.00 0.00 0.00 0.00  0.00 #>  [4,] 0.00 0.00 0.05 0.90 0.05 0.00 0.00 0.00 0.00  0.00 #>  [5,] 0.00 0.00 0.00 0.05 0.90 0.05 0.00 0.00 0.00  0.00 #>  [6,] 0.00 0.00 0.00 0.00 0.05 0.90 0.05 0.00 0.00  0.00 #>  [7,] 0.00 0.00 0.00 0.00 0.00 0.05 0.90 0.05 0.00  0.00 #>  [8,] 0.00 0.00 0.00 0.00 0.00 0.00 0.05 0.90 0.05  0.00 #>  [9,] 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.05 0.90  0.05 #> [10,] 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.05  0.95"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"realistic-location","dir":"Articles","previous_headings":"Landscape Setup","what":"Realistic Location","title":"MGDrivE Examples","text":"show make landscape set coordinates, represent node user wishes simulate metapopulation model. example show simple setup 3 nodes. first step calculate distance points - several built-functions provided, user may provide . Examples built-functions include calcCos(), calcHaversine(), accurately, calcVinEll(). second step put zero-inflated exponential kernel distances, using function calcHurdleExpKernel(). hypothesized mosquitoes follow leptokurtic movement pattern. also ensures rows normalized. However, necessary scenarios, one must remember normalize rows. also provide functions calculate basic exponential kernel (calcExpKernel()), gamma kernel (calcGammaKernel()), log-normal kernel (calcLognormalKernel()). Notice, diagonal elements, representing probability critter node remains node, equal zero-inflation probability, p0. Additionally, row normalized 1.","code":"# realistic landscape  # matrix of coordinates as latitude/longitude pairs lat_longs <- matrix(data = c(37.873507, -122.268181,                              37.873578, -122.254430,                              37.869806, -122.267639),                     nrow = 3, ncol = 2, byrow = TRUE,                     dimnames = list(NULL, c('Lat','Lon')))  # calculate distance matrix between points # dmat <- MGDrivE::calcHaversine(latLongs = lat_longs) # dmat <- MGDrivE::calcVinSph(latLongs = lat_longs) distMat <- MGDrivE::calcVinEll(latLongs = lat_longs)  # calculate a zero-inflated movement kernal over the distances # p0 is the probability, per day, that a mosquito doesn't move. #  This is the value used in Code sample 1 from the paper, and in the examples in our #  github repository. # rate is the average migration rate per day, implying 1/rate is the average #  migration distance. The average distance was estimated as ~55.5 meters per day, #  which is the value used in Code sample 1 and in the examples on github. p0 <- 0.991 rate <- 1/55.5  moveMat <- MGDrivE::calcHurdleExpKernel(distMat = distMat, rate = rate, p0 = p0) moveMat #>             [,1]         [,2]        [,3] #> [1,] 0.991000000 5.282449e-09 0.008999995 #> [2,] 0.005513189 9.910000e-01 0.003486811 #> [3,] 0.008999997 3.340880e-09 0.991000000"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"inheritance-simulations","dir":"Articles","previous_headings":"","what":"Inheritance Simulations","title":"MGDrivE Examples","text":"important know model produces results consistent accepted theory. also important members community (.e., , user!) understand can run explorations model. Thus, use section provide small, simple examples illustrating MGDrivE setup run, connecting simulations underlying theory.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"mendelian-inheritance-simulations-single-population","dir":"Articles","previous_headings":"Inheritance Simulations","what":"Mendelian Inheritance Simulations, Single Population","title":"MGDrivE Examples","text":"useful benchmark population models include genetic inheritance study basic Mendelian inheritance. MGDrivE provides 1-locus, 2-allele Mendelian inheritance pattern function cubeMendelian().","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"deterministic","dir":"Articles","previous_headings":"Inheritance Simulations > Mendelian Inheritance Simulations, Single Population","what":"Deterministic","title":"MGDrivE Examples","text":"First, show example running deterministic MGDrivE simulation Mendelian inheritance single node; , non-spatial model. population 100% AA (homozygous dominant) individuals time 0. day 25, 10 female 10 male aa (homozygous recessive) individuals enter population.  figure, see males females every genotype plotted time, along total population. equilibrium population size 500 individuals, sex biasing, equal division males females. release occurs equally sexes time t = 25, expected, see increase total population due release recovering equilibrium population size. Since basic Mendelian inheritance, able calculate expected allele genotype frequencies assuming Hardy-Weinberg equilibrium (HWE). released 20 aa individuals population 500 AA individuals, can calculate expected allele frequencies: : \\(\\frac{1}{26}\\) : \\(\\frac{25}{26}\\) leads following expected genotype frequencies: AA: \\(\\big(\\frac{25}{26}\\big)^2 =\\) 0.9246 Aa: \\(2\\cdot \\big(\\frac{25}{26}\\big)\\cdot\\big(\\frac{1}{26}\\big) =\\) 0.0740 aa: \\(\\big(\\frac{1}{26}\\big)^2 =\\) 0.0015 , population size 500, implies following number individuals (remember, deterministic simulation, “individuals” whole numbers): AA: 462.28 Aa: 36.98 aa: 0.74 However, look equilibrium genotypes simulation, populations : AA: 485.47 Aa: 14.42 aa: 0.11 significantly different expected genotype numbers according HWE. assumptions HWE calculated, specifically, ignoring maturation child stages prior reproduction assuming discrete generations, infinite population size. contrast, MGDrivE overlapping generations tracks offspring development prior adulthood. Additionally, release performed small, population far “infinite”, release represents 4% population. Therefore, effective population size significantly larger 500. Ignoring effect constant daily mortality distribution adults, implying individual lifespans follow geometric distribution reducing proportion released individuals wild-type adults die , can calculate effective population size using following parameters; Adult Population Size: 500 Release Amount: 20 Daily Pupation Amount: 45 Maturation Time: 15 days parameters, approximate effective population size calculated combining Adult Population Size, plus Release Amount, plus Maturation Time times Daily Pupation Amount, estimates population size 1195. Using estimate effective population size, expected allele frequencies : : \\(\\frac{4}{239}\\) : \\(\\frac{235}{239}\\) new expected genotype frequencies: AA: \\(\\big(\\frac{235}{239}\\big)^2 =\\) 0.96681 Aa: \\(2\\cdot \\big(\\frac{235}{239}\\big)\\cdot\\big(\\frac{4}{239}\\big) =\\) 0.03291 aa: \\(\\big(\\frac{4}{239}\\big)^2 =\\) 0.00028 Since population return equilibrium time, 500 individuals, expect following number individuals genotype: AA: 483.40 Aa: 16.46 aa: 0.14 significantly closer simulated population. expected, slightly high, stems ignoring geometric distribution adult population.","code":"#################### # Load libraries #################### library(MGDrivE) #> Loading MGDrivE: Mosquito Gene Drive Explorer  #################### # Output Folder #################### outFolder <- \"mgdrive\"  #################### # Simulation Parameters #################### # days to run the simulation tMax <- 365  # entomological parameters bioParameters <- list(betaK=20, tEgg=5, tLarva=6, tPupa=4, popGrowth=1.175, muAd=0.09)  # a 1-node network where mosquitoes do not leave moveMat <- matrix(data = 1, nrow = 1, ncol = 1)  # parameters of the population equilibrium adultPopEquilibrium <- 500 sitesNumber <- nrow(moveMat)  #################### # Basic Inheritance pattern #################### # Mendelian cube with standard (default) parameters cube <- cubeMendelian()  #################### # Setup releases and batch migration #################### # set up the empty release vector #  MGDrivE pulls things out by name patchReleases <- replicate(n=sitesNumber,                            expr={list(maleReleases=NULL,femaleReleases=NULL,                                       eggReleases=NULL,matedFemaleReleases=NULL)},                            simplify=FALSE)  # choose release parameters #  Releases start at time 25, occur every day, for 1 day. #  There are 10 mosquitoes released every time. releasesParameters <- list(releasesStart=25,                            releasesNumber=1,                            releasesInterval=0,                            releaseProportion=10)  # generate release vector releasesVector <- generateReleaseVector(driveCube=cube,                                         releasesParameters=releasesParameters)  # put releases into the proper place in the release list patchReleases[[1]]$maleReleases <- releasesVector patchReleases[[1]]$femaleReleases <- releasesVector   # batch migration is disabled by setting the probability to 0 # This is required because of the stochastic simulations, but doesn't make sense #  in a deterministic simulation. batchMigration <- basicBatchMigration(batchProbs=0,                                       sexProbs=c(.5,.5),                                       numPatches=sitesNumber)  #################### # Combine parameters and run! #################### # set MGDrivE to run deterministic setupMGDrivE(stochasticityON = FALSE, verbose = FALSE)  # setup parameters for the network. This builds a list of parameters required for #  every population in the network. In ths case, we havee a network of 1 population. netPar <- parameterizeMGDrivE(runID=1, simTime=tMax, sampTime = 1, nPatch=sitesNumber,                               beta=bioParameters$betaK, muAd=bioParameters$muAd,                               popGrowth=bioParameters$popGrowth, tEgg=bioParameters$tEgg,                               tLarva=bioParameters$tLarva, tPupa=bioParameters$tPupa,                               AdPopEQ=adultPopEquilibrium, inheritanceCube = cube)  # build network prior to run MGDrivESim <- Network$new(params=netPar,                           driveCube=cube,                           patchReleases=patchReleases,                           migrationMale=moveMat,                           migrationFemale=moveMat,                           migrationBatch=batchMigration,                           directory=outFolder,                           verbose=FALSE)  # run simulation MGDrivESim$oneRun(verbose = FALSE)  #################### # Post Analysis #################### # split output by patch #  Required for plotting later splitOutput(readDir = outFolder, remFile = TRUE, verbose = FALSE)  # aggregate females by their mate choice #  This reduces the female file to have the same columns as the male file aggregateFemales(readDir = outFolder, genotypes = cube$genotypesID,                  remFile = TRUE, verbose = FALSE)  # plot output to see effect plotMGDrivESingle(readDir = outFolder, totalPop = TRUE, lwd = 3.5, alpha = 1)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"deterministic-with-fitness-cost","dir":"Articles","previous_headings":"Inheritance Simulations > Mendelian Inheritance Simulations, Single Population","what":"Deterministic, With Fitness Cost","title":"MGDrivE Examples","text":"Now shown basic Mendelian simulation, expand little including fitness cost certain genotypes. following simulation, homozygotes, AA aa, 60% fit heterozygote adult lifetime. example heterozygote advantage, see population become primarily heterozygous. increase size number releases perform little bit later, see effects fitness cost speed equilibration process, everything else remain , .e., one population deterministic simulation.  , plot females left, males right, population size Y-axis simulation time along X-axis. see total population size starts 250 males females, total 500 individuals, quickly drops 275.1667639. fitness cost applied AA individuals make population. applied 60% fitness cost, expect total population 60% desired population. 60% 500 individuals, assuming HWE applies, 300, close simulated population size prior releases. discrepancy can accounted presence density-dependence larval maturation. releases aa individuals performed, see population quickly drive towards heterozygous individuals, population size marginally recover. population partially recovers fitness cost heterozygotes, fully recover heterozygotes create homozygotes generation. equilibrium, given heterozygotes produce homozygotes rate 50% per generation, expected genotype amounts (assuming HWE assumptions apply) : AA: \\(500 \\cdot \\frac{1}{4} \\cdot 0.60 = 75\\) Aa: \\(500 \\cdot \\frac{1}{2} \\cdot 1.00 = 250\\) aa: \\(500 \\cdot \\frac{1}{4} \\cdot 0.60 = 75\\) Total: AA + Aa + aa = 400 Checking end simulation, find empirical genotype amounts : AA: 72.59 Aa: 241.03 aa: 72.03 Total: 385.65 closely matches simulated population, differing HWE assumes discrete generations.","code":"#################### # Load libraries #################### library(MGDrivE)  #################### # Output Folder #################### outFolder <- \"mgdrive\"  #################### # Simulation Parameters #################### # days to run the simulation tMax <- 365*2  # entomological parameters bioParameters <- list(betaK=20, tEgg=5, tLarva=6, tPupa=4, popGrowth=1.175, muAd=0.09)  # a 1-node network where mosquitoes do not leave moveMat <- as.matrix(1)  # parameters of the population equilibrium adultPopEquilibrium <- 500 sitesNumber <- nrow(moveMat) patchPops <- rep(adultPopEquilibrium,sitesNumber)  #################### # Basic Inheritance pattern #################### # Mendelian cube with standard (default) parameters  # This time, lets put fitness cost on the homozygotes, giving the heterozygote #  an advantage  # These genotypes correspond to ones in the cube. Look at a base cube first, #  then set this. # homozygotes are 60% as fit as heterozygote over their entire lifetime #  Since omega is the adult daily death rate, we use the built-in function to #  calculate our desired lifetime cost as applied daily dayOmega <- calcOmega(mu = bioParameters$muAd, lifespanReduction = 0.60) omegaNew <- c(\"AA\"=dayOmega, \"aa\"=dayOmega)  # setup cube cube <- cubeMendelian(omega = omegaNew)  #################### # Setup releases and batch migration #################### # set up the empty release vector #  MGDrivE pulls things out by name patchReleases <- replicate(n=sitesNumber,                            expr={list(maleReleases=NULL,femaleReleases=NULL,                                       eggReleases=NULL,matedFemaleReleases=NULL)},                            simplify=FALSE)  # choose release parameters #  Releases start at time 100, occur every day, for 5 days. #  There are 50 mosquitoes released every time. releasesParameters <- list(releasesStart=100,                            releasesNumber=5,                            releasesInterval=0,                            releaseProportion=50)  # generate male release vector maleReleasesVector <- generateReleaseVector(driveCube=cube,                                             releasesParameters=releasesParameters)  # generate female release vector femaleReleasesVector <- generateReleaseVector(driveCube=cube,                                               releasesParameters=releasesParameters)  # put releases into the proper place in the release list patchReleases[[1]]$maleReleases <- maleReleasesVector patchReleases[[1]]$femaleReleases <- femaleReleasesVector   # batch migration is disabled by setting the probability to 0 # This is required because of the stochastic simulations, but doesn't make sense #  in a deterministic simulation. batchMigration <- basicBatchMigration(batchProbs=0,                                       sexProbs=c(.5,.5),                                       numPatches=sitesNumber)  #################### # Combine parameters and run! #################### # set MGDrivE to run deterministic setupMGDrivE(stochasticityON = FALSE, verbose = FALSE)  # setup parameters for the network. This builds a list of parameters required for #  every population in the network. In ths case, we have a network of 1 population. netPar <- parameterizeMGDrivE(runID=1, simTime=tMax, nPatch=sitesNumber,                               beta=bioParameters$betaK, muAd=bioParameters$muAd,                               popGrowth=bioParameters$popGrowth, tEgg=bioParameters$tEgg,                               tLarva=bioParameters$tLarva, tPupa=bioParameters$tPupa,                               AdPopEQ=patchPops, inheritanceCube = cube)  # build network prior to run MGDrivESim <- Network$new(params=netPar,                           driveCube=cube,                           patchReleases=patchReleases,                           migrationMale=moveMat,                           migrationFemale=moveMat,                           migrationBatch=batchMigration,                           directory=outFolder,                           verbose=FALSE) # run simulation MGDrivESim$oneRun(verbose = FALSE)  #################### # Post Analysis #################### # split output by patch #  Required for plotting later splitOutput(readDir = outFolder, remFile = TRUE, verbose = FALSE)  # aggregate females by their mate choice #  This reduces the female file to have the same columns as the male file aggregateFemales(readDir = outFolder, genotypes = cube$genotypesID, remFile = TRUE,                  verbose = FALSE)  # plot output to see effect plotMGDrivESingle(readDir = outFolder, totalPop = TRUE, lwd = 3.5, alpha = 1)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"stochastic","dir":"Articles","previous_headings":"Inheritance Simulations > Mendelian Inheritance Simulations, Single Population","what":"Stochastic","title":"MGDrivE Examples","text":"processes birth, death, mating, inheritance inherently probabilistic, meaning order understand full spectrum outcomes model may produce, necessary simulate correctly-specified stochastic models. show example modeled system stochastic simulation used; run ensemble simulations, plot trajectories give sense expected variability possible model trajectories. now use simulation parameters previous example run stochastic version model. view variability sampled trajectories, run 50 repetitions. realistic applications, large ensembles simulations (>100) run statistically analyzed characterize quantities interest.   first plot single run stochastic simulation, plot 50 runs together. see individual run looks similar deterministic run , genotypes behaving heuristically . However, dynamics “clean” deterministic version, clearly suffering randomness inherent actual population, dynamics slower deterministic version. inherent effect stochasticity, something important decision making smaller population sizes.","code":"#################### # Load libraries #################### library(MGDrivE)  #################### # Output Folder #################### # directory # This is slightly obtuse for vignette building reasons #  Really, all you need is a base directory, then the repetitions in folders inside that. #  Here, our base directory is \"mgdrive\", and the repetition folders are \"001\",\"002\", etc. #  So, the final structure is \"mgdrive/001\",\"mgdrive/002\", etc. outFolder <- \"mgdrive\" dir.create(path = outFolder)  #################### # Simulation Parameters #################### # days to run the simulation tMax <- 365*2  # number of Monte Carlo iterations nRep <- 50  # each Monte Carlo iteration gets its own folder folderNames <- file.path(outFolder,                          formatC(x = 1:nRep, width = 3, format = \"d\", flag = \"0\"))  # entomological parameters bioParameters <- list(betaK=20, tEgg=5, tLarva=6, tPupa=4, popGrowth=1.175, muAd=0.09)  # a 1-node network where mosquitoes do not leave moveMat <- as.matrix(1)  # parameters of the population equilibrium adultPopEquilibrium <- 500 sitesNumber <- nrow(moveMat)  #################### # Basic Inheritance pattern #################### # Mendelian cube with standard (default) parameters  # This time, lets put fitness cost on the homozygotes, giving the heterozygote #  an advantage  # These genotypes correspond to ones in the cube. Look at a base cube first, #  then set this. # homozygotes are 60% as fit as heterozygote over their entire lifetime #  Since omega is the adult daily death rate, we use the built-in function to #  calculate our desired lifetime cost as applied daily dayOmega <- calcOmega(mu = bioParameters$muAd, lifespanReduction = 0.60) omegaNew <- c(\"AA\"=dayOmega, \"aa\"=dayOmega)  # setup cube cube <- cubeMendelian(omega = omegaNew)  #################### # Setup releases and batch migration #################### # set up the empty release vector #  MGDrivE pulls things out by name patchReleases <- replicate(n=sitesNumber,                            expr={list(maleReleases=NULL,femaleReleases=NULL,                                       eggReleases=NULL,matedFemaleReleases=NULL)},                            simplify=FALSE)  # choose release parameters #  Releases start at time 100, occur every day, for 5 days. #  There are 50 mosquitoes released every time. releasesParameters <- list(releasesStart=100,                            releasesNumber=5,                            releasesInterval=0,                            releaseProportion=50)  # generate male release vector maleReleasesVector <- generateReleaseVector(driveCube=cube,                                             releasesParameters=releasesParameters)  # generate female release vector femaleReleasesVector <- generateReleaseVector(driveCube=cube,                                               releasesParameters=releasesParameters)  # put releases into the proper place in the release list patchReleases[[1]]$maleReleases <- maleReleasesVector patchReleases[[1]]$femaleReleases <- femaleReleasesVector   # batch migration is disabled by setting the probability to 0 # This is required because of the stochastic simulations, but doesn't make sense #  in a deterministic simulation. batchMigration <- basicBatchMigration(batchProbs=0,                                       sexProbs=c(.5,.5),                                       numPatches=sitesNumber)  #################### # Combine parameters and run! #################### # set MGDrivE to run stochastic setupMGDrivE(stochasticityON = TRUE, verbose = FALSE)  # setup parameters for the network. This builds a list of parameters required for #  every population in the network. In ths case, we have a network of 1 population. netPar <- parameterizeMGDrivE(runID=1, simTime=tMax, sampTime = 5, nPatch=sitesNumber,                               beta=bioParameters$betaK, muAd=bioParameters$muAd,                               popGrowth=bioParameters$popGrowth, tEgg=bioParameters$tEgg,                               tLarva=bioParameters$tLarva, tPupa=bioParameters$tPupa,                               AdPopEQ=adultPopEquilibrium, inheritanceCube = cube)  # build network prior to run MGDrivESim <- Network$new(params=netPar,                           driveCube=cube,                           patchReleases=patchReleases,                           migrationMale=moveMat,                           migrationFemale=moveMat,                           migrationBatch=batchMigration,                           directory=folderNames,                           verbose = FALSE) # run simulation MGDrivESim$multRun(verbose = FALSE)  #################### # Post Analysis #################### # First, split output by patch # Second, aggregate females by their mate choice for(i in 1:nRep){   splitOutput(readDir = folderNames[i], remFile = TRUE, verbose = FALSE)   aggregateFemales(readDir = folderNames[i], genotypes = cube$genotypesID,                    remFile = TRUE, verbose = FALSE) }  # plot output of first run to see effect plotMGDrivESingle(readDir = folderNames[1], totalPop = TRUE, lwd = 3.5, alpha = 1) # plot all 50 repetitions together plotMGDrivEMult(readDir = outFolder, lwd = 0.35, alpha = 0.75)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"mendelian-inheritance-simulations-two-populations","dir":"Articles","previous_headings":"Inheritance Simulations","what":"Mendelian Inheritance Simulations, Two Populations","title":"MGDrivE Examples","text":"Single, panmictic populations simple analyze rarely encountered nature. Often, populations identical individuals separated geography, great distances road difficult cross. creates structures within populations can drastically alter genes spread. , explore results first simulation change structured population two halves population never mix. MGDrivE handles population structure considering separate, panmictic populations migration rate . makes MGDrivE meta-population model, individual populations part graph, connected via migration mixture rate. following simulation, use two nodes, two well-mixed populations, migration . , simulate releases one population, analyze happens.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"deterministic-no-migration","dir":"Articles","previous_headings":"Inheritance Simulations > Mendelian Inheritance Simulations, Two Populations","what":"Deterministic, No Migration","title":"MGDrivE Examples","text":"plots now expanded include populations simulation, labeled right side plot. performed 5 releases 50 aa individuals first node. However, since migration populations, see Aa individuals appear patch 1 , patch 2 remains completely AA.","code":"#################### # Load libraries #################### library(MGDrivE)  #################### # Output Folder #################### outFolder <- \"mgdrive\"  #################### # Simulation Parameters #################### # days to run the simulation tMax <- 365  # entomological parameters bioParameters <- list(betaK=20, tEgg=5, tLarva=6, tPupa=4, popGrowth=1.175, muAd=0.09)  # a 2-node network where mosquitoes do not leave moveMat <- matrix(data = c(1,0,0,1), nrow = 2, ncol = 2) moveMat #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1  # parameters of the population equilibrium adultPopEquilibrium <- 500 sitesNumber <- nrow(moveMat)  #################### # Basic Inheritance pattern #################### # Mendelian cube with standard (default) parameters cube <- cubeMendelian()  #################### # Setup releases and batch migration #################### # set up the empty release vector #  MGDrivE pulls things out by name patchReleases <- replicate(n=sitesNumber,                            expr={list(maleReleases=NULL,femaleReleases=NULL,                                       eggReleases=NULL,matedFemaleReleases=NULL)},                            simplify=FALSE)  # choose release parameters #  Releases start at time 25, occur every day, for 5 days. #  There are 50 mosquitoes released every time. releasesParameters <- list(releasesStart=25,                            releasesNumber=5,                            releasesInterval=0,                            releaseProportion=50)  # generate release vector releasesVector <- generateReleaseVector(driveCube=cube,                                         releasesParameters=releasesParameters)  # put releases into the proper place in the release list patchReleases[[1]]$maleReleases <- releasesVector patchReleases[[1]]$femaleReleases <- releasesVector  # batch migration is disabled by setting the probability to 0 # This is required because of the stochastic simulations, but doesn't make sense #  in a deterministic simulation. batchMigration <- basicBatchMigration(batchProbs=0,                                       sexProbs=c(.5,.5),                                       numPatches=sitesNumber)  #################### # Combine parameters and run! #################### # set MGDrivE to run deterministic setupMGDrivE(stochasticityON = FALSE, verbose = FALSE)  # setup parameters for the network. This builds a list of parameters required for #  every population in the network. In ths case, we have a network of 2 populations. netPar <- parameterizeMGDrivE(runID=1, simTime=tMax, nPatch=sitesNumber,                               beta=bioParameters$betaK, muAd=bioParameters$muAd,                               popGrowth=bioParameters$popGrowth, tEgg=bioParameters$tEgg,                               tLarva=bioParameters$tLarva, tPupa=bioParameters$tPupa,                               AdPopEQ=adultPopEquilibrium, inheritanceCube = cube)  # build network prior to run MGDrivESim <- Network$new(params=netPar,                           driveCube=cube,                           patchReleases=patchReleases,                           migrationMale=moveMat,                           migrationFemale=moveMat,                           migrationBatch=batchMigration,                           directory=outFolder,                           verbose=FALSE) # run simulation MGDrivESim$oneRun(verbose = FALSE)  #################### # Post Analysis #################### # split output by patch #  Required for plotting later splitOutput(readDir = outFolder, verbose = FALSE, remFile = TRUE)  # aggregate females by their mate choice #  This reduces the female file to have the same columns as the male file aggregateFemales(readDir = outFolder, genotypes = cube$genotypesID,                  remFile = TRUE, verbose = FALSE)  # plot output to see effect plotMGDrivESingle(readDir = outFolder, lwd = 3.5, alpha = 1)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"deterministic-small-migration","dir":"Articles","previous_headings":"Inheritance Simulations > Mendelian Inheritance Simulations, Two Populations","what":"Deterministic, Small Migration","title":"MGDrivE Examples","text":"Now, increase migration 1% per day populations, see heterozygous individuals appear patch 2, even though perform releases patch 1. (repeat entire code users’ benefit.)  expected, 1% daily migration rate, see heterozygotes patch 2 shortly begin emerging patch 1.","code":"#################### # Load libraries #################### library(MGDrivE)  #################### # Output Folder #################### outFolder <- \"mgdrive\"  #################### # Simulation Parameters #################### # days to run the simulation tMax <- 365  # entomological parameters bioParameters <- list(betaK=20, tEgg=5, tLarva=6, tPupa=4, popGrowth=1.175, muAd=0.09)  # a 2-node network with 1% per day migration rate moveMat <- matrix(data = c(0.99,0.01,0.01,0.99), nrow = 2, ncol = 2) moveMat #>      [,1] [,2] #> [1,] 0.99 0.01 #> [2,] 0.01 0.99  # parameters of the population equilibrium adultPopEquilibrium <- 500 sitesNumber <- nrow(moveMat) patchPops <- rep(adultPopEquilibrium,sitesNumber)  #################### # Basic Inheritance pattern #################### # Mendelian cube with standard (default) parameters cube <- cubeMendelian()  #################### # Setup releases and batch migration #################### # set up the empty release vector #  MGDrivE pulls things out by name patchReleases <- replicate(n=sitesNumber,                            expr={list(maleReleases=NULL,femaleReleases=NULL,                                       eggReleases=NULL,matedFemaleReleases=NULL)},                            simplify=FALSE)  # choose release parameters #  Releases start at time 25, occur every day, for 5 days. #  There are 50 mosquitoes released every time. releasesParameters <- list(releasesStart=25,                            releasesNumber=5,                            releasesInterval=0,                            releaseProportion=50)  # generate male release vector maleReleasesVector <- generateReleaseVector(driveCube=cube,                                             releasesParameters=releasesParameters)  # generate female release vector femaleReleasesVector <- generateReleaseVector(driveCube=cube,                                               releasesParameters=releasesParameters)  # put releases into the proper place in the release list patchReleases[[1]]$maleReleases <- maleReleasesVector patchReleases[[1]]$femaleReleases <- femaleReleasesVector  # batch migration is disabled by setting the probability to 0 # This is required because of the stochastic simulations, but doesn't make sense #  in a deterministic simulation. batchMigration <- basicBatchMigration(batchProbs=0,                                      sexProbs=c(.5,.5),                                      numPatches=sitesNumber)  #################### # Combine parameters and run! #################### # set MGDrivE to run deterministic setupMGDrivE(stochasticityON = FALSE, verbose = FALSE)  # setup parameters for the network. This builds a list of parameters required for #  every population in the network. In ths case, we have a network of 2 populations. netPar <- parameterizeMGDrivE(runID=1, simTime=tMax, nPatch=sitesNumber,                              beta=bioParameters$betaK, muAd=bioParameters$muAd,                              popGrowth=bioParameters$popGrowth, tEgg=bioParameters$tEgg,                              tLarva=bioParameters$tLarva, tPupa=bioParameters$tPupa,                              AdPopEQ=patchPops, inheritanceCube = cube)  # build network prior to run MGDrivESim <- Network$new(params=netPar,                          driveCube=cube,                          patchReleases=patchReleases,                          migrationMale=moveMat,                          migrationFemale=moveMat,                          migrationBatch=batchMigration,                          directory=outFolder,                          verbose = FALSE) # run simulation MGDrivESim$oneRun(verbose = FALSE)  #################### # Post Analysis #################### # split output by patch #  Required for plotting later splitOutput(readDir = outFolder, verbose = FALSE, remFile = TRUE)  # aggregate females by their mate choice #  This reduces the female file to have the same columns as the male file aggregateFemales(readDir = outFolder, genotypes = cube$genotypesID,                 remFile = TRUE, verbose = FALSE)  # plot output to see effect plotMGDrivESingle(readDir = outFolder, totalPop = TRUE, lwd = 3.5, alpha = 1)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"stochastic-small-migration","dir":"Articles","previous_headings":"Inheritance Simulations > Mendelian Inheritance Simulations, Two Populations","what":"Stochastic, Small Migration","title":"MGDrivE Examples","text":"small migration rates, interesting see scenario changes using stochastic simulation. repetitions take significantly longer heterozygotes migrate patch 1 patch 2. , keep parameters , run 25 stochastic repetitions instead deterministic simulation.   Looking first plot, just one repetition 25 ran, see release time 25 increase heterozygotes . look closely, aa individuals migrate second patch, . see population Aa individuals fluctuates near zero end simulation, enough never completely drop population. total population fluctuates around 500 individuals, 250 males females, expected parameters provided. Looking second plot 25 repetitions provided, see simulations heuristically agree deterministic ones performed . general analysis remains , noise, accounting random fluctuations real populations. particularly enlightening setting, behavior outcome , ’s easy see low-frequency genotypes lost population.","code":"#################### # Load libraries #################### library(MGDrivE)  #################### # Output Folder #################### # This is slightly obtuse for vignette building reasons #  Really, all you need is a base directory, then the repetitions in folders inside that. #  Here, our base directory is \"mgdrive\", and the repetition folders are \"001\",\"002\", etc. #  So, the final structure is \"mgdrive/001\",\"mgdrive/002\", etc. outFolder <- \"mgdrive\" dir.create(path = outFolder)  #################### # Simulation Parameters #################### # days to run the simulation tMax <- 365  # number of Monte Carlo iterations nRep <- 25  # each Monte Carlo iteration gets its own folder folderNames <- file.path(outFolder,                         formatC(x = 1:nRep, width = 3, format = \"d\", flag = \"0\"))  # entomological parameters bioParameters <- list(betaK=20, tEgg=5, tLarva=6, tPupa=4, popGrowth=1.175, muAd=0.09)  # a 2-node network with 1% per day migration rate moveMat <- matrix(data = c(0.99,0.01,0.01,0.99), nrow = 2, ncol = 2) moveMat #>      [,1] [,2] #> [1,] 0.99 0.01 #> [2,] 0.01 0.99  # parameters of the population equilibrium adultPopEquilibrium <- 500 sitesNumber <- nrow(moveMat)  #################### # Basic Inheritance pattern #################### # Mendelian cube with standard (default) parameters cube <- cubeMendelian()  #################### # Setup releases and batch migration #################### # set up the empty release vector #  MGDrivE pulls things out by name patchReleases <- replicate(n=sitesNumber,                            expr={list(maleReleases=NULL,femaleReleases=NULL,                                       eggReleases=NULL,matedFemaleReleases=NULL)},                            simplify=FALSE)  # choose release parameters #  Releases start at time 25, occur every day, for 5 days. #  There are 50 mosquitoes released every time. releasesParameters <- list(releasesStart=25,                           releasesNumber=5,                           releasesInterval=0,                           releaseProportion=50)  # generate release vector releasesVector <- generateReleaseVector(driveCube=cube,                                         releasesParameters=releasesParameters)  # put releases into the proper place in the release list patchReleases[[1]]$maleReleases <- releasesVector patchReleases[[1]]$femaleReleases <- releasesVector  # batch migration is disabled by setting the probability to 0 # This is required because of the stochastic simulations, but doesn't make sense #  in a deterministic simulation. batchMigration <- basicBatchMigration(batchProbs=0,                                      sexProbs=c(.5,.5),                                      numPatches=sitesNumber)  #################### # Combine parameters and run! #################### # set MGDrivE to run stochastic setupMGDrivE(stochasticityON = TRUE, verbose = FALSE)  # setup parameters for the network. This builds a list of parameters required for #  every population in the network. In ths case, we have a network of 2 populations. netPar <- parameterizeMGDrivE(runID=1, simTime=tMax, nPatch=sitesNumber,                              beta=bioParameters$betaK, muAd=bioParameters$muAd,                              popGrowth=bioParameters$popGrowth, tEgg=bioParameters$tEgg,                              tLarva=bioParameters$tLarva, tPupa=bioParameters$tPupa,                              AdPopEQ=adultPopEquilibrium, inheritanceCube = cube)  # build network prior to run MGDrivESim <- Network$new(params=netPar,                          driveCube=cube,                          patchReleases=patchReleases,                          migrationMale=moveMat,                          migrationFemale=moveMat,                          migrationBatch=batchMigration,                          directory=folderNames,                          verbose = FALSE) # run simulation MGDrivESim$multRun(verbose = FALSE)  #################### # Post Analysis #################### # First, split output by patch # Second, aggregate females by their mate choice for(i in 1:nRep){  splitOutput(readDir = folderNames[i], remFile = TRUE, verbose = FALSE)  aggregateFemales(readDir = folderNames[i], genotypes = cube$genotypesID,                   remFile = TRUE, verbose = FALSE) }  # plot output of first run to see effect plotMGDrivESingle(readDir = folderNames[1], totalPop = TRUE, lwd = 3.5, alpha = 1) # plot all 25 repetitions together plotMGDrivEMult(readDir = outFolder, lwd = 0.35, alpha = 0.75)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"stochastic-small-migration-and-fitness-cost","dir":"Articles","previous_headings":"Inheritance Simulations > Mendelian Inheritance Simulations, Two Populations","what":"Stochastic, Small Migration and Fitness Cost","title":"MGDrivE Examples","text":"final example, perform stochastic, two-population simulation fitness cost explored previously, .e., 60% reduction lifetime AA aa individuals. first explored single, panmictic population using deterministic simulation, explored effect stochasticity results. , extend analysis two-population setting, explore population structure might affect results.   Looking first plot, single repetition stochastic simulation, see results similar. population size first drops 300, 60% equilibration population, increases 400, expected deterministic simulation analysis performed . notice however, dynamics slower first population single-population exploration. performed releases, second population, small immigration AA individuals first patch small emigration aa Aa individuals patch 1 patch 2. Thus, effectively twice population size total, even though 1% chance mixing per day. second plot shows 25 repetitions simulation. results clearly follow one-node, deterministic simulation performed . initial population drop, patches fully AA perform releases, releases small recovery population size. general dynamics remain similar, shift AA Aa individuals population taking little longer originally. also something saw one-node stochastic simulation, result stochasticity population dynamics, well migration /second patch.","code":"#################### # Load libraries #################### library(MGDrivE)  #################### # Output Folder #################### # This is slightly obtuse for vignette building reasons #  Really, all you need is a base directory, then the repetitions in folders inside that. #  Here, our base directory is \"mgdrive\", and the repetition folders are \"001\",\"002\", etc. #  So, the final structure is \"mgdrive/001\",\"mgdrive/002\", etc. outFolder <- \"mgdrive\" dir.create(path = outFolder)  #################### # Simulation Parameters #################### # days to run the simulation tMax <- 365*2  # number of Monte Carlo iterations nRep <- 25  # each Monte Carlo iteration gets its own folder folderNames <- file.path(outFolder,                          formatC(x = 1:nRep, width = 3, format = \"d\", flag = \"0\"))  # entomological parameters bioParameters <- list(betaK=20, tEgg=5, tLarva=6, tPupa=4, popGrowth=1.175, muAd=0.09)  # a 2-node network with 1% per day migration rate moveMat <- matrix(data = c(0.99,0.01,0.01,0.99), nrow = 2, ncol = 2)  # parameters of the population equilibrium adultPopEquilibrium <- 500 sitesNumber <- nrow(moveMat)  #################### # Basic Inheritance pattern #################### # Mendelian cube  # This time, lets put fitness cost on the homozygotes, giving the heterozygote #  an advantage  # These genotypes correspond to ones in the cube. Look at a base cube first, #  then set this. # Homozygotes are 60% as fit as heterozygote over their entire lifetime #  Since omega is a daily death rate, we use the built-in function to calculate #  our desired lifetime cost as applied daily dayOmega <- calcOmega(mu = bioParameters$muAd, lifespanReduction = 0.60) omegaNew <- c(\"AA\"=dayOmega, \"aa\"=dayOmega)  # setup cube cube <- cubeMendelian(omega = omegaNew)  #################### # Setup releases and batch migration #################### # set up the empty release vector #  MGDrivE pulls things out by name patchReleases <- replicate(n=sitesNumber,                            expr={list(maleReleases=NULL,femaleReleases=NULL,                                       eggReleases=NULL,matedFemaleReleases=NULL)},                            simplify=FALSE)  # choose release parameters #  Releases start at time 100, occur every day, for 5 days. #  There are 50 mosquitoes released every time. releasesParameters <- list(releasesStart=100,                            releasesNumber=5,                            releasesInterval=0,                            releaseProportion=50)  # generate male release vector maleReleasesVector <- generateReleaseVector(driveCube=cube,                                             releasesParameters=releasesParameters)  # generate female release vector femaleReleasesVector <- generateReleaseVector(driveCube=cube,                                               releasesParameters=releasesParameters)  # put releases into the proper place in the release list patchReleases[[1]]$maleReleases <- maleReleasesVector patchReleases[[1]]$femaleReleases <- femaleReleasesVector  # batch migration is disabled by setting the probability to 0 # This is required because of the stochastic simulations, but doesn't make sense #  in a deterministic simulation. batchMigration <- basicBatchMigration(batchProbs=0,                                      sexProbs=c(.5,.5),                                      numPatches=sitesNumber)  #################### # Combine parameters and run! #################### # set MGDrivE to run stochastic setupMGDrivE(stochasticityON = TRUE, verbose = FALSE)  # setup parameters for the network. This builds a list of parameters required for #  every population in the network. In ths case, we have a network of 2 populations. netPar <- parameterizeMGDrivE(runID=1, simTime=tMax, nPatch=sitesNumber,                              beta=bioParameters$betaK, muAd=bioParameters$muAd,                              popGrowth=bioParameters$popGrowth, tEgg=bioParameters$tEgg,                              tLarva=bioParameters$tLarva, tPupa=bioParameters$tPupa,                              AdPopEQ=adultPopEquilibrium, inheritanceCube = cube)  # build network prior to run MGDrivESim <- Network$new(params=netPar,                          driveCube=cube,                          patchReleases=patchReleases,                          migrationMale=moveMat,                          migrationFemale=moveMat,                          migrationBatch=batchMigration,                          directory=folderNames,                          verbose = FALSE) # run simulation MGDrivESim$multRun(verbose = FALSE)  #################### # Post Analysis #################### # First, split output by patch # Second, aggregate females by their mate choice for(i in 1:nRep){  splitOutput(readDir = folderNames[i], remFile = TRUE, verbose = FALSE)  aggregateFemales(readDir = folderNames[i], genotypes = cube$genotypesID,                   remFile = TRUE, verbose = FALSE) }  # plot output of first run to see effect #  per the structure above, we are reading \"mgdrive/001\" for the single plot plotMGDrivESingle(readDir = folderNames[1], totalPop = TRUE, lwd = 3.5, alpha = 1) # plot all 50 repetitions together #  Here, we feed the function \"mgdrive/\", and it finds all repetition folders #   inside that. plotMGDrivEMult(readDir = outFolder, lwd = 0.35, alpha = 0.75)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"reciprocal-translocation-gene-drive-simulations-one-population","dir":"Articles","previous_headings":"Inheritance Simulations","what":"Reciprocal Translocation Gene Drive Simulations, One Population","title":"MGDrivE Examples","text":"Reciprocal translocations classic form gene drive, utilizing underdominance effects gene dosage compensation either suppress population replace population, depending fitness costs release frequencies. classic reciprocal translocation involves breaking two chromosomes, swapping broken ends, reattaching ends opposite chromosomes. Theoretically, creates perfect 50% fitness cost population, shown previously. However, previous simulations studying reciprocal translocations panmictic, deterministic, ignore life-stages. Thus, start two deterministic simulations, find critical threshold complete life-history included, explore threshold affected stochasticity.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"deterministic-below-threshold","dir":"Articles","previous_headings":"Inheritance Simulations > Reciprocal Translocation Gene Drive Simulations, One Population","what":"Deterministic, Below Threshold","title":"MGDrivE Examples","text":"maintain theoretical fitness cost, namely, possession 1 copy reciprocal chromosome always fatal. perform 5 releases transgenic critters, male female, every 7 days starting day 25. enough make population 50% transgenic, therefore transgenic critters die .  plot number female (left) male (right) critters period two years. total population shown purple, wild-type (aabb) individuals orange fully transgenic individuals (AABB) light blue. see total population increase dramatically releases, fall back little equilibrium amount. offspring transgenic wild-type critters non-viable. Eventually, transgenic individuals completely die population wild-type . expected behavior reciprocal translocations 50% critical threshold achieved.","code":"#################### # Load libraries #################### library(MGDrivE)  #################### # Output Folder #################### outFolder <- \"mgdrive\"  #################### # Simulation Parameters #################### # days to run the simulation, 2 years tMax <- 365*2  # entomological parameters bioParameters <- list(betaK=20, tEgg=5, tLarva=6, tPupa=4, popGrowth=1.175, muAd=0.09)  # a 1-node network where mosquitoes do not leave moveMat <- as.matrix(1)  # parameters of the population equilibrium adultPopEquilibrium <- 500 sitesNumber <- nrow(moveMat)  #################### # Basic Inheritance pattern #################### # Reciprocal translocation cube with standard (default) parameters cube <- cubeReciprocalTranslocations()  #################### # Setup releases and batch migration #################### # set up the empty release vector #  MGDrivE pulls things out by name patchReleases <- replicate(n=sitesNumber,                            expr={list(maleReleases=NULL,femaleReleases=NULL,                                       eggReleases=NULL,matedFemaleReleases=NULL)},                            simplify=FALSE)  # choose release parameters #  Releases start at time 25, occur once a week, for 5 weeks. #  There are 100 mosquitoes released every time. releasesParameters <- list(releasesStart=25,                           releasesNumber=5,                           releasesInterval=7,                           releaseProportion=100)  # generate male release vector maleReleasesVector <- generateReleaseVector(driveCube=cube,                                            releasesParameters=releasesParameters)  # generate female release vector femaleReleasesVector <- generateReleaseVector(driveCube=cube,                                              releasesParameters=releasesParameters)  # put releases into the proper place in the release list patchReleases[[1]]$maleReleases <- maleReleasesVector patchReleases[[1]]$femaleReleases <- femaleReleasesVector  # batch migration is disabled by setting the probability to 0 # This is required because of the stochastic simulations, but doesn't make sense #  in a deterministic simulation. batchMigration <- basicBatchMigration(batchProbs=0,                                      sexProbs=c(.5,.5),                                      numPatches=sitesNumber)  #################### # Combine parameters and run! #################### # set MGDrivE to run deterministic setupMGDrivE(stochasticityON = FALSE, verbose = FALSE)  # setup parameters for the network. This builds a list of parameters required for #  every population in the network. In ths case, we have a network of 1 population. netPar <- parameterizeMGDrivE(runID=1, simTime=tMax, nPatch=sitesNumber,                              beta=bioParameters$betaK, muAd=bioParameters$muAd,                              popGrowth=bioParameters$popGrowth, tEgg=bioParameters$tEgg,                              tLarva=bioParameters$tLarva, tPupa=bioParameters$tPupa,                              AdPopEQ=adultPopEquilibrium, inheritanceCube = cube)  # build network prior to run MGDrivESim <- Network$new(params=netPar,                          driveCube=cube,                          patchReleases=patchReleases,                          migrationMale=moveMat,                          migrationFemale=moveMat,                          migrationBatch=batchMigration,                          directory=outFolder,                          verbose = FALSE) # run simulation MGDrivESim$oneRun(verbose = FALSE)  #################### # Post Analysis #################### # split output by patch #  Required for plotting later splitOutput(readDir = outFolder, remFile = TRUE, verbose = FALSE)  # aggregate females by their mate choice #  This reduces the female file to have the same columns as the male file aggregateFemales(readDir = outFolder, genotypes = cube$genotypesID,                 remFile = TRUE, verbose = FALSE)  # plot output to see effect plotMGDrivESingle(readDir = outFolder, totalPop = TRUE, lwd = 3.5, alpha = 1)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"deterministic-above-threshold","dir":"Articles","previous_headings":"Inheritance Simulations > Reciprocal Translocation Gene Drive Simulations, One Population","what":"Deterministic, Above Threshold","title":"MGDrivE Examples","text":"Now, perform simulation , increase number releases one, 5 releases 6. enough get critical threshold, see population turn entirely transgenic individuals.  Analyzing plots , notice one release dramatic change outcome simulation. time, releases surpassed critical threshold transgenic critters took population. though, see slight depression population size initially releases, population mix wild-type transgenics. However, population entirely transgenic, total size returns equilibrium value.","code":"#################### # Load libraries #################### library(MGDrivE)  #################### # Output Folder #################### outFolder <- \"mgdrive\"  #################### # Simulation Parameters #################### # days to run the simulation, 2 years tMax <- 365*2  # entomological parameters bioParameters <- list(betaK=20, tEgg=5, tLarva=6, tPupa=4, popGrowth=1.175, muAd=0.09)  # a 1-node network where mosquitoes do not leave moveMat <- as.matrix(1)  # parameters of the population equilibrium adultPopEquilibrium <- 500 sitesNumber <- nrow(moveMat) patchPops <- rep(adultPopEquilibrium,sitesNumber)  #################### # Basic Inheritance pattern #################### # Reciprocal translocation cube with standard (default) parameters cube <- cubeReciprocalTranslocations()  #################### # Setup releases and batch migration #################### # set up the empty release vector #  MGDrivE pulls things out by name patchReleases <- replicate(n=sitesNumber,                            expr={list(maleReleases=NULL,femaleReleases=NULL,                                       eggReleases=NULL,matedFemaleReleases=NULL)},                            simplify=FALSE)  # choose release parameters #  Releases start at time 25, occur once a week, for 6 weeks. #  There are 100 mosquitoes released every time. releasesParameters <- list(releasesStart=25,                            releasesNumber=6,                            releasesInterval=7,                            releaseProportion=100)  # generate release vector releasesVector <- generateReleaseVector(driveCube=cube,                                         releasesParameters=releasesParameters)  # put releases into the proper place in the release list patchReleases[[1]]$maleReleases <- releasesVector patchReleases[[1]]$femaleReleases <- releasesVector  # batch migration is disabled by setting the probability to 0 # This is required because of the stochastic simulations, but doesn't make sense #  in a deterministic simulation. batchMigration <- basicBatchMigration(batchProbs=0,                                       sexProbs=c(.5,.5),                                       numPatches=sitesNumber)  #################### # Combine parameters and run! #################### # set MGDrivE to run deterministic setupMGDrivE(stochasticityON = FALSE, verbose = FALSE)  # setup parameters for the network. This builds a list of parameters required for #  every population in the network. In ths case, we have a network of 1 population. netPar <- parameterizeMGDrivE(runID=1, simTime=tMax, nPatch=sitesNumber,                               beta=bioParameters$betaK, muAd=bioParameters$muAd,                               popGrowth=bioParameters$popGrowth, tEgg=bioParameters$tEgg,                               tLarva=bioParameters$tLarva, tPupa=bioParameters$tPupa,                               AdPopEQ=patchPops, inheritanceCube = cube)  # build network prior to run MGDrivESim <- Network$new(params=netPar,                           driveCube=cube,                           patchReleases=patchReleases,                           migrationMale=moveMat,                           migrationFemale=moveMat,                           migrationBatch=batchMigration,                           directory=outFolder,                           verbose = FALSE) # run simulation MGDrivESim$oneRun(verbose = FALSE)  #################### # Post Analysis #################### # split output by patch #  Required for plotting later splitOutput(readDir = outFolder, remFile = TRUE, verbose = FALSE)  # aggregate females by their mate choice #  This reduces the female file to have the same columns as the male file aggregateFemales(readDir = outFolder, genotypes = cube$genotypesID,                  remFile = TRUE, verbose = FALSE)  # plot output to see effect plotMGDrivESingle(readDir = outFolder, totalPop = TRUE, lwd = 3.5, alpha = 1)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_examples.html","id":"stochastic-above-threshold","dir":"Articles","previous_headings":"Inheritance Simulations > Reciprocal Translocation Gene Drive Simulations, One Population","what":"Stochastic, “Above” Threshold","title":"MGDrivE Examples","text":"preceding two simulations show dramatically different results addition single release. implies near critical threshold gives false impression distinct certain outcome. Stochastic fluctuations can quickly push us across threshold, even deterministic simulations implied passed/passed . Using stochastic simulations, can put probability outcome, given near threshold. Thus, perform simulation , 6 releases, think puts us critical threshold. However, see , entirely case.   perform 20 repetitions stochastic simulation. experimental setting, perform many repetitions (number repetitions related precision estimate. 100 repetitions provide 1% resolution, 20 repetitions provides 5% resolution), outcome resolution needs balanced run time. First plot single repetition. Wild-type (aabb) critters orange, transgenic (AABB) critters blue. see fluctuation, final result match deterministic simulation. little worrisome, means close threshold easy go back . Plotting 20 repetitions, see results clear . extended simulation 1095 days allow repetitions achieve final trajectory. First, near critical threshold, stochastic fluctuations dramatically slow population dynamics. deterministic simulations finished two years, stochastic simulations took nearly three years trajectories reach equilibrium. Second, notice simulations ended fully transgenic population. fact, 80% repetitions ended fully transgenic population. repetitions provide precise answer, now know set parameters 80 +/-5% effective.","code":"#################### # Load libraries #################### library(MGDrivE)  #################### # Output Folder #################### # This is slightly obtuse for vignette building reasons #  Really, all you need is a base directory, then the repetitions in folders inside that. #  Here, our base directory is \"mgdrive\", and the repetition folders are \"001\",\"002\", etc. #  So, the final structure is \"mgdrive/001\",\"mgdrive/002\", etc. outFolder <- \"mgdrive\" dir.create(path = outFolder)  #################### # Simulation Parameters #################### # days to run the simulation, 3 years tMax <- 365*3  # number of Monte Carlo iterations nRep <- 20  # each Monte Carlo iteration gets its own folder folderNames <- file.path(outFolder,                         formatC(x = 1:nRep, width = 3, format = \"d\", flag = \"0\"))  # entomological parameters bioParameters <- list(betaK=20, tEgg=5, tLarva=6, tPupa=4, popGrowth=1.175, muAd=0.09)  # a 1-node network where mosquitoes do not leave moveMat <- as.matrix(1)  # parameters of the population equilibrium adultPopEquilibrium <- 500 sitesNumber <- nrow(moveMat)  #################### # Basic Inheritance pattern #################### # Reciprocal translocation cube with standard (default) parameters cube <- cubeReciprocalTranslocations()  #################### # Setup releases and batch migration #################### # set up the empty release vector #  MGDrivE pulls things out by name patchReleases <- replicate(n=sitesNumber,                            expr={list(maleReleases=NULL,femaleReleases=NULL,                                       eggReleases=NULL,matedFemaleReleases=NULL)},                            simplify=FALSE)  # choose release parameters #  Releases start at time 25, occur once a week, for 6 weeks. #  There are 100 mosquitoes released every time. releasesParameters <- list(releasesStart=25,                           releasesNumber=6,                           releasesInterval=7,                           releaseProportion=100)  # generate male release vector maleReleasesVector <- generateReleaseVector(driveCube=cube,                                            releasesParameters=releasesParameters)  # generate female release vector femaleReleasesVector <- generateReleaseVector(driveCube=cube,                                              releasesParameters=releasesParameters)  # put releases into the proper place in the release list patchReleases[[1]]$maleReleases <- maleReleasesVector patchReleases[[1]]$femaleReleases <- femaleReleasesVector  # batch migration is disabled by setting the probability to 0 # This is required because of the stochastic simulations, but doesn't make sense #  in a deterministic simulation. batchMigration <- basicBatchMigration(batchProbs=0,                                      sexProbs=c(.5,.5),                                      numPatches=sitesNumber)  #################### # Combine parameters and run! #################### # set MGDrivE to run stochastic setupMGDrivE(stochasticityON = TRUE, verbose = FALSE)  # setup parameters for the network. This builds a list of parameters required for #  every population in the network. In ths case, we have a network of 1 population. netPar <- parameterizeMGDrivE(runID=1, simTime=tMax, nPatch=sitesNumber,                              beta=bioParameters$betaK, muAd=bioParameters$muAd,                              popGrowth=bioParameters$popGrowth, tEgg=bioParameters$tEgg,                              tLarva=bioParameters$tLarva, tPupa=bioParameters$tPupa,                              AdPopEQ=adultPopEquilibrium, inheritanceCube = cube)  # build network prior to run MGDrivESim <- Network$new(params=netPar,                          driveCube=cube,                          patchReleases=patchReleases,                          migrationMale=moveMat,                          migrationFemale=moveMat,                          migrationBatch=batchMigration,                          directory=folderNames,                          verbose = TRUE) #> initializing patch:  1  of  1 # run simulation MGDrivESim$multRun(verbose = FALSE)  #################### # Post Analysis #################### # First, split output by patch # Second, aggregate females by their mate choice for(i in 1:nRep){  splitOutput(readDir = folderNames[i], remFile = TRUE, verbose = FALSE)  aggregateFemales(readDir = folderNames[i], genotypes = cube$genotypesID,                   remFile = TRUE, verbose = FALSE) }  # plot output of first run to see effect plotMGDrivESingle(readDir = folderNames[1], lwd = 3.5, alpha = 1) # plot all 50 repetitions together plotMGDrivEMult(readDir = outFolder, lwd = 0.35, alpha = 0.75)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_math.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"MGDrivE Mathematical Description","text":"Recent developments CRISPR-Cas9 based homing endonuclease gene drive systems, either suppression replacement mosquito populations, generated much interest use control mosquito-borne diseases (dengue, malaria, Chikungunya Zika). genetic control pathogen transmission may complement even substitute traditional vector-control interventions, limited success bringing spread diseases halt. Despite excitement use gene drives mosquito control, current modeling efforts analyzed handful new approaches (usually studying just one per framework). Moreover, models usually consider well-mixed populations explicit spatial dynamics. end, developing MGDrivE (Mosquito Gene DRIVe Explorer), cooperation ‘UCI Malaria Elimination Initiative’, flexible modeling framework evaluate variety drive systems spatial networks mosquito populations. framework provides reliable testbed evaluate optimize efficacy gene drive mosquito releases. separates MGDrivE models incorporation mathematical computational mechanisms simulate wide array inheritance-based technologies within , coherent set equations. treating population dynamics, genetic inheritance operations, migration habitats separate processes coupled together use mathematical tensor operations. way can conveniently swap inheritance patterns whilst still making use set population dynamics equations. crucial advantage system, allows research groups test ideas without developing new models without need spend time adapting frameworks suit needs.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_math.html","id":"brief-description","dir":"Articles","previous_headings":"Introduction","what":"Brief Description","title":"MGDrivE Mathematical Description","text":"MGDrivE based idea can decouple genotype inheritance process population dynamics equations. allows system treated developed three semi-independent modules come together form system. Fig. 1: MGDrivE Conceptual Model Framework","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_math.html","id":"previous-work","dir":"Articles","previous_headings":"Introduction > Brief Description","what":"Previous Work:","title":"MGDrivE Mathematical Description","text":"original version model based work Deredec et al. (2011) Hancock & Godfray (2007), adapted accommodate CRISPR homing dynamics previous publication team (Marshall et al. 2017). described, extended framework able handle variable number genotypes, migration across spatial scenarios. adapting equations work tensor-oriented manner, genotype can different processes affecting particular strain (death rates, mating fitness, sex-ratio bias, et cetera).","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_math.html","id":"notation-and-conventions","dir":"Articles","previous_headings":"Introduction > Brief Description","what":"Notation and Conventions","title":"MGDrivE Mathematical Description","text":"beginning full description model define conventions followed notation written description system. Overlines used denote dimension tensor Subscript brackets used indicate element time. example: \\(L_{[t-1]}\\) larval population time: \\(t-1\\). Parentheses used indicate parameter(s) function. example: \\(\\overline{O(T_{e}+T_{l})}\\) represents function \\(O\\) evaluated parameter: \\(T_{e}+T_{l}\\) Matrices follow ‘row-first’ indexing order (\\(\\): row, \\(j\\): column) case one dimensional tensors, slot represents genotype population. example, male population stored following way: \\[ \\overline{} = \\left(\\begin{array}{c} g_1 \\\\ g_2 \\\\ g_3 \\\\ \\vdots \\\\ g_n \\end{array}\\right) _{} \\] processes affect mosquitoes genotype-specific way defined stored way within framework. two tensors squared dimensionality model: adult females matrix, genotype-specific male-mating ability, \\(\\overline{\\overline{\\eta}}\\). case former, rows represent females’ genotype, whilst columns represent genotype male mated : \\[ \\overline{\\overline{Af}} = \\left(\\begin{array}{ccccc} g_{11} & g_{12} & g_{13} & \\cdots & g_{1n}\\\\ g_{21} & g_{22} & g_{23} & \\cdots & g_{2n}\\\\ g_{31} & g_{32} & g_{33} & \\cdots & g_{3n}\\\\ \\vdots & \\vdots & \\vdots & \\ddots & \\vdots\\\\ g_{n1} & g_{n2} & g_{n3} & \\cdots & g_{nn} \\end{array}\\right) _{ij} \\] genotype-specific male-mating ability, hand, stores mothers’ genotype rows, male mate genotype columns, value indicates ability specific male genotype mate specific female genotype. allows assortative mating modeled.","code":""},{"path":[]},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_math.html","id":"inheritance-cube","dir":"Articles","previous_headings":"Mathematical Framework","what":"Inheritance Cube","title":"MGDrivE Mathematical Description","text":"model arbitrary number genotypes efficiently mathematical framework use 3-dimensional array structure (cube) axis represents following information: x: female adult mate genotype y: male adult mate genotype z: proportion offspring inherits given genotype (slice) cube structure gives us flexibility apply tensor operations elements within equations, can calculate stratified population dynamics rapidly; within readable, flexible computational framework. becomes apparent define equation use computation eggs laid given point time: \\[ \\overline{O(T_x)} = \\sum_{j=1}^{n} \\Bigg( \\bigg( (\\beta*\\overline{s} * \\overline{ \\overline{Af_{[t-T_x]}}}) * \\overline{\\overline{\\overline{Ih}}} \\bigg) * \\Lambda  \\Bigg)^{\\top}_{ij} \\] equation, matrix containing number mated adult females \\((\\overline{\\overline{Af}})\\) multiplied element-wise one layers containing eggs genotypes proportions expected cross \\((\\overline{\\overline{\\overline{Ih}}})\\). resulting matrix multiplied binary ‘viability mask’ \\((\\Lambda)\\) filters female-parent offspring genetic combinations viable due biological impediments (cytoplasmic incompatibility). summation transposed resulting matrix returns us total fraction eggs resulting male female genotype crosses (\\(\\overline{O(T_x)}\\)). Note: inheritance operations consistent within framework summation element z-axis (, proportions one offspring’s genotypes) must equal one.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_math.html","id":"drive-specific-cubes","dir":"Articles","previous_headings":"Mathematical Framework > Inheritance Cube","what":"Drive-specific Cubes","title":"MGDrivE Mathematical Description","text":"inheritance cube array object specifies inheritance probabilities (offspring genotype probability) stratified male female parent genotypes. MGDrivE provides following cubes model different gene drive systems: 1 Locus Maternal-Toxin/Zygotic-Antidote System 2 Locus Maternal-Toxin/Zygotic-Antidote System Allele Sail Split Drive Parental-Specific Impacts DsX-based Cleave Rescue (ClvR) - Akbari Lab X-Linked Cleave Rescue (ClvR) 1 Locus Cleave Rescue (ClvR) 2 Locus Cleave Rescue (ClvR) 2 Locus Confinable Homing X-Linked Confinable Homing Homing Drive 1 Resistance Allele CRISPR (Clustered Regularly Interspaced Short Palindromic Repeats) 2 Resistance Alleles Maternal Deposition Small-Molecule Induced CRISPR X-Linked CRISPR Autosomal ECHACR X-Linked ECHACR Autosomal Immunizing Reversal System X-Linked Autosomal Immunizing Reversal System Killer-Rescue System MEDEA (Maternal Effect Dominant Embryonic Arrest) Reciprocal Translocations RIDL (Release Insects Dominant Lethality) Autosomal X-Shredder Y-Linked X-Shredder Mendelian Autosomal Split-Drive X-Linked Split-Drive Y-Linked Split-Drive trans-Complementing Gene Drive X-Linked trans-Complementing Gene Drive Wolbachia","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_math.html","id":"population-dynamics","dir":"Articles","previous_headings":"Mathematical Framework","what":"Population Dynamics","title":"MGDrivE Mathematical Description","text":"three aquatic stages, density-independent mortality process takes place stage (st): \\[ \\theta_{st}=(1-\\mu_{st})^{T_{st}} \\] Along density dependent process dependent number larvae environment: \\[ F(L[t])=\\Bigg(\\frac{\\alpha}{\\alpha+\\sum{\\overline{L[t]}}}\\Bigg)^{1/T_l} \\] \\(\\alpha\\) represents strength density-dependent process. parameter calculated : \\[ \\alpha=\\Bigg( \\frac{1/2 * \\beta * \\theta_e * Ad_{eq}}{R_m-1} \\Bigg) * \\Bigg( \\frac{1-(\\theta_l / R_m)}{1-(\\theta_l / R_m)^{1/T_l}} \\Bigg) \\] \\(\\beta\\) species’ fertility absence gene-drive, \\(Ad_{eq}\\) adult mosquito population equilibrium size, \\(R_{m}\\) population growth absence density-dependent mortality. population growth calculated average generation time (\\(g\\)), adult mortality rate (\\(\\mu_{ad}\\)), daily population growth rate (\\(r_{m}\\)): \\[ g=T_{e}+T_{l}+T_{p}+\\frac{1}{\\mu_{ad}}\\\\R_{m}=(r_{m})^{g} \\]","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_math.html","id":"larval-stages","dir":"Articles","previous_headings":"Mathematical Framework > Population Dynamics","what":"Larval Stages","title":"MGDrivE Mathematical Description","text":"computation larval stage population crucial model density dependent processes necessary equilibrium trajectories occur . calculation performed following equation: \\[ D(\\theta_l,T_x) = \\left\\{          \\begin{array}{ll}              \\theta_{l[0]}^{'}=\\theta_l                                 & \\quad = 0 \\\\              \\theta_{l[+1]}^{'} = \\theta_{l[]}^{'} *F(\\overline{L_{[t--T_x]}})   & \\quad \\leq T_l          \\end{array}          \\right. \\] addition , need larval mortality (\\(\\mu_{l}\\)): \\[     %L_{eq}=&\\alpha*\\lfloor R_{m} -1\\rfloor     %&     \\mu_{l}=1-\\Bigg( \\frac{R_{m} * \\mu_{ad}}{1/2 * \\beta * (1-\\mu_{m})} \\Bigg)^{\\frac{1}{T_{e}+T_{l}+T_{p}}} \\] mortality processes, now able calculate larval population: \\[     \\overline{L_{[t]}}=         \\overline{L_{[t-1]}} * (1-\\mu_{l}) * F(\\overline{L_{[t-1]})}\\\\         +\\overline{O(T_{e})}* \\theta_{e} \\\\         %+\\overline{\\beta}* \\theta_{e} * (\\overline{\\overline{Af_{(t-T_{e})}}} \\circ \\overline{\\overline{\\overline{Ih}}})\\\\         - \\overline{O(T_{e}+T_{l})} * \\theta_{e} * D(\\theta_{l},0)         %\\prod_{=1}^{T_{l}} F(\\overline{L_{[t-]}})         %\\theta_{l} \\] first term accounts larvae surviving one day ; second therm accounts eggs hatched within period time; last term computes number larvae transformed pupae.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_math.html","id":"adult-stages","dir":"Articles","previous_headings":"Mathematical Framework > Population Dynamics","what":"Adult Stages","title":"MGDrivE Mathematical Description","text":"ultimately interested calculating many adults genotype exist given point time. , first calculate number eggs laid survive adult stages equation: \\[     \\overline{E^{'}}= \\overline{O(T_{e}+T_{l}+T_{p})} \\\\     * \\bigg(\\overline{\\xi_{m}} * (\\theta_{e} * \\theta_{p}) * (1-\\mu_{ad}) * D(\\theta_{l},T_{p}) \\bigg) \\] information can calculate current number male adults population computing following equation: \\[     \\overline{Am_{[t]}}=         \\overline{Am_{[t-1]}} * (1-\\mu_{ad})*\\overline{\\omega_{m}}\\\\         + (1-\\overline{\\phi}) *  \\overline{E^{'}}\\\\         + \\overline{\\nu m_{[t-1]}} \\] first term represents number males surviving one day next; second term, fraction males survive adulthood (\\(\\overline{E'}\\)) emerge males (\\(1-\\phi\\)); last term used add males population part gene-drive release campaigns. Female adult populations calculated similar way: \\[   \\overline{\\overline{Af_{[t]}}}=     \\overline{\\overline{Af_{[t-1]}}} * (1-\\mu_{ad}) * \\overline{\\omega_{f}}\\\\     +  \\bigg( \\overline{\\phi} * \\overline{E^{'}}+\\overline{\\nu f_{[t-1]}}\\bigg)^{\\top} * \\bigg( \\frac{\\overline{\\overline{\\eta}}*\\overline{Am_{[t-1]}}}{\\sum{\\overline{Am_{[t-1]}}}} \\bigg)%\\overline{\\overline{Mf}} \\] first compute surviving female adults one day next; calculate mating composition female fraction emerging pupa stage. , obtain surviving fraction eggs survive adulthood (\\(\\overline{E'}\\)) emerge females (\\(\\phi\\)), add new females added result gene-drive releases (\\(\\overline{\\nu f_{[t-1]}}\\)). , calculate proportion males allocated female genotype, taking account respective mating fitnesses (\\(\\overline{\\overline{\\eta}}\\)) can introduce new adult females population pool.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_math.html","id":"gene-drive-releases-and-effects","dir":"Articles","previous_headings":"Mathematical Framework","what":"Gene Drive Releases and Effects","title":"MGDrivE Mathematical Description","text":"briefly mentioned , including option release male /female individuals populations. Another important thing emphasize allow flexible releases sizes schedules. model handles releases internally lists population compositions, possible releases performed irregular intervals different numbers mosquito genetic compositions long new genotypes introduced (previously defined inheritance cube). \\[   \\overline{\\nu} = \\bigg\\{     \\left(\\begin{array}{c} g_1 \\\\ g_2 \\\\ g_3 \\\\ \\vdots \\\\ g_n \\end{array}\\right)_{t=1} ,     \\left(\\begin{array}{c} g_1 \\\\ g_2 \\\\ g_3 \\\\ \\vdots \\\\ g_n \\end{array}\\right)_{t=2} ,     \\cdots ,     \\left(\\begin{array}{c} g_1 \\\\ g_2 \\\\ g_3 \\\\ \\vdots \\\\ g_n \\end{array}\\right)_{t=x}     \\bigg\\} \\] far, however, described way effects gene-drives included mosquito populations dynamics. done use various modifiers included equations: \\(\\overline{\\omega}\\): Relative increase mortality (zero full mortality effects one mortality effect) \\(\\overline{\\phi}\\): Relative shift sex pupating mosquitoes (zero biases sex ratio towards males, whilst 1 biases ratio towards females). \\(\\overline{\\overline{\\eta}}\\): Standardized mating fitness (zero complete fitness ineptitude, one regular mating skills). \\(\\overline{\\beta}\\): Fecundity (average number eggs laid per day). \\(\\overline{\\xi}\\): Pupation success (zero full mortality one full pupation success).","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_math.html","id":"migration","dir":"Articles","previous_headings":"Mathematical Framework","what":"Migration","title":"MGDrivE Mathematical Description","text":"simulate migration within framework considering patches (nodes) fully-mixed populations network structure. allows us handle mosquito movement across spatially-distributed populations transitions matrix, calculated tensor outer product genotypes population tensors transitions matrix network follows: \\[     \\overline{Am_{(t)}^{}}=         \\sum{\\overline{A_{m}^j} \\otimes \\overline{\\overline{\\tau m_{[t-1]}}}} \\\\         \\overline{\\overline{Af_{(t)}^{}}}=       \\sum{\\overline{\\overline{A_{f}^j}} \\otimes \\overline{\\overline{\\tau f_{[t-1]}}}} \\] equations new population patch \\(\\) calculated summing migrating mosquitoes \\(j\\) patches across network defined transitions matrix \\(\\tau\\), stores mosquito migration probabilities patch patch. worth noting migration probabilities matrices can different males females; ’s inherent need static (migration probabilities may vary time accommodate wind changes due seasonality).","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_math.html","id":"stochasticity","dir":"Articles","previous_headings":"","what":"Stochasticity","title":"MGDrivE Mathematical Description","text":"MGDrivE allows inheritance, migration, population dynamics processes simulated stochastically; accounts inherent probabilistic nature processes governing interactions life-cycles organisms. next section, describe stochastic processes can activated program. noted can turned independently one another required researcher.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_math.html","id":"mosquito-biology","dir":"Articles","previous_headings":"Stochasticity","what":"Mosquito Biology","title":"MGDrivE Mathematical Description","text":"Oviposition Stochastic egg laying female/male pairs separated two steps: calculating number eggs laid females distributing laid eggs according genotypes. number eggs laid follows Poisson distribution conditioned number female/male pairs fertility female. \\[ Poisson( \\lambda = numFemales*Fertility) \\] Multinomial sampling, conditioned number offspring relative viability genotype, determines genotypes offspring. \\[ Multinomial \\left(numOffspring, p_1, p_2\\dots p_b \\right)=\\frac{numOffspring!}{p_1!\\,p_2\\,\\dots p_n}p_1^{n_1}p_2^{n_2}\\dots p_n^{n_n} \\] Sex Determination Sex offspring determined multinomial sampling. conditioned number eggs live hatching probability female, allowing user design systems skew sex ratio offspring reproductive mechanisms. \\[ Multinomial(numHatchingEggs, p_{female}, p_{female}) \\] Mating Stochastic mating determined multinomial sampling conditioned number males fitness. assumed females mate life, therefore female sample available males done, males free potentially mate multiple females. males’ ability mate modulated fitness term, thereby allowing genotypes less fit others (seen often lab releases). \\[ Multinomial(numFemales, p_1f_1, p_2f_2, \\dots p_nf_n) \\] Stochastic Processes remaining stochastic processes (larval survival, hatching ,pupating, surviving adult hood) determined binomial sampling conditioned factors affecting current life stage. factors determined empirically mosquito population data. Migration Variance stochastic movement (used diffusion model migration).","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_math.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"MGDrivE Mathematical Description","text":"Deredec , Godfray HCJ, Burt (2011). “Requirements effective malaria control homing endonuclease genes.” Proceedings National Academy Sciences United States America, 108(43), E874–80. ISSN 1091-6490, doi: 10.1073/pnas.1110717108 , https://www.pnas.org/content/108/43/E874. Hancock PA, Godfray HCJ (2007). “Application lumped age-class technique studying dynamics malaria-mosquito-human interactions.” Malaria Journal, 6, 98. ISSN 1475-2875, doi: 10.1186/1475-2875-6-98 , https://malariajournal.biomedcentral.com/articles/10.1186/1475-2875-6-98. Marshall J, Buchman , C. HMS, Akbari OS (2017). “Overcoming evolved resistance population-suppressing homing-based gene drives.” Nature Scientific Reports, 1–46. ISSN 2045-2322, doi: https://doi.org/10.1101/088427 , https://www.nature.com/articles/s41598-017-02744-7","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_run.html","id":"mgdrive-one-run","dir":"Articles","previous_headings":"","what":"MGDrivE, One Run","title":"MGDrivE Run Example","text":"vignette many examples calculating movement matrices, different simulations, theory comparison. However, go step setting , running, analyzing simulation. vignette designed go every step simulation, exploring step performed, thoughts can modified, looking output ().","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_run.html","id":"mendelian-inheritance-stochastic-multiple-populations","dir":"Articles","previous_headings":"MGDrivE, One Run","what":"Mendelian Inheritance, Stochastic, Multiple Populations","title":"MGDrivE Run Example","text":"example, take Stochastic, Small Migration example vignette starting point. expand 5 populations, code bit longer file structure becomes obvious.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_run.html","id":"full-code","dir":"Articles","previous_headings":"MGDrivE, One Run > Mendelian Inheritance, Stochastic, Multiple Populations","what":"Full Code","title":"MGDrivE Run Example","text":"reference, full code example. explained piece--piece .","code":"#################### # Load libraries #################### library(MGDrivE)  #################### # Output Folder #################### outFolder <- \"mgdrive\" dir.create(path = outFolder)  #################### # Simulation Parameters #################### # days to run the simulation tMax <- 365  # number of Monte Carlo iterations nRep <- 5  # each Monte Carlo iteration gets its own folder folderNames <- file.path(outFolder,                         formatC(x = 1:nRep, width = 3, format = \"d\", flag = \"0\"))  # entomological parameters bioParameters <- list(betaK=20,tEgg=5,tLarva=6,tPupa=4,popGrowth=1.175,muAd=0.09)  # a 5-node network with 5% per day migration rate sitesNumber <- 5 adultPopEquilibrium <- 500  # auxiliary function triDiag <- function(upper, lower){      # return matrix   retMat <- matrix(data = 0, nrow = length(upper) + 1, ncol = length(upper) + 1)      # set index values for upper/lower triangles   indx <- 1:length(upper)      # set forward/backward migration using matrix access   retMat[cbind(indx+1,indx)] <- lower   retMat[cbind(indx,indx+1)] <- upper      # set stay probs   diag(x = retMat) <- 1-rowSums(x = retMat)      return(retMat) }  # fill movement matrix #  Remember, rows need to sum to 1. moveMat <- triDiag(upper = rep.int(x = 0.05, times = sitesNumber-1),                    lower = rep.int(x = 0.05, times = sitesNumber-1))  # batch migration is disabled by setting the probability to 0 batchMigration <- basicBatchMigration(batchProbs=0,                                      sexProbs=c(.5,.5),                                      numPatches=sitesNumber)  #################### # Basic Inheritance pattern #################### # Mendelian cube with standard (default) paraameters cube <- cubeMendelian()   #################### # Setup releases and batch migration #################### # set up the empty release vector #  MGDrivE pulls things out by name patchReleases <- replicate(n=sitesNumber,                            expr={list(maleReleases=NULL,femaleReleases=NULL,                                       eggReleases=NULL,matedFemaleReleases=NULL)},                            simplify=FALSE)  # choose release parameters #  Releases start at time 25, occur once a week, for 10 weeks. #  There are 100 mosquitoes released every time. releasesParameters <- list(releasesStart=25,                           releasesNumber=10,                           releasesInterval=7,                           releaseProportion=100)  # generate male release vector maleReleasesVector <- generateReleaseVector(driveCube=cube,                                             releasesParameters=releasesParameters)  # generate female release vector femaleReleasesVector <- generateReleaseVector(driveCube=cube,                                              releasesParameters=releasesParameters)  # put releases into the proper place in the release list #  This performs the releases in the first patch only patchReleases[[1]]$maleReleases <- maleReleasesVector patchReleases[[1]]$femaleReleases <- femaleReleasesVector   #################### # Combine parameters and run! #################### # setup parameters for the network. This builds a list of parameters required for #  every population in the network. netPar <- parameterizeMGDrivE(runID=1, simTime=tMax, nPatch=sitesNumber,                              beta=bioParameters$betaK, muAd=bioParameters$muAd,                              popGrowth=bioParameters$popGrowth, tEgg=bioParameters$tEgg,                              tLarva=bioParameters$tLarva, tPupa=bioParameters$tPupa,                              AdPopEQ=adultPopEquilibrium, inheritanceCube = cube)  # set MGDrivE to run stochastic setupMGDrivE(stochasticityON = TRUE, verbose = FALSE)  # build network prior to run MGDrivESim <- Network$new(params=netPar,                          driveCube=cube,                          patchReleases=patchReleases,                          migrationMale=moveMat,                          migrationFemale=moveMat,                          migrationBatch=batchMigration,                          directory=folderNames,                          verbose = FALSE) # run simulation MGDrivESim$multRun(verbose = FALSE)   #################### # Post Analysis #################### # First, split output by patch # Second, aggregate females by their mate choice for(i in 1:nRep){  splitOutput(readDir = folderNames[i], remFile = TRUE, verbose = FALSE)  aggregateFemales(readDir = folderNames[i], genotypes = cube$genotypesID,                   remFile = TRUE, verbose = FALSE) }  # plot output of first run to see effect plotMGDrivESingle(readDir=folderNames[1],totalPop = TRUE,lwd=3.5,alpha=1)  # plot all 5 repetitions together plotMGDrivEMult(readDir=outFolder,lwd=0.35,alpha=0.75)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_run.html","id":"load-libraries","dir":"Articles","previous_headings":"MGDrivE, One Run > Mendelian Inheritance, Stochastic, Multiple Populations","what":"Load Libraries","title":"MGDrivE Run Example","text":"Step one, load MGDrivE.","code":"#################### # Load libraries #################### library(MGDrivE) #> Loading MGDrivE: Mosquito Gene Drive Explorer"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_run.html","id":"setup-folder-directory","dir":"Articles","previous_headings":"MGDrivE, One Run > Mendelian Inheritance, Stochastic, Multiple Populations","what":"Setup Folder Directory","title":"MGDrivE Run Example","text":", setup folder simulation data. Since local folder, doesn’t exist, needs created. already folder prepared, make sure empty. MGDrivE gives warning things folder (prevent overwriting data), run fine folder empty.","code":"#################### # Output Folder #################### outFolder <- \"mgdrive\" dir.create(path = outFolder)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_run.html","id":"simulation-parameters","dir":"Articles","previous_headings":"MGDrivE, One Run > Mendelian Inheritance, Stochastic, Multiple Populations","what":"Simulation Parameters","title":"MGDrivE Run Example","text":"Next, several parameters need set simulation. run time number repetitions crucial. number repetitions chosen, folder names can created. , folder names reflect purpose - holding repetition stochastic simulation. precise names don’t matter later , need unique (data gets overwritten, MGDrivE throw warning ), location user account permission create directories. biological parameters chosen Aedes aegypti original simulations. parameters represent: betaK: Daily number eggs laid per female mosquito tEgg: Number days spent egg stage tLarva: Number days spent larval stage tPupa: Number days spent pupa stage popGrowth: Population growth per generation muAD: Daily death rate adult mosquitoes Next, set number populations simulation. , chose 5 populations, containing 500 mosquitoes. , setup landscape. landscape line, population connected populations either side. set 5% per day migration rate. several examples vignette setting different landscapes. Finally, possibility large-group movement facilitated humans (using Aedes example, boats water containers truck beds, etc.). MGDrivE handles basicBatchMigration(). simplicity, ignoring possibility (setting probability zero).","code":"#################### # Simulation Parameters #################### # days to run the simulation tMax <- 365  # number of Monte Carlo iterations nRep <- 5  # each Monte Carlo iteration gets its own folder folderNames <- file.path(outFolder,                         formatC(x = 1:nRep, width = 3, format = \"d\", flag = \"0\"))  folderNames #> [1] \"mgdrive/001\" \"mgdrive/002\" \"mgdrive/003\" \"mgdrive/004\" \"mgdrive/005\" # entomological parameters bioParameters <- list(betaK=20,tEgg=5,tLarva=6,tPupa=4,popGrowth=1.175,muAd=0.09) # a 5-node network with 5% per day migration rate sitesNumber <- 5 adultPopEquilibrium <- 500 patchPops <- rep(adultPopEquilibrium,sitesNumber)  # patchPops is optional. If all populations are the same size, parameterizeMGDrivE #  can take a single number. However, if you desire different population sizes, it  #  must be a vector of length equal to the number of sites  # landscape # auxiliary function triDiag <- function(upper, lower){      # return matrix   retMat <- matrix(data = 0, nrow = length(upper) + 1, ncol = length(upper) + 1)      # set index values for upper/lower triangles   indx <- 1:length(upper)      # set forward/backward migration using matrix access   retMat[cbind(indx+1,indx)] <- lower   retMat[cbind(indx,indx+1)] <- upper      # set stay probs   diag(x = retMat) <- 1-rowSums(x = retMat)      return(retMat) }  # fill movement matrix #  Remember, rows need to sum to 1. moveMat <- triDiag(upper = rep.int(x = 0.05, times = sitesNumber-1),                    lower = rep.int(x = 0.05, times = sitesNumber-1))  moveMat #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.95 0.05 0.00 0.00 0.00 #> [2,] 0.05 0.90 0.05 0.00 0.00 #> [3,] 0.00 0.05 0.90 0.05 0.00 #> [4,] 0.00 0.00 0.05 0.90 0.05 #> [5,] 0.00 0.00 0.00 0.05 0.95 # batch migration is disabled by setting the probability to 0 batchMigration <- basicBatchMigration(batchProbs=0, numPatches=sitesNumber)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_run.html","id":"inheritance-pattern","dir":"Articles","previous_headings":"MGDrivE, One Run > Mendelian Inheritance, Stochastic, Multiple Populations","what":"Inheritance Pattern","title":"MGDrivE Run Example","text":"experiment, use simple Mendelian inheritance. MGDrivE several inheritance patterns, include: cubeReciprocalTranslocations(): Reciprocal Translocations cubeHomingDrive(): CRISPR-based homing drive, two resistance alleles cubeMEDEA(): Maternal Effect Dominant Embryonic Arrest See MGDrivE Mathematical Description complete list use default parameters, several fitness costs can applied. Every cost applied genotype-specific manner. optional fitness costs : \\(\\eta\\): Male mating fitness female \\(\\phi\\): Sex-ratio emergence \\(\\omega\\): Multiplicative modifier adult mortality (males females) \\(\\xi_F\\): Female pupatory success (applies \\(\\phi\\)) \\(\\xi_M\\): Male pupatory success (applies \\(\\phi\\)) \\(s\\): Fractional increase/decrease fertility","code":"#################### # Basic Inheritance pattern #################### # Mendelian cube with standard (default) paraameters cube <- cubeMendelian()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_run.html","id":"releases","dir":"Articles","previous_headings":"MGDrivE, One Run > Mendelian Inheritance, Stochastic, Multiple Populations","what":"Releases","title":"MGDrivE Run Example","text":"MGDrivE uses list specifying releases males females parameterize release schedule. initial list NULL, releases performed anything added. , performing 10 releases 100 individuals. releases start day 25 occur every 7 days. now generate looks like male release. release vector generated 10 elements long, 10 releases, element contains number numeric genotype individuals release time release. now generate thing female releases, insert releases release list releases performed first patch.","code":"#################### # Setup releases and batch migration #################### # set up the empty release vector #  MGDrivE pulls things out by name patchReleases <- replicate(n=sitesNumber,                            expr={list(maleReleases=NULL,femaleReleases=NULL,                                       eggReleases=NULL,matedFemaleReleases=NULL)},                            simplify=FALSE)  # choose release parameters #  Releases start at time 25, occur once a week, for 10 weeks. #  There are 100 mosquitoes released every time. releasesParameters <- list(releasesStart=25,                           releasesNumber=10,                           releasesInterval=7,                           releaseProportion=100) # generate male release vector maleReleasesVector <- generateReleaseVector(driveCube=cube,                                             releasesParameters=releasesParameters) maleReleasesVector[[1]] #> $nRelease #>      [,1] [,2] #> [1,]    3  100 #>  #> $tRelease #> [1] 25 # generate female release vector femaleReleasesVector <- generateReleaseVector(driveCube=cube,                                              releasesParameters=releasesParameters)  # put releases into the proper place in the release list patchReleases[[1]]$maleReleases <- maleReleasesVector patchReleases[[1]]$femaleReleases <- femaleReleasesVector"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_run.html","id":"setup-and-run","dir":"Articles","previous_headings":"MGDrivE, One Run > Mendelian Inheritance, Stochastic, Multiple Populations","what":"Setup and Run","title":"MGDrivE Run Example","text":"final steps running simulation! parameters setup combined using parameterizeMGDrivE(). Additionally, function calculates equilibrium values aquatic populations, death rates, density dependence every population. See documentation possible options. MGDrivE can run either deterministic stochastic setting, set stochastic simulations. Finally, setup complete network run simulation. Network object represents metapopulation MGDrivE. can setup hold 1 patch, therefore single population, several patches, true metapopulation. Documentation can found running ?Network. different notation attribute R6 structure MGDrivE built (Shoutout R6). params argument takes network parameters created parameterizeMGDrivE(). inheritance pattern supplied driveCube option, chose Mendelian. Migration can different males females, even though use migration matrix, users can supply different ones desired. migrationBatch option must always filled , can set zero, done , isn’t desired deterministic simulations (doesn’t make sense). Finally, directory parameter takes vector folder names, creates use simulation. Finally, MGDrivE can run using MGDrivESim$oneRun() several times using MGDrivESim$multRun(). benefit using built-multiple repetition function memory released runs, just cleared, setup-time reduced. Additionally, functions can produce progress bar, suppressed vignettes.","code":"#################### # Combine parameters and run! #################### # setup parameters for the network. This builds a list of parameters required for #  every population in the network. netPar <- parameterizeMGDrivE(runID=1, simTime=tMax, nPatch=sitesNumber,                              beta=bioParameters$betaK, muAd=bioParameters$muAd,                              popGrowth=bioParameters$popGrowth, tEgg=bioParameters$tEgg,                              tLarva=bioParameters$tLarva, tPupa=bioParameters$tPupa,                              AdPopEQ=patchPops, inheritanceCube = cube) # set MGDrivE to run stochastic setupMGDrivE(stochasticityON = TRUE) #> initializing MGDrivE # build network prior to run MGDrivESim <- Network$new(params=netPar,                          driveCube=cube,                          patchReleases=patchReleases,                          migrationMale=moveMat,                          migrationFemale=moveMat,                          migrationBatch=batchMigration,                          directory=folderNames,                          verbose = TRUE) #> initializing patch:  1  of  5  #> initializing patch:  2  of  5  #> initializing patch:  3  of  5  #> initializing patch:  4  of  5  #> initializing patch:  5  of  5  # list folders to show that they have been created list.files(path = outFolder) #> [1] \"001\" \"002\" \"003\" \"004\" \"005\" # run simulation MGDrivESim$multRun(verbose = FALSE)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_run.html","id":"post-processing","dir":"Articles","previous_headings":"MGDrivE, One Run > Mendelian Inheritance, Stochastic, Multiple Populations","what":"Post Processing","title":"MGDrivE Run Example","text":"MGDrivE outputs 2 *.csv files every simulation. stored {F|M}_RunXXX.csv female male adults. population counts every genotype every day. raw output MGDrivE. files contain information simulation. header male files (M_RunXXX.csv) shown . always contains time, patch, every possible genotype simulation. Mendelian inheritance , three possible genotypes, AA, Aa, aa. Time Patch columns always , number genotypes changes depending inheritance pattern used. example, CRISPR-based homing inheritance 10, 12 columns male files. , see patch designated file. Notice patch printed every time point, time increases every patch printed . Time = 1 equilibrium, start simulations, patches begin diverge, staying around equilibrium longer exactly . female output files (F_RunXXX.csv) slightly complicated. Since MGDrivE keeps track females mates, output maintains well. Thus, header female files \\(2 + \\text{numGenotypes}^2\\) long. Mendelian inheritance, looks like: Time Patch columns male files, “genotypes” now combination female genotype mate’s genotype. length header 11, consistent 3 genotypes, times number mate genotypes, plus Time Patch columns. header “genotypes” printed female genotype first, male (mate) second. , aaAA column represents females aa mated males AA. Time/Patch pattern male files. several things can . can work raw output directly, gets difficult simulations get larger. Therefor, provided functions split raw output patches, generating new file every patch. splitOutput splits raw output patch, generating one *.csv every patch simulation. loop repetition folder, removing original files, replacing individual patch files. Inside repetition folder, now see files: look male file, examining header first rows. Patch column removed, now part file name, Time column increases every row. first repetition, first male file. Female files still little complicated. split patch, still retain mate information. Patch column gone, Time column counts expected, still mate information. event don’t want/need mate information, can remove using aggregateFemales() function. collects females genotype, summing possible mates. see female files updated denote aggregated mate genotypes. Internally, files now resemble male files. doesn’t show much change, compare female file split patch aggregated female file time release, can see genotypes combined. Looking closely, see “AAAA” column combined “AAaa” column first output sum value “AA” column second. goes “aaAA” “aaaa” columns first “aa” column second.","code":"# first and last repetitions list.files(path = outFolder)[1] #> [1] \"001\" list.files(path = list.files(path = outFolder, full.names = TRUE)[1], recursive = TRUE) #> [1] \"F_Run001.csv\" \"M_Run001.csv\" list.files(path = outFolder)[5] #> [1] \"005\" list.files(path = list.files(path = outFolder, full.names = TRUE)[5], recursive = TRUE) #> [1] \"F_Run005.csv\" \"M_Run005.csv\" # read in male and female files mMat <- as.matrix(read.csv(file = list.files(path = outFolder, full.names = TRUE,                                              recursive = TRUE)[2],                            header = TRUE, sep = \",\")) fMat <- as.matrix(read.csv(file = list.files(path = outFolder, full.names = TRUE,                                              recursive = TRUE)[1],                            header = TRUE, sep = \",\"))  # look at male file header colnames(mMat) #> [1] \"Time\"  \"Patch\" \"AA\"    \"Aa\"    \"aa\" head(x = mMat, n = 2*sitesNumber) #>       Time Patch  AA Aa aa #>  [1,]    0     1 250  0  0 #>  [2,]    0     2 250  0  0 #>  [3,]    0     3 250  0  0 #>  [4,]    0     4 250  0  0 #>  [5,]    0     5 250  0  0 #>  [6,]    2     1 241  0  0 #>  [7,]    2     2 241  0  0 #>  [8,]    2     3 254  0  0 #>  [9,]    2     4 243  0  0 #> [10,]    2     5 267  0  0 # look at female file header colnames(fMat) #>  [1] \"Time\"  \"Patch\" \"AAAA\"  \"AAAa\"  \"AAaa\"  \"AaAA\"  \"AaAa\"  \"Aaaa\"  \"aaAA\"  #> [10] \"aaAa\"  \"aaaa\" head(x = fMat, n = 2*sitesNumber) #>       Time Patch AAAA AAAa AAaa AaAA AaAa Aaaa aaAA aaAa aaaa #>  [1,]    0     1  250    0    0    0    0    0    0    0    0 #>  [2,]    0     2  250    0    0    0    0    0    0    0    0 #>  [3,]    0     3  250    0    0    0    0    0    0    0    0 #>  [4,]    0     4  250    0    0    0    0    0    0    0    0 #>  [5,]    0     5  250    0    0    0    0    0    0    0    0 #>  [6,]    2     1  245    0    0    0    0    0    0    0    0 #>  [7,]    2     2  263    0    0    0    0    0    0    0    0 #>  [8,]    2     3  245    0    0    0    0    0    0    0    0 #>  [9,]    2     4  255    0    0    0    0    0    0    0    0 #> [10,]    2     5  255    0    0    0    0    0    0    0    0 # First, split output by patch for(i in 1:nRep){  splitOutput(readDir = folderNames[i], remFile = TRUE, verbose = FALSE) } # first and last repetitions list.files(path = outFolder)[1] #> [1] \"001\" list.files(path = list.files(path = outFolder, full.names = TRUE)[1], recursive = TRUE) #>  [1] \"F_Run001_Patch001.csv\" \"F_Run001_Patch002.csv\" \"F_Run001_Patch003.csv\" #>  [4] \"F_Run001_Patch004.csv\" \"F_Run001_Patch005.csv\" \"M_Run001_Patch001.csv\" #>  [7] \"M_Run001_Patch002.csv\" \"M_Run001_Patch003.csv\" \"M_Run001_Patch004.csv\" #> [10] \"M_Run001_Patch005.csv\" list.files(path = outFolder)[5] #> [1] \"005\" list.files(path = list.files(path = outFolder, full.names = TRUE)[5], recursive = TRUE) #>  [1] \"F_Run005_Patch001.csv\" \"F_Run005_Patch002.csv\" \"F_Run005_Patch003.csv\" #>  [4] \"F_Run005_Patch004.csv\" \"F_Run005_Patch005.csv\" \"M_Run005_Patch001.csv\" #>  [7] \"M_Run005_Patch002.csv\" \"M_Run005_Patch003.csv\" \"M_Run005_Patch004.csv\" #> [10] \"M_Run005_Patch005.csv\"  # read in examples of new male/female files twoFiles <- list.files(path = outFolder, full.names = TRUE,                        recursive = TRUE)[c(1,6)]  # read in male and female files mMat <- as.matrix(read.csv(file = twoFiles[2], header = TRUE, sep = \",\")) fMat <- as.matrix(read.csv(file = twoFiles[1], header = TRUE, sep = \",\")) head(x = mMat, n = 5) #>      Time  AA Aa aa #> [1,]    0 250  0  0 #> [2,]    2 241  0  0 #> [3,]    3 241  0  0 #> [4,]    4 242  0  0 #> [5,]    5 246  0  0 head(x = fMat, n = 5) #>      Time AAAA AAAa AAaa AaAA AaAa Aaaa aaAA aaAa aaaa #> [1,]    0  250    0    0    0    0    0    0    0    0 #> [2,]    2  245    0    0    0    0    0    0    0    0 #> [3,]    3  247    0    0    0    0    0    0    0    0 #> [4,]    4  255    0    0    0    0    0    0    0    0 #> [5,]    5  259    0    0    0    0    0    0    0    0 # Second, aggregate females by their mate choice for(i in 1:nRep){  aggregateFemales(readDir = folderNames[i], genotypes = cube$genotypesID,                   remFile = TRUE, verbose = FALSE) } # changed female files in first repetition list.files(path = outFolder)[1] #> [1] \"001\" list.files(path = list.files(path = outFolder, full.names = TRUE)[1], recursive = TRUE) #>  [1] \"F_Aggregate_Run001_Patch001.csv\" \"F_Aggregate_Run001_Patch002.csv\" #>  [3] \"F_Aggregate_Run001_Patch003.csv\" \"F_Aggregate_Run001_Patch004.csv\" #>  [5] \"F_Aggregate_Run001_Patch005.csv\" \"M_Run001_Patch001.csv\"           #>  [7] \"M_Run001_Patch002.csv\"           \"M_Run001_Patch003.csv\"           #>  [9] \"M_Run001_Patch004.csv\"           \"M_Run001_Patch005.csv\"  # read in examples of new female file fMat2 <- as.matrix(read.csv(file = list.files(path = outFolder,                                               recursive = TRUE,                                               full.names = TRUE)[1],                             header = TRUE, sep = \",\")) head(x = fMat2, n = 5) #>      Time  AA Aa aa #> [1,]    0 250  0  0 #> [2,]    2 245  0  0 #> [3,]    3 247  0  0 #> [4,]    4 255  0  0 #> [5,]    5 259  0  0 # show non-aggregated female file split by patch #  This is for patch number 1 fMat[(releasesParameters$releasesStart-2):(releasesParameters$releasesStart+2), ] #>      Time AAAA AAAa AAaa AaAA AaAa Aaaa aaAA aaAa aaaa #> [1,]   23  234    0    0    0    0    0    0    0    0 #> [2,]   24  231    0    0    0    0    0    0    0    0 #> [3,]   25  231    0    6    0    0    0   67    0   30 #> [4,]   26  225    0   10    0    0    0   57    0   29 #> [5,]   27  218    0   16    0    0    0   50    0   25 cat(\"\\n\")  # show aggregated female file #  This is for patch number 1 fMat2[(releasesParameters$releasesStart-2):(releasesParameters$releasesStart+2), ] #>      Time  AA Aa aa #> [1,]   23 234  0  0 #> [2,]   24 231  0  0 #> [3,]   25 237  0 97 #> [4,]   26 235  0 86 #> [5,]   27 234  0 75"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/articles/mgdrive_run.html","id":"plotting","dir":"Articles","previous_headings":"MGDrivE, One Run > Mendelian Inheritance, Stochastic, Multiple Populations","what":"Plotting","title":"MGDrivE Run Example","text":"MGDrivE comes two built-plot functions, plotMGDrivESingle() plotMGDrivEMult().plotMGDrivESingle() takes name one repetition folder, plots patches males females.  left Y-axis population size, right Y-axis patch number, X-axis time. can see releases first patch, equal males females, follow migration plots patch 1 patch 5. total population remains around 250 individuals males females, gives expected equilibrium value 500. can also plot repetitions using plotMGDrivEMult().  plotMGDrivEMult() takes name main directory, finds repetitions inside . plots males females patch, plotMGDrivESingle(), overlays trace every repetition patch.","code":"# plot the first repetition plotMGDrivESingle(readDir=folderNames[1],totalPop = TRUE,lwd=3.5,alpha=1) # plot all 5 repetitions together plotMGDrivEMult(readDir=outFolder,lwd=0.35,alpha=0.75)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Héctor Manuel Sánchez Castellanos. Author, maintainer. Jared Bennett. Author. Sean Wu. Author. John M. Marshall. Author.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sanchez et al. (2019). MGDrivE: modular simulation framework spread gene drives spatially explicit mosquito populations Methods Ecol. Evol. URL https://doi.org/10.1111/2041-210X.13318.","code":"@Article{,   title = {MGDrivE: A modular simulation framework for the spread of gene drives through spatially explicit mosquito populations},   author = {H{\\'e}ctor Manuel {S{\\'a}nchez Castellanos} and Jared Bennett and Sean Wu and John M. Marshall},   year = {2019},   doi = {10.1111/2041-210X.13318},   publisher = {British Ecological Society},   abstract = {Malaria, dengue, Zika and other mosquito-borne diseases continue to pose a major global health burden through much of the world, despite the widespread distribution of insecticide-based tools and antimalarial drugs. The advent of CRISPR/Cas9-based gene editing and its demonstrated ability to streamline the development of gene drive systems has reignited interest in the application of this technology to the control of mosquitoes and the diseases they transmit. The versatility of this technology has enabled a wide range of gene drive architectures to be realized, creating a need for their population-level and spatial dynamics to be explored. We present MGDrivE (Mosquito Gene Drive Explorer): a simulation framework designed to investigate the population dynamics of a variety of gene drive architectures and their spread through spatially explicit mosquito populations. A key strength of the MGDrivE framework is its modularity: (a) a genetic inheritance module accommodates the dynamics of gene drive systems displaying user-defined inheritance patterns, (b) a population dynamic module accommodates the life history of a variety of mosquito disease vectors and insect agricultural pests, and (c) a landscape module generates the metapopulation model by which insect populations are connected via migration over space. Example MGDrivE simulations are presented to demonstrate the application of the framework to CRISPR/Cas9-based homing gene drive for: (a) driving a disease-refractory gene into a population (i.e. population replacement), and (b) disrupting a gene required for female fertility (i.e. population suppression), incorporating homing-resistant alleles in both cases. Further documentation and use examples are provided at the project's Github repository. MGDrivE is an open-source r package freely available on CRAN. We intend the package to provide a flexible tool capable of modelling novel inheritance-modifying constructs as they are proposed and become available. The field of gene drive is moving very quickly, and we welcome suggestions for future development.},   url = {https://doi.org/10.1111/2041-210X.13318},   eprint = {https://besjournals.onlinelibrary.wiley.com/doi/epdf/10.1111/2041-210X.13318},   journal = {Methods in Ecology and Evolution}, }"},{"path":[]},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/index.html","id":"brief-description","dir":"","previous_headings":"","what":"Brief Description","title":"Mosquito Gene Drive Explorer","text":"MGDrivE framework designed serve testbed gene-drive releases mosquito-borne diseases control can tested. developed accommodate various mosquito-specific gene drive systems within population dynamics model allows migration individuals nodes spatial landscape.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/index.html","id":"how-does-it-work","dir":"","previous_headings":"","what":"How does it work?","title":"Mosquito Gene Drive Explorer","text":"main idea behind model consider genetic inheritance three-dimensional cube element determines probability specific offspring genotype (z axis) given certain combination male-female parent genotypes (x y axis). allows us use tensors basis computation many advantages, : computational speed, model transparency extendability. second novel idea framework consider spatial layout network inter-connected breeding habitats. performing abstraction able transform landscapes distances matrices, transition probabilities matrices. allows framework able model arbitrary topologies can simulate mosquito populations mating migrating realistic geographical settings. details, please read vignettes accompanying package!","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/index.html","id":"demonstration","dir":"","previous_headings":"","what":"Demonstration","title":"Mosquito Gene Drive Explorer","text":"demo, release 100 mosquitoes homozygous CRISPR/Cas-9 homing drive system, one mutation makes mosquito resistant construct. node network represents mosquito population laid spatial scenario (though household, house block even city needed). simulate genetic construct propagate across nodes network mosquitoes slowly migrating populations probability based proximity.   watch videos please take look youtube playlist!","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE-Cube.html","id":null,"dir":"Reference","previous_headings":"","what":"MGDrivE: Inheritance Cube — MGDrivE-Cube","title":"MGDrivE: Inheritance Cube — MGDrivE-Cube","text":"model arbitrary number genotypes efficiently mathematical framework, use 3-dimensional array structure (cube) axis represents following information: x: female adult mate genotype y: male adult mate genotype z: proportion offspring inherits given genotype (layer)","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE-Cube.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MGDrivE: Inheritance Cube — MGDrivE-Cube","text":"cube structure gives us flexibility apply tensor operations elements within equations, can calculate stratified population dynamics rapidly; within readable, flexible computational framework. becomes apparent define equation use computation eggs laid given point time: $$\\overline{O(T_x)} = \\sum_{j=1}^{n} \\Bigg( \\bigg( (\\beta*\\overline{s} * \\overline{ \\overline{Af_{[t-T_x]}}}) * \\overline{\\overline{\\overline{Ih}}} \\bigg) * \\Lambda  \\Bigg)^{\\top}_{ij}$$ equation, matrix containing number mated adult females (\\(\\overline{\\overline{Af}}\\)) multiplied element-wise one layers containing eggs genotypes proportions expected cross (\\(\\overline{\\overline{\\overline{Ih}}}\\)). resulting matrix multiplied binary 'viability mask' (\\(\\Lambda\\)) filters female-parent offspring genetic combinations viable due biological impediments (cytoplasmic incompatibility). summation transposed resulting matrix returns us total fraction eggs resulting male female genotype crosses (\\(\\overline{O(T_x)}\\)). Note: inheritance operations consistent within framework summation element z-axis (, proportions one offspring's genotypes) must equal one.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE-Cube.html","id":"drive-specific-cubes","dir":"Reference","previous_headings":"","what":"Drive-specific Cubes","title":"MGDrivE: Inheritance Cube — MGDrivE-Cube","text":"inheritance cube array object specifies inheritance probabilities (offspring genotype probability) stratified male female parent genotypes. MGDrivE provides following cubes model different gene drive systems: cubeOneLocusTA: 1 Locus Maternal-Toxin/Zygotic-Antidote System cubeTwoLocusTA: 2 Locus Maternal-Toxin/Zygotic-Antidote System cubeAlleleSail: 3 Locus Allele Sail, similar Oberhofer et. al. cubeASmidler: Split drive design significant parent-specific impacts cubeCLEAVRMF: Cleave Rescue cubeCLEAVRX: Cleave Rescue, X-Linked cubeClvR: 1 Locus Cleave Rescue (ClvR) cubeClvR2: 2 Locus Cleave Rescue (ClvR) cubeConfinableHoming: Confinable Homing cubeConfinableHomingX: Confinable Homing, X-Linked cubeHoming1RA: Homing Drive 1 Resistance Allele cubeHomingDrive: CRISPR (Clustered Regularly Interspaced Short Palindromic Repeats) 2 Resistance Allele cubeHomingDriveSM: CRISPR Small-Molecule Induction cubeXHomingDeposition: CRISPR, X-Linked cubeECHACR: 2 Locus Eraser/Chaser Construct, Autosomal cubeECHACRX: 2 Locus Eraser/Chaser Construct, X-Linked cubeImmunizingReversalMF: Immunizing Reversal/Basic Reversal cubeImmunizingReversalX: Immunizing Reversal cubeConfinableHomingJOHN: Original Cube Design (recommend using ) cubeKillerRescue: Killer-Rescue System cubeMEDEA: MEDEA (Maternal Effect Dominant Embryonic Arrest) cubeReciprocalTranslocations: Reciprocal Translocation cubeRIDL: RIDL (Release Insects Dominant Lethality) cubeXShredderMF: X-Shredder, Autosomal cubeXShredderY: X-Shredder, Y-Linked cubeMendelian: Mendelian cubeSplitDrive: Split CRISPR Drive cubeSplitDriveX: Split CRISTPR Drive, X-Linked cubeSplitDriveY: Split CRISTPR Drive, Y-Linked cubeTGD: trans-complementing Gene Drive cubeTGDX: trans-complementing Gene Drive, X-Linked cubeWolbachia: Wolbachia","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE-Cube.html","id":"functions-for-cubes","dir":"Reference","previous_headings":"","what":"Functions for Cubes","title":"MGDrivE: Inheritance Cube — MGDrivE-Cube","text":"provide one auxiliary function operate cube objects. cube2csv: Export slices cube .csv format","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE-Model.html","id":null,"dir":"Reference","previous_headings":"","what":"MGDrivE: Model's Mathematical Description — MGDrivE-Model","title":"MGDrivE: Model's Mathematical Description — MGDrivE-Model","text":"original version model based work (Deredec et al. 2011; Hancock Godfray 2007)  adapted accommodate CRISPR homing dynamics previous publication team (Marshall et al. 2017) . described, extended framework able handle variable number genotypes, migration across spatial scenarios. adapting equations work tensor-oriented manner, genotype can different processes affecting particular strain (death rates, mating fitness, sex-ratio bias, et cetera).","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE-Model.html","id":"inheritance-cube-and-oviposition","dir":"Reference","previous_headings":"","what":"Inheritance Cube and Oviposition","title":"MGDrivE: Model's Mathematical Description — MGDrivE-Model","text":"allow extension framework arbitrary number genotypes, transformed traditional inheritance matrices inheritance cubes, axis represents following information: x: female adult mate genotype y: male adult mate genotype z: proportion offspring inherits given genotype (slice) 'cube' structure gives us flexibility apply tensor operations elements within equations, can calculate stratified population dynamics rapidly; within readable, flexible computational framework. becomes apparent define equation use computation eggs laid given point time: $$\\overline{O(T_x)} = \\sum_{j=1}^{n} \\Bigg( \\bigg( (\\beta*\\overline{s} * \\overline{ \\overline{Af_{[t-T_x]}}}) * \\overline{\\overline{\\overline{Ih}}} \\bigg) * \\Lambda  \\Bigg)^{\\top}_{ij}$$ equation, matrix containing number mated adult females (\\(\\overline{\\overline{Af}}\\)) multiplied element-wise one slices containing eggs genotypes proportions expected cross (\\(\\overline{\\overline{\\overline{Ih}}}\\)). resulting matrix multiplied binary 'viability mask' (\\(\\Lambda\\)) filters female-parent offspring genetic combinations viable due biological impediments (cytoplasmic incompatibility). summation transposed resulting matrix returns us total fraction eggs resulting male female genotype crosses (\\(\\overline{O(T_{x})}\\)). Note: inheritance operations consistent within framework, summation element 'z' axis (, proportions one offspring's genotypes) must equal one.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE-Model.html","id":"population-dynamics","dir":"Reference","previous_headings":"","what":"Population Dynamics","title":"MGDrivE: Model's Mathematical Description — MGDrivE-Model","text":"three aquatic stages, density-independent mortality process takes place: $$\\theta_{st}=(1-\\mu_{st})^{T_{st}}$$ Along density dependent process dependent number larvae environment: $$F(L[t])=\\Bigg(\\frac{\\alpha}{\\alpha+\\sum{\\overline{L[t]}}}\\Bigg)^{1/T_l}$$ \\(\\alpha\\) represents strength density-dependent process. parameter  calculated : $$\\alpha=\\Bigg( \\frac{1/2 * \\beta * \\theta_e * Ad_{eq}}{R_m-1} \\Bigg) * \\Bigg( \\frac{1-(\\theta_l / R_m)}{1-(\\theta_l / R_m)^{1/T_l}} \\Bigg)$$ \\(\\beta\\) species' fertility absence gene-drives, \\(Ad_{eq}\\) adult mosquito population equilibrium size, \\(R_{m}\\) population growth absence density-dependent mortality. population growth calculated average generation time (\\(g\\)), adult mortality rate (\\(\\mu_{ad}\\)), daily population growth rate (\\(r_{m}\\)): $$\tg=T_{e}+T_{l}+T_{p}+\\frac{1}{\\mu_{ad}}\\\\R_{m}=(r_{m})^{g}$$","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE-Model.html","id":"larval-stages","dir":"Reference","previous_headings":"","what":"Larval Stages","title":"MGDrivE: Model's Mathematical Description — MGDrivE-Model","text":"computation larval stage population crucial model density dependent processes necessary equilibrium trajectories calculated occur . calculation performed following equation: $$ D(\\theta_l,T_x) = \\left\\{         \\begin{array}{ll}             \\theta_{l[0]}^{'}=\\theta_l \t\t\t\t\t\t\t\t& \\quad = 0 \\\\             \\theta_{l[+1]}^{'} = \\theta_{l[]}^{'} *F(\\overline{L_{[t--T_x]}})\t& \\quad \\leq T_l         \\end{array}    \\right. $$ addition , need larval mortality (\\(\\mu_{l}\\)): $$ \t%L_{eq}=&\\alpha*\\lfloor R_{m} -1\\rfloor \t%& \t\\mu_{l}=1-\\Bigg( \\frac{R_{m} * \\mu_{ad}}{1/2 * \\beta * (1-\\mu_{m})} \\Bigg)^{\\frac{1}{T_{e}+T_{l}+T_{p}}} $$ mortality processes, now able calculate larval population: $$ \t\\overline{L_{[t]}}= \t\t\\overline{L_{[t-1]}} * (1-\\mu_{l}) * F(\\overline{L_{[t-1]})}\\\\ \t\t+\\overline{O(T_{e})}* \\theta_{e} \\\\ \t\t%+\\overline{\\beta}* \\theta_{e} * (\\overline{\\overline{Af_{(t-T_{e})}}} \\circ \\overline{\\overline{\\overline{Ih}}})\\\\ \t\t- \\overline{O(T_{e}+T_{l})} * \\theta_{e} * D(\\theta_{l},0) \t\t%\\prod_{=1}^{T_{l}} F(\\overline{L_{[t-]}}) \t\t%\\theta_{l} $$ first term accounts larvae surviving one day ; second term accounts eggs hatched within period time; last term computes number larvae transformed pupae.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE-Model.html","id":"adult-stages","dir":"Reference","previous_headings":"","what":"Adult Stages","title":"MGDrivE: Model's Mathematical Description — MGDrivE-Model","text":"ultimately interested calculating many adults genotype exist given point time. , first calculate number eggs laid survive adult stages equation: $$ \t\\overline{E^{'}}= \\overline{O(T_{e}+T_{l}+T_{p})} \\\\ \t* \\bigg(\\overline{\\xi_{m}} * (\\theta_{e} * \\theta_{p}) * (1-\\mu_{ad}) * D(\\theta_{l},T_{p}) \\bigg) $$ information can calculate current number male adults population computing following equation: $$ \t\\overline{Am_{[t]}}= \t\t\\overline{Am_{[t-1]}} * (1-\\mu_{ad})*\\overline{\\omega_{m}}\\\\ \t\t+ (1-\\overline{\\phi}) *  \\overline{E^{'}}\\\\  \t\t+ \\overline{\\nu m_{[t-1]}} $$ first term represents number males surviving one day next; second one, fraction males survive adulthood (\\(\\overline{E'}\\)) emerge males (\\(1-\\phi\\)); last one used add males population part gene-drive release campaigns. Female adult populations calculated similar way: $$  \\overline{\\overline{Af_{[t]}}}=    \\overline{\\overline{Af_{[t-1]}}} * (1-\\mu_{ad}) * \\overline{\\omega_{f}}\\\\    +  \\bigg( \\overline{\\phi} * \\overline{E^{'}}+\\overline{\\nu f_{[t-1]}}\\bigg)^{\\top} * \\bigg( \\frac{\\overline{\\overline{\\eta}}*\\overline{Am_{[t-1]}}}{\\sum{\\overline{Am_{[t-1]}}}} \\bigg)%\\overline{\\overline{Mf}} $$ first compute surviving female adults one day next; calculate mating composition female fraction emerging pupa stage. , obtain surviving fraction eggs survive adulthood (\\(\\overline{E'}\\)) emerge females (\\(\\phi\\)), add new females added result gene-drive releases (\\(\\overline{\\nu f_{[t-1]}}\\)). , calculate proportion males allocated female genotype, taking account respective mating fitnesses (\\(\\overline{\\overline{\\eta}}\\)) can introduce new adult females population pool.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE-Model.html","id":"gene-drive-releases-and-effects","dir":"Reference","previous_headings":"","what":"Gene Drive Releases and Effects","title":"MGDrivE: Model's Mathematical Description — MGDrivE-Model","text":"briefly mentioned , including option release male /female individuals populations. Another important t hing emphasize allow flexible releases sizes schedules. ] model handles releases internally lists populations compositions , possible releases performed irregular intervals different numbers mosquito genetic compositions long new genotypes introduced (previously defined inheritance cube). $$  \\overline{\\nu} = \\bigg\\{    \\left(\\begin{array}{c} g_1 \\\\ g_2 \\\\ g_3 \\\\ \\vdots \\\\ g_n \\end{array}\\right)_{t=1} ,    \\left(\\begin{array}{c} g_1 \\\\ g_2 \\\\ g_3 \\\\ \\vdots \\\\ g_n \\end{array}\\right)_{t=2} ,    \\cdots ,    \\left(\\begin{array}{c} g_1 \\\\ g_2 \\\\ g_3 \\\\ \\vdots \\\\ g_n \\end{array}\\right)_{t=x} \\bigg\\} $$ far, however, described way effects gene-drives included mosquito populations dynamics. done use various modifiers included equations: \\(\\overline{\\omega}\\): Relative increase mortality (zero full mortality effects one mortality effect) \\(\\overline{\\phi}\\): Relative shift sex pupating mosquitoes (zero biases sex ratio towards males, whilst 1 biases ratio towards females). \\(\\overline{\\overline{\\eta}}\\): Standardized mating fitness (zero complete fitness ineptitude, one regular mating skills). \\(\\overline{\\beta}\\): Fecundity (average number eggs laid). \\(\\overline{\\xi}\\): Pupation success (zero full mortality one full pupation success).","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE-Model.html","id":"migration","dir":"Reference","previous_headings":"","what":"Migration","title":"MGDrivE: Model's Mathematical Description — MGDrivE-Model","text":"simulate migration within framework considering patches (nodes) fully-mixed populations network structure. allows us handle mosquito movement across spatially-distributed populations transitions matrix, calculated tensor outer product genotypes populations tensors transitions matrix network follows: $$    \\overline{Am_{(t)}^{}}=    \t\\sum{\\overline{A_{m}^j} \\otimes \\overline{\\overline{\\tau m_{[t-1]}}}} \\\\      \t\\overline{\\overline{Af_{(t)}^{}}}=      \\sum{\\overline{\\overline{A_{f}^j}} \\otimes \\overline{\\overline{\\tau f_{[t-1]}}}} $$ equations new population patch \\(\\) calculated summing migrating mosquitoes \\(j\\) patches across network defined transitions matrix \\(\\tau\\), stores mosquito migration probabilities patch patch. worth noting migration probabilities matrices can different males females; inherent need static (migration probabilities may vary time accommodate wind changes due seasonality).","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE-Model.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"MGDrivE: Model's Mathematical Description — MGDrivE-Model","text":"table compiles parameters required run MGDrivE clustered six categories: Life Stages: deal structure mosquito population. Bionomics: set parameters related behavior specific mosquito species modeled. Gene Drive: Genotype-specific vectors parameters affect gene-drive modifies responses populations . Releases:  List vectors control release genetically-modified mosquitoes. Population:  General mosquito-population parameters control environmentally-determined variables. Network: Related migration nodes population units","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE-Model.html","id":"stochasticity","dir":"Reference","previous_headings":"","what":"Stochasticity","title":"MGDrivE: Model's Mathematical Description — MGDrivE-Model","text":"MGDrivE allows stochasticity included dynamics various processes; effort simulate processes affect various stages mosquitoes lives. next section, describe stochastic processes can activated program. noted can turned independently one another required researcher.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE-Model.html","id":"mosquito-biology","dir":"Reference","previous_headings":"","what":"Mosquito Biology","title":"MGDrivE: Model's Mathematical Description — MGDrivE-Model","text":"Oviposition Stochastic egg laying female/male pairs separated two steps: calculating number eggs laid females distributing laid eggs according genotypes. number eggs laid follows Poisson distribution conditioned number female/male pairs fertility female. $$Poisson( \\lambda = numFemales*Fertility)$$ Multinomial sampling, conditioned number offspring relative viability genotype, determines genotypes offspring. $$Multinomial \\left(numOffspring, p_1, p_2\\dots p_b \\right)=\\frac{numOffspring!}{p_1!\\,p_2\\,\\dots p_n}p_1^{n_1}p_2^{n_2}\\dots p_n^{n_n}$$ Sex Determination Sex offspring determined multinomial sampling. conditioned number eggs live hatching probability female, allowing user design systems skew sex ratio offspring reproductive mechanisms. $$Multinomial(numHatchingEggs, p_{female}, p_{female})$$ Mating Stochastic mating determined multinomial sampling conditioned number males fitness. assumed females mate life, therefore female sample available males done, males free potentially mate multiple females. males' ability mate modulated fitness term, thereby allowing genotypes less fit others (seen often lab releases). $$Multinomial(numFemales, p_1f_1, p_2f_2, \\dots p_nf_n)$$ Hatching Stochastic Processes remaining stochastic processes (larval survival, hatching , pupating, surviving adult hood) determined multinomial sampling conditioned factors affecting current life stage. factors determined empirically mosquito population data.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE-Model.html","id":"migration-1","dir":"Reference","previous_headings":"","what":"Migration","title":"MGDrivE: Model's Mathematical Description — MGDrivE-Model","text":"Variance stochastic movement (used diffusion model migration).","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE-Model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MGDrivE: Model's Mathematical Description — MGDrivE-Model","text":"Deredec , Godfray HCJ, Burt (2011). “Requirements effective malaria control homing endonuclease genes.” Proceedings National Academy Sciences United States America, 108(43), E874–80. ISSN 1091-6490, doi:10.1073/pnas.1110717108 , https://www.pnas.org/content/108/43/E874. Hancock PA, Godfray HCJ (2007). “Application lumped age-class technique studying dynamics malaria-mosquito-human interactions.” Malaria journal, 6, 98. ISSN 1475-2875, doi:10.1186/1475-2875-6-98 , https://malariajournal.biomedcentral.com/articles/10.1186/1475-2875-6-98. Marshall J, Buchman , C. HMS, Akbari OS (2017). “Overcoming evolved resistance population-suppressing homing-based gene drives.” Nature Scientific Reports, 1–46. ISSN 2045-2322, doi:10.1038/s41598-017-02744-7 , https://www.nature.com/articles/s41598-017-02744-7.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE.html","id":null,"dir":"Reference","previous_headings":"","what":"MGDrivE: Mosquito Gene Drive Explorer — MGDrivE","title":"MGDrivE: Mosquito Gene Drive Explorer — MGDrivE","text":"MGDrivE: Mosquito Gene Drive Explorer","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE.html","id":"introduction","dir":"Reference","previous_headings":"","what":"Introduction","title":"MGDrivE: Mosquito Gene Drive Explorer — MGDrivE","text":"Recent developments CRISPR-Cas9 based homing endonuclease gene drive systems, suppression replacement mosquito populations, generated much interest use control mosquito-borne diseases (dengue, malaria, Chikungunya Zika). genetic control pathogen transmission may complement even substitute traditional vector-control interventions, limited success bringing spread diseases halt. Despite excitement use gene drives mosquito control, current modeling efforts analyzed handful new approaches (usually studying just one per framework). Moreover, models usually consider well-mixed populations explicit spatial dynamics. end, developing MGDrivE (Mosquito Gene DRIVe Explorer), cooperation 'UCI Malaria Elimination Initiative', flexible modeling framework evaluate variety drive systems spatial networks mosquito populations. framework provides reliable testbed evaluate optimize efficacy gene drive mosquito releases. separates MGDrivE models incorporation mathematical computational mechanisms simulate wide array inheritance-based technologies within , coherent set equations. treating population dynamics, genetic inheritance operations, migration habitats separate processes coupled together use mathematical tensor operations. way can conveniently swap inheritance patterns whilst still making use set population dynamics equations. crucial advantage system, allows research groups test ideas without developing new models without need spend time adapting frameworks suit needs.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE.html","id":"brief-description","dir":"Reference","previous_headings":"","what":"Brief Description","title":"MGDrivE: Mosquito Gene Drive Explorer — MGDrivE","text":"MGDrivE based idea can decouple genotype inheritance process population dynamics equations. allows system treated developed three semi-independent modules come together form system. way done described later document reference diagram shown .","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE.html","id":"previous-work","dir":"Reference","previous_headings":"","what":"Previous Work","title":"MGDrivE: Mosquito Gene Drive Explorer — MGDrivE","text":"original version model based work (Deredec et al. 2011; Hancock Godfray 2007)  adapted accommodate CRISPR homing dynamics previous publication team (Marshall et al. 2017) . described, extended framework able handle variable number genotypes, migration across spatial scenarios. accomplish adapting equations work tensor-oriented manner, genotype can different processes affecting particular strain (death rates, mating fitness, sex-ratio bias, et cetera).","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE.html","id":"notation-and-conventions","dir":"Reference","previous_headings":"","what":"Notation and Conventions","title":"MGDrivE: Mosquito Gene Drive Explorer — MGDrivE","text":"beginning full description model define conventions followed notation written description system. Overlines used denote dimension tensor. Subscript brackets used indicate element time. example: \\(L_{[t-1]}\\) larval population time: \\(t-1\\). Parentheses used indicate parameter(s) function. example: \\(\\overline{O(T_{e}+T_{l})}\\) represents function \\(O\\) evaluated parameter: \\(T_{e}+T_{l}\\) Matrices follow 'row-first' indexing order (: row, j: column) case one dimensional tensors, slot represents genotype population. example, male population stored following way: $$\\overline{} = \\left(\\begin{array}{c} g_1 \\\\ g_2 \\\\ g_3 \\\\ \\vdots \\\\ g_n \\end{array}\\right) _{}$$ processes affect mosquitoes genotype-specific way defined stored way within framework. two tensors squared dimensionality model: adult females matrix, genotype-specific male-mating ability (\\(\\overline{\\eta}\\)) case former rows represent females' genotype, whilst columns represent genotype male mated : $$\\overline{\\overline{Af}} = \\left(\\begin{array}{ccccc} g_{11} & g_{12} & g_{13} & \\cdots & g_{1n}\\\\ g_{21} & g_{22} & g_{23} & \\cdots & g_{2n}\\\\ g_{31} & g_{32} & g_{33} & \\cdots & g_{3n}\\\\ \\vdots & \\vdots & \\vdots & \\ddots & \\vdots\\\\ g_{n1} & g_{n2} & g_{n3} & \\cdots & g_{nn} \\end{array}\\right) _{ij}$$ genotype-specific male mating ability, hand, stores females' genotype rows, male genotypes columns matrix.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/MGDrivE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MGDrivE: Mosquito Gene Drive Explorer — MGDrivE","text":"Deredec , Godfray HCJ, Burt (2011). “Requirements effective malaria control homing endonuclease genes.” Proceedings National Academy Sciences United States America, 108(43), E874–80. ISSN 1091-6490, doi:10.1073/pnas.1110717108 , https://www.pnas.org/content/108/43/E874. Hancock PA, Godfray HCJ (2007). “Application lumped age-class technique studying dynamics malaria-mosquito-human interactions.” Malaria journal, 6, 98. ISSN 1475-2875, doi:10.1186/1475-2875-6-98 , https://malariajournal.biomedcentral.com/articles/10.1186/1475-2875-6-98. Marshall J, Buchman , C. HMS, Akbari OS (2017). “Overcoming evolved resistance population-suppressing homing-based gene drives.” Nature Scientific Reports, 1–46. ISSN 2045-2322, doi:10.1038/s41598-017-02744-7 , https://www.nature.com/articles/s41598-017-02744-7.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Network Class Definition — Network","title":"Network Class Definition — Network","text":"Network class object stores information simulation defined landscape.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/Network.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Network Class Definition — Network","text":"R6Class generator object","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/Network.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Network Class Definition — Network","text":"params: see parameterizeMGDrivE driveCube: inheritance cube patchReleases: see basicRepeatedReleases examples set release schedules migrationMale: stochastic matrix whose dimensions conform number patches migrationFemale: stochastic matrix whose dimensions conform number patches migrationBatch: list batch migration parameters. SeebasicBatchMigration directory: character string output directory verbose: Chatty? Default TRUE","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/Network.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Network Class Definition — Network","text":"get_timeAq: see get_timeAq_Network get_beta: see get_beta_Network get_muAd: see get_muAd_Network get_muAq: see get_muAq_Network get_alpha: see get_alpha_Network get_drivecubeindex: see get_drivecubeindex_Network get_tau: see get_tau_Network get_genotypesID: see get_genotypesID_Network get_genotypesN: see get_genotypesN_Network get_eta: see get_eta_Network get_phi: see get_phi_Network get_omega: see get_omega_Network get_xiF: see get_xiF_Network get_xiM: see get_xiM_Network get_s: see get_s_Network get_nPatch: see get_nPatch_Network get_conADM: see get_conM_Network get_conADF: see get_conF_Network get_tNow: see get_tNow_Network get_patchReleases: see get_patchReleases_Network oneDay_Migration: see oneDay_Migration_Deterministic_Network see oneDay_Migration_Stochastic_Network reset: see reset_Network oneDay: see oneDay_Network oneRun: see oneRun_Network multRun: see multRun_Network","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/Network.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Network Class Definition — Network","text":"parameters: see parameterizeMGDrivE patches: list Patch objects nPatch: number patches simTime: maximum time simulation sampTime: often write output, tNow %% sampTime driveCube: inheritance cube tNow: current time simulation (time starts 2 time 1 initial equilibrium state) runID: identifier current simulation run, useful Monte Carlo simulation directory: character string store output conADM: connection write male population dynamics conADF: connection write female population dynamics migrationMale: stochastic matrix whose dimensions conform number patches migrationFemale: stochastic matrix whose dimensions conform number patches migrationBatch: list items batch migration stochastic sim. mMoveMat: holder object male migration fMoveArray: holder object female migration patchReleases: list release schedules patch","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/Network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network Class Definition — Network","text":"","code":"if (FALSE) { # \\dontrun{  # There are no simple examples for this, so looking at the vignettes would be  #  most useful.   # Complete manual with examples, but none explored in depth.  vignette(\"MGDrivE-Examples\", package = \"MGDrivE\")   # One example, explored in great detail. This is probably more helpful.  vignette(\"MGDrivE-Run\", package = \"MGDrivE\")   } # }"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Patch Class Definition — Patch","title":"Patch Class Definition — Patch","text":"Patch single well-mixed population smallest unit simulation MGDrivE.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/Patch.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Patch Class Definition — Patch","text":"R6Class generator object","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/Patch.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Patch Class Definition — Patch","text":"patchID: integer ID patch genotypesID: character vector genotypes timeAq: integer vector length 3 specifying length aquatic stage numPatches: integer, total number patches simulation adultEQ: integer, total adult population patch duration simulation larvalEQ: integer, total larval population patch duration simulation muAq: double vector, length 3, daily death rate aquatic stage alpha: double, density-dependent centering parameter, see parameterizeMGDrivE adultRatioF: named double vector, distribution adult female genotypes, see parameterizeMGDrivE adultRatioM: named double vector, distribution adult male genotypes, see parameterizeMGDrivE larvalRatio: named double vector, distribution aquatic genotypes, see parameterizeMGDrivE eggReleases: egg release schedule patch, see basicRepeatedReleases maleReleases: male release schedule patch, see basicRepeatedReleases femaleReleases: female release schedule patch, see basicRepeatedReleases matedFemaleReleases: mated females release schedule patch, see basicRepeatedReleases","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/Patch.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Patch Class Definition — Patch","text":"set_NetworkPointer: see set_NetworkPointer_Patch get_femalePopulation: see get_femalePop_Patch get_malePopulation: see get_malePop_Patch initialPopulation: see set_initialPopulation_Patch setPopulation: see set_population_deterministic_Patch set_population_stochastic_Patch reset: see reset_Patch oneDay_initOutput: see oneDay_initOutput_Patch oneDay_writeOutput: see oneDay_writeOutput_Patch oneDay_migrationIn: see oneDay_migrationIn_Patch oneDay_PopDynamics: see oneDay_PopDynamics_Patch oneDay_adultD: see oneDay_adultDeath_deterministic_Patch oneDay_adultDeath_stochastic_Patch oneDay_pupaDM: see oneDay_pupaDM_deterministic_Patch oneDay_pupaDM_stochastic_Patch oneDay_larvaDM: see oneDay_larvaDM_deterministic_Patch oneDay_larvaDM_stochastic_Patch oneDay_eggDM: see oneDay_eggDM_deterministic_Patch oneDay_eggDM_stochastic_Patch oneDay_pupation: see oneDay_pupation_deterministic_Patch oneDay_pupation_stochastic_Patch oneDay_releases: see oneDay_releases_Patch oneDay_releaseEggs: see oneDay_eggReleases_Patch oneDay_mating: see oneDay_mating_deterministic_Patch oneDay_mating_stochastic_Patch oneDay_layEggs: see oneDay_oviposit_deterministic_Patch oneDay_oviposit_stochastic_Patch","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/Patch.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Patch Class Definition — Patch","text":"patchID: integer ID patch popAquatic: matrix, nGenotype x sum(timeAquatic), holding eggs, larva, pupa popMale: vector, nGenotype x 1, holds adult males popFemale: matrix, nGenotype x nGenotype, holds mated adult females popHolder: vector, nGenotype x 1, temporary population storage popPupSex: vector, nGenotype x 1, used stochastic pupation another temporary population popUnmated: vector, nGenotype x 1, holds unmated females popAquatict0: matrix, nGenotype x sum(timeAquatic), holding eggs, larva, pupa reset, see reset_Patch popMalet0: vector, nGenotype x 1, holds adult males reset see reset_Patch popFemalet0: matrix, nGenotype x nGenotype, holds mated adult females reset see reset_Patch eggReleases: list egg releases patch. See oneDay_eggReleases_Patch maleReleases: list adult male releases patch. See oneDay_releases_Patch femaleReleases: list adult female releases patch. See oneDay_releases_Patch matedFemaleReleases: list mated adult female releases patch. See oneDay_releases_Patch NetworkPointer: reference enclosing Network","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/aggregateFemales.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Female Output by Genotype — aggregateFemales","title":"Aggregate Female Output by Genotype — aggregateFemales","text":"Aggregate male mate genotype convert female matrix output vector output.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/aggregateFemales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Female Output by Genotype — aggregateFemales","text":"","code":"aggregateFemales(   readDir,   writeDir = NULL,   genotypes,   remFile = TRUE,   verbose = TRUE )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/aggregateFemales.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Female Output by Genotype — aggregateFemales","text":"readDir Directory read input writeDir Directory write output . Default readDir genotypes Character vector possible genotypes; found driveCube$genotypesID remFile Boolean flag remove original (unaggregated) file verbose Chatty? Default TRUE","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/aggregateFemales.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Female Output by Genotype — aggregateFemales","text":"","code":"if (FALSE) { # \\dontrun{ # This example assumes user has already run MGDrivE and generated output. #  This also assumes that the user has already split output by patch. # See vignette for complete example.  # set read/write directory fPath <- \"path/to/data/containing/folder\"  # Need genotypes from the cube run in the simulation #  This is dependent on the simulation run #  Using Mendelian cube for this example cube <- cubeMendelian()  # no return value from function aggregateFemales(readDir= fPath, writeDir = NULL, genotypes = cube$genotypesID,                  remFile = TRUE) } # }"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/aggregateOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Output Over Landscape — aggregateOutput","title":"Aggregate Output Over Landscape — aggregateOutput","text":"function aggregates output run entire output, .e., patches. writes output one level folder pointed readDir, writeDir NULL. Output consists 2 csv files, one males one females, \"...M_LandscapeAgg_Run...csv\".","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/aggregateOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Output Over Landscape — aggregateOutput","text":"","code":"aggregateOutput(readDir, writeDir=NULL)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/aggregateOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Output Over Landscape — aggregateOutput","text":"readDir Directory output written writeDir Directory write output . Default one level readDir","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/aggregateOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Output Over Landscape — aggregateOutput","text":"","code":"if (FALSE) { # \\dontrun{ # This assumes user has run MGDrivE and output is in fPath. #  See vignette for examples on how to run MGDrivE  # read/write dirs fPath <- \"folder/containing/output\" oPath <- \"folder/to/write/stuff\"  # first, split output by patch and aggregate females by mate genotype # remember, cube is for example and changes with simulation #  landscape aggregation will work if females are not aggregated, but it's slower cube <- cubeMendelian()  splitOutput(readDir = fPath, writeDir = NULL, remFile = TRUE) aggregateFemales(readDir= fPath, writeDi = NULL, genotypes = cube$genotypesID,                  remFile = TRUE)  # aggregate mosquitoes over entire landscape #  no return value aggregateOutput(readDir = fPath, writeDir = NULL) } # }"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/basicBatchMigration.html","id":null,"dir":"Reference","previous_headings":"","what":"Make List of Batch Migration Parameters — basicBatchMigration","title":"Make List of Batch Migration Parameters — basicBatchMigration","text":"Sets list containing probability batch migration, fractional amount males/females migrate, weighted probabilities migrate. default weights migration equal patches. can changed running function. used oneDay_Migration_Stochastic_Network.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/basicBatchMigration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make List of Batch Migration Parameters — basicBatchMigration","text":"","code":"basicBatchMigration(   batchProbs = 1e-05,   sexProbs = c(0.01, 0.01),   numPatches = 1 )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/basicBatchMigration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make List of Batch Migration Parameters — basicBatchMigration","text":"batchProbs Probability batch migration, either 1 number vector length equal number patches sexProbs Population fraction males females migrate. Either vector c(M,F) matrix 2 columns numPatches Number patches simulation","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/basicBatchMigration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make List of Batch Migration Parameters — basicBatchMigration","text":"","code":"# to setup for 3 patches batchMigration = basicBatchMigration(batchProbs = 1e-5, sexProbs = c(0.1, 0.01), numPatches = 3)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/basicRepeatedReleases.html","id":null,"dir":"Reference","previous_headings":"","what":"Make List of Modified Mosquito Releases — basicRepeatedReleases","title":"Make List of Modified Mosquito Releases — basicRepeatedReleases","text":"Sets release schedule single patch, returns list used oneDay_releases_Patch oneDay_eggReleases_Patch. function longer intended used alone, please use standard interface, generateReleaseVector.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/basicRepeatedReleases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make List of Modified Mosquito Releases — basicRepeatedReleases","text":"","code":"basicRepeatedReleases(releaseStart, releaseEnd, releaseInterval, releaseMatrix)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/basicRepeatedReleases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make List of Modified Mosquito Releases — basicRepeatedReleases","text":"releaseStart Day releases start releaseEnd Day releases end releaseInterval Interval releases releaseMatrix Numeric matrix specifying genotype release amount","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/basicRepeatedReleases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make List of Modified Mosquito Releases — basicRepeatedReleases","text":"","code":"if (FALSE) { # \\dontrun{ # Setup for 3 patches but only release in the first with a defined release #  schedule, for the cube cubeHomingDrive:  patchReleases = replicate(n = 3, expr = {   list(maleReleases = NULL, femaleReleases = NULL, eggReleases = NULL, matedFemaleReleases = NULL) },simplify = FALSE)  patchReleases[[1]]$femaleReleases = MGDrivE::basicRepeatedReleases(releaseStart = 5,                                                           releaseEnd = 30,                                                           releaseInterval = 5,                                                           releaseMatrix = matrix(c(5,100),1,2))  patchReleases[[1]]$maleReleases = MGDrivE::basicRepeatedReleases(releaseStart = 50,                                                         releaseEnd = 60,                                                         releaseInterval = 1,                                                         releaseMatrix = matrix(c(5,100),1,2)) } # }"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcAquaticStageSurvivalProbability.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Aquatic Stage Survival Probability — calcAquaticStageSurvivalProbability","title":"Calculate Aquatic Stage Survival Probability — calcAquaticStageSurvivalProbability","text":"Calculate \\(\\theta_{st}\\), density-independent survival probability, given : $$\\theta_{st}=(1-\\mu_{st})^{T_{st}}$$","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcAquaticStageSurvivalProbability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Aquatic Stage Survival Probability — calcAquaticStageSurvivalProbability","text":"","code":"calcAquaticStageSurvivalProbability(mortalityRate, stageDuration)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcAquaticStageSurvivalProbability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Aquatic Stage Survival Probability — calcAquaticStageSurvivalProbability","text":"mortalityRate Daily mortality probability, \\(\\mu_{st}\\) stageDuration Duration aquatic stage, \\(T^{st}\\)","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcAverageGenerationTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Average Generation Time — calcAverageGenerationTime","title":"Calculate Average Generation Time — calcAverageGenerationTime","text":"Calculate \\(g\\), average generation time, given : $$g=T_e+T_l+T_p+\\frac{1}{\\mu_{ad}}$$","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcAverageGenerationTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Average Generation Time — calcAverageGenerationTime","text":"","code":"calcAverageGenerationTime(stagesDuration, adultMortality)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcAverageGenerationTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Average Generation Time — calcAverageGenerationTime","text":"stagesDuration Vector lengths aquatic stages, \\(T_{e}, T_{l}, T_{p}\\) adultMortality Adult mortality rate, \\(\\mu_{ad}\\)","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcCos.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Geodesic Distance - Cosine Method — calcCos","title":"Calculate Geodesic Distance - Cosine Method — calcCos","text":"function calculates geodesic distance using cosine method.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcCos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Geodesic Distance - Cosine Method — calcCos","text":"","code":"calcCos(latLongs, r = 6378137)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcCos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Geodesic Distance - Cosine Method — calcCos","text":"latLongs Two column matrix latitudes/longitudes r Earth radius. Default WGS-84 radius","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcCos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Geodesic Distance - Cosine Method — calcCos","text":"","code":"# two-column matrix with latitude/longitude, in degrees latLong = cbind(runif(n = 5, min = 0, max = 90),                 runif(n = 5, min = 0, max = 180))  # cosine distance formula distMat = calcCos(latLongs = latLong)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcDensityDependentDeathRate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Density-dependent Larval Mortality — calcDensityDependentDeathRate","title":"Calculate Density-dependent Larval Mortality — calcDensityDependentDeathRate","text":"Calculate \\(\\alpha\\), strength density-dependent mortality larval stage, given : $$\\alpha=\\Bigg( \\frac{1/2 * \\beta * \\theta_e * Ad_{eq}}{R_m-1} \\Bigg) * \\Bigg( \\frac{1-(\\theta_l / R_m)}{1-(\\theta_l / R_m)^{1/T_l}} \\Bigg)$$","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcDensityDependentDeathRate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Density-dependent Larval Mortality — calcDensityDependentDeathRate","text":"","code":"calcDensityDependentDeathRate(   fertility,   thetaAq,   tAq,   adultPopSizeEquilibrium,   populationGrowthRate )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcDensityDependentDeathRate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Density-dependent Larval Mortality — calcDensityDependentDeathRate","text":"fertility Number eggs per oviposition wild-type females, \\(\\beta\\) thetaAq Vector density-independent survival probabilities aquatic stages, \\(\\theta_{e}, \\theta_{l}\\) tAq Vector lengths aquatic stages, \\(T_{e}, T_{l}, T_{p}\\) adultPopSizeEquilibrium Adult population size equilibrium, \\(Ad_{eq}\\) populationGrowthRate Population growth absence density-dependent mortality \\(R_{m}\\)","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcExpKernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Exponential Stochastic Matrix — calcExpKernel","title":"Calculate Exponential Stochastic Matrix — calcExpKernel","text":"Given distance matrix calcVinEll, calculate stochastic matrix one step movement probabilities follow exponential density.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcExpKernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Exponential Stochastic Matrix — calcExpKernel","text":"","code":"calcExpKernel(distMat, rate)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcExpKernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Exponential Stochastic Matrix — calcExpKernel","text":"distMat Distance matrix calcVinEll rate Rate parameter Exponential distribution","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcExpKernel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Exponential Stochastic Matrix — calcExpKernel","text":"distribution density functions exponential kernel given : $$ F(x)=1-e^{-\\lambda x} $$ $$ f(x)=\\lambda e^{-\\lambda x} $$ \\(\\lambda\\) rate parameter exponential distribution.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcExpKernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Exponential Stochastic Matrix — calcExpKernel","text":"","code":"# setup distance matrix # two-column matrix with latitude/longitude, in degrees latLong = cbind(runif(n = 5, min = 0, max = 90),                 runif(n = 5, min = 0, max = 180))  # Vincenty Ellipsoid  distance formula distMat = calcVinEll(latLongs = latLong)  # calculate exponential distribution over distances #  rate is just for example kernMat = calcExpKernel(distMat = distMat, rate = 10)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcGammaKernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Gamma Stochastic Matrix — calcGammaKernel","title":"Calculate Gamma Stochastic Matrix — calcGammaKernel","text":"Given distance matrix calcVinEll, calculate stochastic matrix one step movement probabilities follow gamma density.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcGammaKernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Gamma Stochastic Matrix — calcGammaKernel","text":"","code":"calcGammaKernel(distMat, shape, rate)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcGammaKernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Gamma Stochastic Matrix — calcGammaKernel","text":"distMat Distance matrix calcVinEll shape Shape parameter GammaDist distribution rate Rate parameter GammaDist distribution","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcGammaKernel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Gamma Stochastic Matrix — calcGammaKernel","text":"distribution density functions gamma kernel given : $$ F(x)=\\frac{1}{\\Gamma(\\alpha)}\\gamma(\\alpha,\\beta x) $$ $$ f(x)=\\frac{\\beta^{\\alpha}}{\\Gamma(\\alpha)}x^{\\alpha-1}e^{-\\beta x} $$ \\(\\Gamma(\\alpha)\\) Gamma function, \\(\\gamma(\\alpha,\\beta x)\\) lower incomplete gamma function, \\(\\alpha,\\beta\\) shape rate parameters, respectively.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcGammaKernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Gamma Stochastic Matrix — calcGammaKernel","text":"","code":"# setup distance matrix # two-column matrix with latitude/longitude, in degrees latLong = cbind(runif(n = 5, min = 0, max = 90),                 runif(n = 5, min = 0, max = 180))  # Vincenty Ellipsoid  distance formula distMat = calcVinEll(latLongs = latLong)  # calculate gamma distribution over distances #  shape and rate are just for example kernMat = calcGammaKernel(distMat = distMat, shape = 1, rate = 1)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcHaversine.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Geodesic Distance - Haversine Method — calcHaversine","title":"Calculate Geodesic Distance - Haversine Method — calcHaversine","text":"function calculates geodesic distance using Haversine method.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcHaversine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Geodesic Distance - Haversine Method — calcHaversine","text":"","code":"calcHaversine(latLongs, r = 6378137)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcHaversine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Geodesic Distance - Haversine Method — calcHaversine","text":"latLongs Two column matrix latitudes/longitudes r Earth radius. Default WGS-84 radius","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcHaversine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Geodesic Distance - Haversine Method — calcHaversine","text":"","code":"# two-column matrix with latitude/longitude, in degrees latLong = cbind(runif(n = 5, min = 0, max = 90),                 runif(n = 5, min = 0, max = 180))  # Haversine distance formula distMat = calcHaversine(latLongs = latLong)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcHurdleExpKernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Zero-inflated Exponential Stochastic Matrix — calcHurdleExpKernel","title":"Calculate Zero-inflated Exponential Stochastic Matrix — calcHurdleExpKernel","text":"Given distance matrix calcVinEll, calculate stochastic matrix one step movement probabilities follow zero-inflated exponential density point mass zero. point mass zero represents first stage two-stage process, mosquitoes decide stay current node leave anywhere. parameter can calculated lifetime probabilities stay current node helper function calcZeroInflation.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcHurdleExpKernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Zero-inflated Exponential Stochastic Matrix — calcHurdleExpKernel","text":"","code":"calcHurdleExpKernel(distMat, rate, p0, eps = 1e-20)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcHurdleExpKernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Zero-inflated Exponential Stochastic Matrix — calcHurdleExpKernel","text":"distMat Distance matrix calcVinEll rate Rate parameter Exponential distribution p0 Point mass zero eps Cutoff extremely small probabilities, default 1e-20","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcHurdleExpKernel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Zero-inflated Exponential Stochastic Matrix — calcHurdleExpKernel","text":"mosquito leaves current node, probability \\(1-p_{0}\\), chooses destination node according standard exponential density rate parameter \\(rate\\). distribution density functions zero inflated exponential kernel given : $$ F(x)=p_{0}\\theta(x) + (1-p_{0})(1-e^{-\\lambda x}) $$ $$ f(x)=p_{0}\\delta(x)+(1-p_{0})\\lambda e^{-\\lambda x} $$ \\(\\lambda\\) rate parameter exponential distribution, \\(\\theta(x)\\) Heaviside step function \\(\\delta(x)\\) Dirac delta function.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcHurdleExpKernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Zero-inflated Exponential Stochastic Matrix — calcHurdleExpKernel","text":"","code":"# setup distance matrix # two-column matrix with latitude/longitude, in degrees latLong = cbind(runif(n = 5, min = 0, max = 90),                 runif(n = 5, min = 0, max = 180))  # Vincenty Ellipsoid  distance formula distMat = calcVinEll(latLongs = latLong)  # calculate hurdle exponential distribution over distances #  rate and point mass are just for example kernMat = calcHurdleExpKernel(distMat = distMat, rate = 1/1e6, p0 = 0.1)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcLarvalDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Distribution of Larval Population — calcLarvalDist","title":"Calculate Distribution of Larval Population — calcLarvalDist","text":"hidden function calculates distribution larvae time treating larval-stage discrete-time Markov chain, solving stationary distribution. aquatic population known initializing MGDrivE equilibrium larval population, acts anchor calculate egg pupae distributions (see set_initialPopulation_Patch).","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcLarvalDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Distribution of Larval Population — calcLarvalDist","text":"","code":"calcLarvalDist(mu, t)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcLarvalDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Distribution of Larval Population — calcLarvalDist","text":"mu Double, death rate t Integer, stage time","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcLarvalPopEquilibrium.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Equilibrium Larval Population — calcLarvalPopEquilibrium","title":"Calculate Equilibrium Larval Population — calcLarvalPopEquilibrium","text":"Equilibrium larval population size sustain adult population.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcLarvalPopEquilibrium.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Equilibrium Larval Population — calcLarvalPopEquilibrium","text":"","code":"calcLarvalPopEquilibrium(alpha, Rm)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcLarvalPopEquilibrium.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Equilibrium Larval Population — calcLarvalPopEquilibrium","text":"alpha See calcDensityDependentDeathRate Rm See calcPopulationGrowthRate","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcLarvalStageMortalityRate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Larval Stage Mortality Rate — calcLarvalStageMortalityRate","title":"Calculate Larval Stage Mortality Rate — calcLarvalStageMortalityRate","text":"Calculate \\(\\mu_{l}\\), larval mortality, given $$\\mu_l=1-\\Bigg( \\frac{R_m * \\mu_{ad}}{1/2 * \\beta * (1-\\mu_m)} \\Bigg)^{\\frac{1}{T_e+T_l+T_p}}$$","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcLarvalStageMortalityRate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Larval Stage Mortality Rate — calcLarvalStageMortalityRate","text":"","code":"calcLarvalStageMortalityRate(   generationPopGrowthRate,   adultMortality,   fertility,   aquaticStagesDuration )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcLarvalStageMortalityRate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Larval Stage Mortality Rate — calcLarvalStageMortalityRate","text":"generationPopGrowthRate See calcPopulationGrowthRate adultMortality Adult mortality rate, \\(\\mu_{ad}\\) fertility Number eggs per oviposition wild-type females, \\(\\beta\\) aquaticStagesDuration Vector lengths aquatic stages, \\(T_{e}, T_{l}, T_{p}\\)","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcLognormalKernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Lognormal Stochastic Matrix — calcLognormalKernel","title":"Calculate Lognormal Stochastic Matrix — calcLognormalKernel","text":"Given distance matrix calcVinEll, calculate stochastic matrix one step movement probabilities follow lognormal density.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcLognormalKernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Lognormal Stochastic Matrix — calcLognormalKernel","text":"","code":"calcLognormalKernel(distMat, meanlog, sdlog)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcLognormalKernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Lognormal Stochastic Matrix — calcLognormalKernel","text":"distMat Distance matrix calcVinEll meanlog Log mean Lognormal distribution sdlog Log standard deviation Lognormal distribution","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcLognormalKernel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Lognormal Stochastic Matrix — calcLognormalKernel","text":"distribution density functions lognormal kernel given : $$ F(x)=\\frac{1}{2} + \\frac{1}{2} \\mathrm{erf}[\\frac{\\mathrm{ln}x-\\mu}{\\sqrt{2}\\sigma}] $$ $$ f(x)=\\frac{1}{x\\sigma\\sqrt{2\\pi}}\\mathrm{exp}\\left( -\\frac{(\\mathrm{ln}x-\\mu)^{2}}{2\\sigma^{2}} \\right) $$ \\(\\mu\\) mean log scale, \\(\\sigma\\) standard deviation log scale.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcLognormalKernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Lognormal Stochastic Matrix — calcLognormalKernel","text":"","code":"# setup distance matrix # two-column matrix with latitude/longitude, in degrees latLong = cbind(runif(n = 5, min = 0, max = 90),                 runif(n = 5, min = 0, max = 180))  # Vincenty Ellipsoid  distance formula distMat = calcVinEll(latLongs = latLong)  # calculate lognormal distribution over distances #  mean and standard deviation are just for example kernMat = calcLognormalKernel(distMat = distMat, meanlog = 100, sdlog = 10)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcOmega.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve for Omega (additional genotype-specific mortality) — calcOmega","title":"Solve for Omega (additional genotype-specific mortality) — calcOmega","text":"Solves root equation geometrically-distributed lifespan value omega.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcOmega.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve for Omega (additional genotype-specific mortality) — calcOmega","text":"","code":"calcOmega(mu, lifespanReduction)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcOmega.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve for Omega (additional genotype-specific mortality) — calcOmega","text":"mu Daily mortality probability (discrete-time hazard, called muAd code) lifespanReduction Target reduced lifespan, 0 1 (target average lifespan \\(\\frac{1}{\\mu_{Ad}} \\times lifespanReduction\\))","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcOmega.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Solve for Omega (additional genotype-specific mortality) — calcOmega","text":"","code":"# reduce lifespan by 10% #  Example mu is an average for Aedes newOmega <- calcOmega(mu = 0.11, lifespanReduction = 0.90)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcPopulationGrowthRate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Generational Population Growth Rate — calcPopulationGrowthRate","title":"Calculate Generational Population Growth Rate — calcPopulationGrowthRate","text":"Calculate \\(R_{m}\\), population growth absence density-dependent mortality, given : $$(r_{m})^{g}$$","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcPopulationGrowthRate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Generational Population Growth Rate — calcPopulationGrowthRate","text":"","code":"calcPopulationGrowthRate(dailyPopGrowthRate, averageGenerationTime)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcPopulationGrowthRate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Generational Population Growth Rate — calcPopulationGrowthRate","text":"dailyPopGrowthRate Daily population growth rate, \\(r_{m}\\) averageGenerationTime See calcAverageGenerationTime","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcQuantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Statistics for Stochastic MGDrivE — calcQuantiles","title":"Summary Statistics for Stochastic MGDrivE — calcQuantiles","text":"function reads repetitions patch calculates either mean, quantiles, . User chooses quantiles, 4 decimal places, enters vector. Quantiles calculated empirically. (order matter)","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcQuantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Statistics for Stochastic MGDrivE — calcQuantiles","text":"","code":"calcQuantiles(readDir, writeDir, mean = TRUE, quantiles = NULL, verbose = TRUE)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcQuantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Statistics for Stochastic MGDrivE — calcQuantiles","text":"readDir Directory find repetition folders writeDir Directory write output mean Boolean, calculate mean . Default TRUE quantiles Vector quantiles calculate. Default NULL verbose Chatty? Default TRUE","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcQuantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Statistics for Stochastic MGDrivE — calcQuantiles","text":"Writes output files writeDir","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcQuantiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary Statistics for Stochastic MGDrivE — calcQuantiles","text":"Given readDir, function assumes follow file structure: readDir repetition 1 patch 1 patch 2 patch 3 repetition 2 patch 1 patch 2 patch 3 repetition 3 repetition 4 ... Output files *.csv contain mean quantile file name, .e. {M/F}Mean(patchNum).csv {M/F}Quantile(quantNum)_(patchNum).csv.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcQuantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Statistics for Stochastic MGDrivE — calcQuantiles","text":"","code":"if (FALSE) { # \\dontrun{ # This function assumes network$multRun() has been performed, or several #  network$oneRun() have been performed and all of the data has been split #  and aggregated.  # read/write paths fPath <- \"path/to/folder/ofFolders/with/data\" oPath <- \"my/path/output\"  # here, only calculate mean, no quantiles #  no return value calcQuantiles(readDir = fPath, writeDir = oPath, mean = TRUE,               quantiles = NULL)  # here, calculate 2.5% and 97.5% quantiles calcQuantiles(readDir = fPath, writeDir = oPath, mean = FALSE,               quantiles = c(0.025, 0.975)) } # }"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcVinEll.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Geodesic Distance - Vincenty Ellipsoid Method — calcVinEll","title":"Calculate Geodesic Distance - Vincenty Ellipsoid Method — calcVinEll","text":"function calculates geodesic distance using original Vincenty Ellipsoid method.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcVinEll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Geodesic Distance - Vincenty Ellipsoid Method — calcVinEll","text":"","code":"calcVinEll(   latLongs,   a = 6378137,   b = 6356752.3142,   f = 1/298.257223563,   eps = 1e-12,   iter = 100 )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcVinEll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Geodesic Distance - Vincenty Ellipsoid Method — calcVinEll","text":"latLongs Two column matrix latitudes/longitudes Equatorial radius earth, default WGS-84 radius b Polar radius earth, default WGS-84 radius f Flattening inverse eccentricity, default eccentricity WGS-84 eps Convergence criteria iter Maximum number iterations attempt convergence","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcVinEll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Geodesic Distance - Vincenty Ellipsoid Method — calcVinEll","text":"","code":"# two-column matrix with latitude/longitude, in degrees latLong = cbind(runif(n = 5, min = 0, max = 90),                 runif(n = 5, min = 0, max = 180))  # Vincenty Ellipsoid  distance formula distMat = calcVinEll(latLongs = latLong)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcVinSph.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Geodesic Distance - Vincenty Sphere Method — calcVinSph","title":"Calculate Geodesic Distance - Vincenty Sphere Method — calcVinSph","text":"function calculates geodesic distance using Vincenty sphere method.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcVinSph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Geodesic Distance - Vincenty Sphere Method — calcVinSph","text":"","code":"calcVinSph(latLongs, r = 6378137)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcVinSph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Geodesic Distance - Vincenty Sphere Method — calcVinSph","text":"latLongs Two column matrix latitudes/longitudes r Earth radius. Default WGS-84 radius","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcVinSph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Geodesic Distance - Vincenty Sphere Method — calcVinSph","text":"","code":"# two-column matrix with latitude/longitude, in degrees latLong = cbind(runif(n = 5, min = 0, max = 90),                 runif(n = 5, min = 0, max = 180))  # Vincenty Sphere  distance formula distMat = calcVinSph(latLongs = latLong)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcZeroInflation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the zero-inflation part of a hurdle exponential kernel. — calcZeroInflation","title":"Calculates the zero-inflation part of a hurdle exponential kernel. — calcZeroInflation","text":"Given probability adult mosquito stay patch throughout whole lifespan, mortality, calculates height pulse-density part hurdle kernel.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcZeroInflation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the zero-inflation part of a hurdle exponential kernel. — calcZeroInflation","text":"","code":"calcZeroInflation(stayThroughLifespanProbability, adultMortality)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcZeroInflation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the zero-inflation part of a hurdle exponential kernel. — calcZeroInflation","text":"stayThroughLifespanProbability Probability mosquito spend whole lifespan node adultMortality Adult mortality rate","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/calcZeroInflation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the zero-inflation part of a hurdle exponential kernel. — calcZeroInflation","text":"","code":"# setup distance matrix # two-column matrix with latitude/longitude, in degrees latLong = cbind(runif(n = 5, min = 0, max = 90),                 runif(n = 5, min = 0, max = 180))  # Vincenty Ellipsoid  distance formula distMat = calcVinEll(latLongs = latLong)  # get hurdle height # Lets assume 80% stay probs and adult mortality of 0.1 hHeight <- calcZeroInflation(stayThroughLifespanProbability = 0.80,                              adultMortality = 0.1)  # calculate hurdle exponential distribution over distances kernMat = calcHurdleExpKernel(distMat = distMat, rate = 10, p0 = hHeight)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cube2csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a Cube to .csv — cube2csv","title":"Export a Cube to .csv — cube2csv","text":"Export cube multiple .csv files (one genotype; slices z-axis). function create directory exist. Files stored slice_(z-slice)_(genotype).csv","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cube2csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a Cube to .csv — cube2csv","text":"","code":"cube2csv(cube, directory, digits = 3)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cube2csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a Cube to .csv — cube2csv","text":"cube cube object (see MGDrivE-Cube options) directory Directory write .csv files digits Number significant digits retain .csv output","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cube2csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export a Cube to .csv — cube2csv","text":"","code":"if (FALSE) { # \\dontrun{ # output directory oPath <- \"path/to/write/output\"  # setup inheritance cube for export, using Mendelian as the example cube <- cubeMendelian()  # write out cube2csv(cube = cube, directory = oPath, digits = 3) } # }"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeASmidler.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: Split-Drive for Andrea Smidler — cubeASmidler","title":"Inheritance Cube: Split-Drive for Andrea Smidler — cubeASmidler","text":"modified split-drive construct split-suppression drives. autosomal, 2-locus drive. first locus contains Cas9 allele second locus gRNA construct. Cas9 efficacy sex dependent upon parent inheritance. construct 3 alleles first locus 4 alleles second. Locus 1 W: Wild-type P: Paternal Cas9 M: Maternal Cas9 Locus 2 W: Wild-type G: gRNAs R: Resistant 1 B: Resistant 2","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeASmidler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: Split-Drive for Andrea Smidler — cubeASmidler","text":"","code":"cubeASmidler(   cMM = 0,   chMM = 0,   crMM = 0,   cPM = 0,   chPM = 0,   crPM = 0,   cMF = 0,   chMF = 0,   crMF = 0,   cPF = 0,   chPF = 0,   crPF = 0,   crF = 0.5,   crM = 0.5,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeASmidler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: Split-Drive for Andrea Smidler — cubeASmidler","text":"cMM Cutting efficacy maternally-inherited Cas9 males chMM Homing efficacy maternally-inherited Cas9 males crMM Resistance rate maternally-inherited Cas9 males cPM Cutting efficacy paternally-inherited Cas9 males chPM Homing efficacy paternally-inherited Cas9 males crPM Resistance rate paternally-inherited Cas9 males cMF Cutting efficacy maternally-inherited Cas9 females chMF Homing efficacy maternally-inherited Cas9 females crMF Resistance rate maternally-inherited Cas9 females cPF Cutting efficacy paternally-inherited Cas9 females chPF Homing efficacy paternally-inherited Cas9 females crPF Resistance rate paternally-inherited Cas9 females crF Female crossover rate, 0 completely linked, 0.5 unlinked, 1.0 complete divergence crM Male crossover rate, 0 completely linked, 0.5 unlinked, 1.0 complete divergence eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeASmidler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: Split-Drive for Andrea Smidler — cubeASmidler","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeAlleleSail.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: 3-Piece Allele Sail — cubeAlleleSail","title":"Inheritance Cube: 3-Piece Allele Sail — cubeAlleleSail","text":"generalized implementation Allele Sail idea.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeAlleleSail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: 3-Piece Allele Sail — cubeAlleleSail","text":"","code":"cubeAlleleSail(   cMM = 0,   crMM = 0,   cPM = 0,   crPM = 0,   cMF = 0,   crMF = 0,   cPF = 0,   crPF = 0,   dMW = 0,   dMrW = 0,   dPW = 0,   dPrW = 0,   crF12 = 0.5,   crM12 = 0.5,   crF23 = 0.5,   crM23 = 0.5,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeAlleleSail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: 3-Piece Allele Sail — cubeAlleleSail","text":"cMM Cutting efficacy maternally-inherited Cas9 males crMM Resistance rate maternally-inherited Cas9 males cPM Cutting efficacy paternally-inherited Cas9 males crPM Resistance rate paternally-inherited Cas9 males cMF Cutting efficacy maternally-inherited Cas9 females crMF Resistance rate maternally-inherited Cas9 females cPF Cutting efficacy paternally-inherited Cas9 females crPF Resistance rate paternally-inherited Cas9 females dMW Female deposition cutting rate, maternal Cas9 dMrW Female deposition functional resistance rate, maternal Cas9 dPW Female deposition (HH) cutting rate, paternal Cas9 dPrW Female deposition (HH) functional resistance rate, paternal Cas9 crF12 Female crossover rate loci 1 2, 0 completely linked, 0.5 unlinked, 1.0 complete divergence crM12 Male crossover rate loci 1 2, 0 completely linked, 0.5 unlinked, 1.0 complete divergence crF23 Female crossover rate loci 2 3, 0 completely linked, 0.5 unlinked, 1.0 complete divergence crM23 Male crossover rate loci 2 3, 0 completely linked, 0.5 unlinked, 1.0 complete divergence eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeAlleleSail.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: 3-Piece Allele Sail — cubeAlleleSail","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeAlleleSail.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inheritance Cube: 3-Piece Allele Sail — cubeAlleleSail","text":"autosomal, 3-locus system. first locus contains Cas9 allele, second locus carries gRNA, third locus target. loci can linked/unlinked locus (, 1 2 2 3). Cas9 efficacy due provenance (mother vs father) included. construct similar 2-locus Cleave Rescue design Oberhofer. construct 3 alleles first locus, 2 alleles second locus, 3 alleles third locus. Locus 1 W: Wild-type P: Paternal Cas9 M: Maternal Cas9 Locus 2 W: Wild-type G: gRNAs Locus 3 W: Wild-type R: Resistant 1 B: Resistant 2 Female deposition implemented incorrectly. Right now, performed male alleles prior zygote formation - happen post-zygote formation. Since construct HDR, fine.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeCLEAVRMF.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: CLEAVR - Cleave and Rescue — cubeCLEAVRMF","title":"Inheritance Cube: CLEAVR - Cleave and Rescue — cubeCLEAVRMF","text":"novel cube Akbari lab. 2 loci: first female fertility locus (e.g. doubleSex), Cas, gRNAs, recoded essential gene go. locus inherited Mendelian fashion, also targeted destruction homing allele. second locus involves essential gene, males females, target gRNAs first locus. homing performed, simply destroyed. different cutting rates males females, possibility rescuing resistant allele. Females homozygous H B alleles locus 1 viable infertile, males unaffected. animals homozygous locus two must contain recoded copy locus 1 viable. version corresponds homing construct autosomal.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeCLEAVRMF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: CLEAVR - Cleave and Rescue — cubeCLEAVRMF","text":"","code":"cubeCLEAVRMF(   cM1 = 1,   cM2 = 1,   cF1 = 1,   cF2 = 1,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeCLEAVRMF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: CLEAVR - Cleave and Rescue — cubeCLEAVRMF","text":"cM1 Male cutting rate first locus cM2 Male cutting rate second locus cF1 Female cutting rate first locus cF2 Female cutting rate second locus eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeCLEAVRMF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: CLEAVR - Cleave and Rescue — cubeCLEAVRMF","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeCLEAVRX.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: CLEAVR - Cleave and Rescue — cubeCLEAVRX","title":"Inheritance Cube: CLEAVR - Cleave and Rescue — cubeCLEAVRX","text":"novel cube Akbari lab. 2 loci: first female fertility locus (e.g. doubleSex), Cas, gRNAs, recoded essential gene go. locus inherited Mendelian fashion, also targeted destruction homing allele. second locus involves essential gene, males females, target gRNAs first locus. homing performed, simply destroyed. different cutting rates males females, possibility rescuing resistant allele. Females homozygous H B alleles locus 1 viable infertile, males unaffected. animals homozygous locus two must contain recoded copy locus 1 viable. corresponds homing construct X-linked.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeCLEAVRX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: CLEAVR - Cleave and Rescue — cubeCLEAVRX","text":"","code":"cubeCLEAVRX(   cM1 = 1,   cM2 = 1,   cF1 = 1,   cF2 = 1,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeCLEAVRX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: CLEAVR - Cleave and Rescue — cubeCLEAVRX","text":"cM1 Male cutting rate first locus USED CUBE cM2 Male cutting rate second locus cF1 Female cutting rate first locus cF2 Female cutting rate second locus eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeCLEAVRX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: CLEAVR - Cleave and Rescue — cubeCLEAVRX","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeClvR.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: ClvR (Cleave and Rescue) — cubeClvR","title":"Inheritance Cube: ClvR (Cleave and Rescue) — cubeClvR","text":"Based Cleave--Rescue system Oberhofer, 2-locus Cas9-based toxin-antidote system. first locus carries Cas9, gRNAs, recoded copy essential gene. second locus targeted essential gene. gene can completely haplosufficient (hSuf = 1) completely haploinsufficient (hSuf = 0). assumed 2 copies gene (wild-type second locus recoded first) confers complete viability.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeClvR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: ClvR (Cleave and Rescue) — cubeClvR","text":"","code":"cubeClvR(   cF = 1,   crF = 0,   ccF = cF,   ccrF = crF,   cM = 1,   crM = 0,   ccM = cM,   ccrM = crM,   dW = 0,   drW = 0,   ddW = dW,   ddrW = drW,   hSuf = 1,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeClvR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: ClvR (Cleave and Rescue) — cubeClvR","text":"cF Female cutting rate, one ClvR allele crF Female functional resistance rate, one ClvR allele ccF Female cutting rate, two ClvR alleles ccrF Female functional resistance rate, two ClvR alleles cM Male cutting rate, one ClvR allele crM Male functional resistance rate, one ClvR allele ccM Male cutting rate, two ClvR alleles ccrM Male functional resistance rate, two ClvR alleles dW Female deposition cutting rate drW Female deposition functional resistance rate ddW Female deposition (HH) cutting rate ddrW Female deposition (HH) functional resistance rate hSuf Haplosufficiency level, default completely sufficient eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeClvR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: ClvR (Cleave and Rescue) — cubeClvR","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeClvR2.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: 2-Locus ClvR (Cleave and Rescue) — cubeClvR2","title":"Inheritance Cube: 2-Locus ClvR (Cleave and Rescue) — cubeClvR2","text":"Based Cleave--Rescue system Oberhofer, 3-locus Cas9-based toxin-antidote system. first locus carries Cas9, second locus carries gRNAs, recoded copy essential gene. third locus targeted essential gene. gene can completely haplosufficient (hSuf = 1) completely haploinsufficient (hSuf = 0). assumed 2 copies gene (wild-type second locus recoded first) confers complete viability. Additionally, loci 1 2 can linked, given crM crF, imitating original 2-locus ClvR system. construct, first locus 2 alleles, second 2 alleles, third 3 alleles: Locus 1 W: Wild-type C: Cas9 Locus 2 W: Wild-type G: gRNAs recoded essential gene Locus 3 W: Wild-type R: Functional resistant B: Non-functional resistant","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeClvR2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: 2-Locus ClvR (Cleave and Rescue) — cubeClvR2","text":"","code":"cubeClvR2(   cF = 1,   crF = 0,   ccF = cF,   ccrF = crF,   cM = 1,   crM = 0,   ccM = cM,   ccrM = crM,   dW = 0,   drW = 0,   ddW = dW,   ddrW = drW,   hSuf = 1,   crossF = 0.5,   crossM = 0.5,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeClvR2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: 2-Locus ClvR (Cleave and Rescue) — cubeClvR2","text":"cF Female cutting rate, one ClvR allele crF Female functional resistance rate, one ClvR allele ccF Female cutting rate, two ClvR alleles ccrF Female functional resistance rate, two ClvR alleles cM Male cutting rate, one ClvR allele crM Male functional resistance rate, one ClvR allele ccM Male cutting rate, two ClvR alleles ccrM Male functional resistance rate, two ClvR alleles dW Female deposition cutting rate drW Female deposition functional resistance rate ddW Female deposition (HH) cutting rate ddrW Female deposition (HH) functional resistance rate hSuf Haplosufficiency level, default completely sufficient crossF Crossover rate females, 0 completely linked, 0.5 unlinked, 1.0 complete divergence crossM Crossover rate males, 0 completely linked, 0.5 unlinked, 1.0 complete divergence eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeClvR2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: 2-Locus ClvR (Cleave and Rescue) — cubeClvR2","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeClvR2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inheritance Cube: 2-Locus ClvR (Cleave and Rescue) — cubeClvR2","text":"Female deposition implemented incorrectly. Right now, performed male alleles prior zygote formation - happen post-zygote formation. Since construct HDR, fine.  Additionally, assumed deposition requries loaded Cas9-RNP complexes mother, Cas9 maternal gRNA, even presence paternal gRNA, result maternal deposition mediated cleavage. Copy-number dependent rates based Cas9, gRNA. assumption RNA easier produce, therefore limit cleavage Cas9.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeConfinableHoming.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: Confinable Homing — cubeConfinableHoming","title":"Inheritance Cube: Confinable Homing — cubeConfinableHoming","text":"function creates confinable homing construct, 4 alleles first locus 3 alleles second. W: Wild-type H: Homing allele : Antidote allele R: -cost resistance allele B: Detrimental resistance allele","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeConfinableHoming.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: Confinable Homing — cubeConfinableHoming","text":"","code":"cubeConfinableHoming(   cF = 1,   cM = 1,   chF = 0,   crF = 0,   chM = 0,   crM = 0,   dR = 0,   dB = 0,   crossF = 0,   crossM = 0,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeConfinableHoming.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: Confinable Homing — cubeConfinableHoming","text":"cF Cutting efficiency drive allele locus 1 females cM Cutting efficiency drive allele locus 1 males chF Homing efficiency drive allele locus 1 females crF Resistance allele generation rate locus 1 females chM Homing efficiency drive allele locus 1 males crM Resistance allele generation rate locus 1 males dR Background mutation rate W H R allele males females dB Background mutation rate B allele males females crossF Female crossover rate crossM Male crossover rate eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeConfinableHoming.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: Confinable Homing — cubeConfinableHoming","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeConfinableHomingJOHN.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: Confinable Homing Drive, John — cubeConfinableHomingJOHN","title":"Inheritance Cube: Confinable Homing Drive, John — cubeConfinableHomingJOHN","text":"write ","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeConfinableHomingJOHN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: Confinable Homing Drive, John — cubeConfinableHomingJOHN","text":"","code":"cubeConfinableHomingJOHN(   eM = 1,   eF = 1,   prRF = 0,   prRM = 0,   r = 0,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeConfinableHomingJOHN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: Confinable Homing Drive, John — cubeConfinableHomingJOHN","text":"eM Male homing rate eF Female homing rate prRF Female -cost resistant allele generation rate prRM Male -cost resistant allele generation rate r Crossover probability eta genotype-specific mating fitness phi genotype-specific sex ratio emergence omega genotype-specific multiplicative modifier adult mortality xiF genotype-specific female pupatory success xiM genotype-specific male pupatory success s genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeConfinableHomingX.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: Confinable Homing, X-Linked — cubeConfinableHomingX","title":"Inheritance Cube: Confinable Homing, X-Linked — cubeConfinableHomingX","text":"function creates X-linked confinable homing construct, 5 alleles first locus 4 alleles second. crossovers homing occurs y chromosome W: Wild-type H: Homing allele : Antidote allele R: -cost resistance allele B: Detrimental resistance allele Y: Male allele","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeConfinableHomingX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: Confinable Homing, X-Linked — cubeConfinableHomingX","text":"","code":"cubeConfinableHomingX(   cF = 1,   chF = 0,   crF = 0,   dR = 0,   dB = 0,   crossF = 0,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeConfinableHomingX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: Confinable Homing, X-Linked — cubeConfinableHomingX","text":"cF Cutting efficiency drive allele locus 1 females chF Homing efficiency drive allele locus 1 females crF Resistance allele generation rate locus 1 females dR Background mutation rate W H R allele males females dB Background mutation rate B allele males females crossF Female crossover rate. eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeConfinableHomingX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: Confinable Homing, X-Linked — cubeConfinableHomingX","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeECHACR.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: ECHACR — cubeECHACR","title":"Inheritance Cube: ECHACR — cubeECHACR","text":"function creates ECHACR construct, 5 alleles first locus 4 alleles second. W: Wild-type H: Homing allele E: Eraser allele R: -cost resistance allele B: Detrimental resistance allele cHW: Rate homing H, W -> H transition cEH: Rate homing E, H -> E transition cEW: Rate homing E, W -> E transition","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeECHACR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: ECHACR — cubeECHACR","text":"","code":"cubeECHACR(   cHW = 1,   cEW = 1,   cEH = 1,   chHW = 0,   crHW = 0,   ceEW = 0,   crEW = 0,   ceEH = 0,   crEH = 0,   d1 = 0,   d2 = 0,   d3 = 0,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeECHACR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: ECHACR — cubeECHACR","text":"cHW Cutting efficiency drive allele locus 1 cEW Cutting efficiency ECHACR element W cEH Cutting efficiency ECHACR element H chHW Homing efficiency drive allele locus 1 crHW Resistance allele efficiency drive allele locus 1 ceEW Homing efficiency ECHACR element W crEW Resistance allele efficiency ECHACR element W ceEH Homing efficiency ECHACR element H crEH Resistance allele efficiency ECHACR element H d1 Background mutation rate W R allele d2 Background mutation rate H R allele d3 Background mutation rate E R allele eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeECHACR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: ECHACR — cubeECHACR","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeECHACR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inheritance Cube: ECHACR — cubeECHACR","text":"inheritance pattern corresponds Active Genetic Neutralizing Elements Halting Deleting Gene Drives publication.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeECHACRX.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: ECHACRX — cubeECHACRX","title":"Inheritance Cube: ECHACRX — cubeECHACRX","text":"function creates X-linked ECHACR construct, 5 alleles first locus 4 alleles second. W: Wild-type H: Homing allele E: Eraser allele R: -cost resistance allele B: Detrimental resistance allele cHW: Rate homing H, W -> H transition cEH: Rate homing E, H -> E transition cEW2: Rate homing E, W -> E transition","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeECHACRX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: ECHACRX — cubeECHACRX","text":"","code":"cubeECHACRX(   cHW = 1,   cEHW = 1,   cEW1 = 1,   cEW2 = 1,   cEH = 1,   chHW = 0,   crHW = 0,   chEHW = 0,   crEHW = 0,   ceEW1 = 0,   crEW1 = 0,   ceEW2 = 0,   crEW2 = 0,   ceEH = 0,   crEH = 0,   d1 = 0,   d2 = 0,   d3 = 0,   dHW = 0,   dEH = 0,   dEW = 0,   drHW = 0,   drEH = 0,   drEW = 0,   crossF = 0,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeECHACRX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: ECHACRX — cubeECHACRX","text":"cHW Cutting efficiency drive allele locus 1 cEHW Cutting efficiency drive allele, presence ECHACR element, locus 1 cEW1 Cutting efficiency ECHACR element W locus 1 cEW2 Cutting efficiency ECHACR element W locus 2 cEH Cutting efficiency ECHACR element H chHW Homing efficiency drive allele locus 1 crHW Resistance allele efficiency drive allele locus 1 chEHW Homing efficiency drive allele, presence ECHACR element, locus 1 crEHW Resistance allele efficiency drive allele, presence ECHACR element, locus 1 ceEW1 Homing efficiency ECHACR element W locus 1 crEW1 Resistance allele efficiency ECHACR element W locus 1 ceEW2 Homing efficiency ECHACR element W locus 2 crEW2 Resistance allele efficiency ECHACR element W locus 2 ceEH Homing efficiency ECHACR element H crEH Resistance allele efficiency ECHACR element H d1 Background mutation rate W R allele d2 Background mutation rate H R allele d3 Background mutation rate E R allele dHW Female H deposition rate W dEH Female E deposition rate H dEW Female E deposition rate W drHW Female resistance generation rate, H allele drEH Female resistance generation rate, E allele drEW Female resistance generation rate, E allele crossF Female crossover rate. 0 fully linked, 0.5 unlinked, 1 negatively linked eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeECHACRX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: ECHACRX — cubeECHACRX","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeECHACRX.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inheritance Cube: ECHACRX — cubeECHACRX","text":"inheritance pattern corresponds Active Genetic Neutralizing Elements Halting Deleting Gene Drives publication.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeHoming1RA.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: Homing Drive with 1 Resistance Allele — cubeHoming1RA","title":"Inheritance Cube: Homing Drive with 1 Resistance Allele — cubeHoming1RA","text":"function creates inheritance cube model homing gene drive (CRISPR-Cas9 system) creates 1 type resistance allele. assumes sex-specific inheritance patterns construct autosome.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeHoming1RA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: Homing Drive with 1 Resistance Allele — cubeHoming1RA","text":"","code":"cubeHoming1RA(   c = 1,   ch = 0,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeHoming1RA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: Homing Drive with 1 Resistance Allele — cubeHoming1RA","text":"c Cutting rate ch Successful homing rate rate eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeHoming1RA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: Homing Drive with 1 Resistance Allele — cubeHoming1RA","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeHomingDrive.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: CRISPR (Clustered Regularly Interspaced Short Palindromic Repeats) with 2 Resistance Alleles and maternal deposition — cubeHomingDrive","title":"Inheritance Cube: CRISPR (Clustered Regularly Interspaced Short Palindromic Repeats) with 2 Resistance Alleles and maternal deposition — cubeHomingDrive","text":"sex-specific version original cube cubeHoming1RA. assumes construct autosome can different male/female homing rates. also maternal deposition, .e., male provides W allele female H allele, portion cut oogenesis. maternal deposition parameters zero (d* parameters), normal CRISPR drive.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeHomingDrive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: CRISPR (Clustered Regularly Interspaced Short Palindromic Repeats) with 2 Resistance Alleles and maternal deposition — cubeHomingDrive","text":"","code":"cubeHomingDrive(   cM = 1,   cF = 1,   dF = 0,   chM = 0,   crM = 0,   chF = 0,   crF = 0,   dhF = 0,   drF = 0,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeHomingDrive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: CRISPR (Clustered Regularly Interspaced Short Palindromic Repeats) with 2 Resistance Alleles and maternal deposition — cubeHomingDrive","text":"cM Male homing rate cF Female homing rate dF Female deposition homing rate chM Male correct homing rate crM Male resistance generating rate chF Female correct homing rate crF Female resistance generating rate dhF Female correct deposition rate drF Female resistance deposition rate eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeHomingDrive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: CRISPR (Clustered Regularly Interspaced Short Palindromic Repeats) with 2 Resistance Alleles and maternal deposition — cubeHomingDrive","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeHomingDriveSM.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: CRISPR-SM (Clustered Regularly Interspaced Short Palindromic Repeats) with Small-Molecule Induction and 1 Resistance Allele and Maternal Deposition — cubeHomingDriveSM","title":"Inheritance Cube: CRISPR-SM (Clustered Regularly Interspaced Short Palindromic Repeats) with Small-Molecule Induction and 1 Resistance Allele and Maternal Deposition — cubeHomingDriveSM","text":"sex-specific version CRISPR small-molecule induced homing. assumes construct autosome can different male/female homing rates. also maternal deposition, .e., male provides W allele female H allele, portion cut oogenesis. Additionally, cube designed small-molecule induction, .e., SM branch MGDrivE. allows homing (H) allele turned O allele, inherits stably, offspring H individuals O turned spray. maternal deposition parameters zero (d* parameters), normal CRISPR drive.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeHomingDriveSM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: CRISPR-SM (Clustered Regularly Interspaced Short Palindromic Repeats) with Small-Molecule Induction and 1 Resistance Allele and Maternal Deposition — cubeHomingDriveSM","text":"","code":"cubeHomingDriveSM(   cM = 1,   cF = 1,   dF = 0,   chM = 0,   chF = 0,   dhF = 0,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeHomingDriveSM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: CRISPR-SM (Clustered Regularly Interspaced Short Palindromic Repeats) with Small-Molecule Induction and 1 Resistance Allele and Maternal Deposition — cubeHomingDriveSM","text":"cM Male homing rate cF Female homing rate dF Female deposition homing rate chM Male correct homing rate chF Female correct homing rate dhF Female correct deposition rate eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeHomingDriveSM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: CRISPR-SM (Clustered Regularly Interspaced Short Palindromic Repeats) with Small-Molecule Induction and 1 Resistance Allele and Maternal Deposition — cubeHomingDriveSM","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeImmunizingReversalMF.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: Immunizing Reversal/Basic Reversal — cubeImmunizingReversalMF","title":"Inheritance Cube: Immunizing Reversal/Basic Reversal — cubeImmunizingReversalMF","text":"function creates Immunizing Reversal construct, 5 alleles 1 locus W: Wild-type H: Homing allele E: Eraser allele R: -cost resistance allele B: Detrimental resistance allele","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeImmunizingReversalMF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: Immunizing Reversal/Basic Reversal — cubeImmunizingReversalMF","text":"","code":"cubeImmunizingReversalMF(   cHWM = 1,   cHWF = 1,   cEWM = 1,   cEWF = 1,   cEHM = 1,   cEHF = 1,   chHWM = 0,   chHWF = 0,   crHWM = 0,   crHWF = 0,   ceEWM = 0,   ceEWF = 0,   crEWM = 0,   crEWF = 0,   ceEHM = 0,   ceEHF = 0,   crEHM = 0,   crEHF = 0,   dHW = 0,   dEW = 0,   dEH = 0,   dhHW = 0,   drHW = 0,   deEW = 0,   drEW = 0,   deEH = 0,   drEH = 0,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeImmunizingReversalMF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: Immunizing Reversal/Basic Reversal — cubeImmunizingReversalMF","text":"cHWM Cutting efficiency H W males cHWF Cutting efficiency H W females cEWM Cutting efficiency E W males cEWF Cutting efficiency E W females cEHM Cutting efficiency E H males cEHF Cutting efficiency E H females chHWM Homing efficiency H W males chHWF Homing efficiency H W females crHWM Resistance efficiency H W males crHWF Resistance efficiency H W females ceEWM Homing efficiency E W males ceEWF Homing efficiency E W females crEWM Resistance efficiency E W males crEWF Resistance efficiency E W females ceEHM Homing efficiency E H males ceEHF Homing efficiency E H females crEHM Resistance efficiency E H males crEHF Resistance efficiency E H females dHW Deposition cutting efficiency H W dEW Deposition cutting efficiency E W dEH Deposition cutting efficiency E H dhHW Deposition homing efficiency H W drHW Deposition resistance efficiency H W deEW Deposition homing efficiency E W drEW Deposition resistance efficiency E W deEH Deposition homing efficiency E H drEH Deposition resistance efficiency E H eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeImmunizingReversalMF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: Immunizing Reversal/Basic Reversal — cubeImmunizingReversalMF","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeImmunizingReversalMF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inheritance Cube: Immunizing Reversal/Basic Reversal — cubeImmunizingReversalMF","text":"general form immunizing reversal drive. EW terms 0, simplifies basic reversal drive.drive handles different male female homing rates, female deposition allele, signifying differential expression autosome.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeImmunizingReversalX.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: Immunizing Reversal — cubeImmunizingReversalX","title":"Inheritance Cube: Immunizing Reversal — cubeImmunizingReversalX","text":"function creates Immunizing Reversal construct, 5 alleles 1 locus W: Wild-type H: Homing allele E: Eraser allele R: -cost resistance allele B: Detrimental resistance allele","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeImmunizingReversalX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: Immunizing Reversal — cubeImmunizingReversalX","text":"","code":"cubeImmunizingReversalX(   cHW = 1,   cEW = 1,   cEH = 1,   chHW = 0,   crHW = 0,   ceEW = 0,   crEW = 0,   ceEH = 0,   crEH = 0,   dHW = 0,   dEW = 0,   dEH = 0,   dhHW = 0,   drHW = 0,   deEW = 0,   drEW = 0,   deEH = 0,   drEH = 0,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeImmunizingReversalX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: Immunizing Reversal — cubeImmunizingReversalX","text":"cHW Cutting efficiency H W cEW Cutting efficiency E W cEH Cutting efficiency E H chHW Homing efficiency H W crHW Resistance generation efficiency H W ceEW Homing efficiency E W crEW Resistance generation efficiency E W ceEH Homing efficiency E H crEH Resistance efficiency E H dHW H deposition efficiency W dEW E deposition efficiency W dEH E deposition efficiency H dhHW H deposition homing efficiency W drHW H deposition resistance efficiency W deEW E deposition homing efficiency W drEW E deposition resistance efficiency W deEH E deposition homing efficiency H drEH E deposition resistance efficiency H eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeImmunizingReversalX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: Immunizing Reversal — cubeImmunizingReversalX","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeImmunizingReversalX.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inheritance Cube: Immunizing Reversal — cubeImmunizingReversalX","text":"general form immunizing reversal drive. c_EW d_EW, parameters 0, simplifies basic reversal drive. drive represents X-linked IR drive.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeKillerRescue.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: Killer-Rescue System — cubeKillerRescue","title":"Inheritance Cube: Killer-Rescue System — cubeKillerRescue","text":"function creates inheritance cube model Killer-Rescue system. Killer-Rescue 2-locus system: one locus toxin locus contains antidote. loci assumed independent non-homing.  drive 3 alleles locus 1 2 alleles locus 2: Locus 1 T: Wild-type allele K: \"Killer\" toxin allele R: Broken toxin allele Locus 2 W: Wild-type allele : Antidote allele","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeKillerRescue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: Killer-Rescue System — cubeKillerRescue","text":"","code":"cubeKillerRescue(   eR = 0,   Keff = 1,   Aeff = 1,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeKillerRescue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: Killer-Rescue System — cubeKillerRescue","text":"eR Conversion K allele R allele, basal mutation rate Keff Toxin efficacy Aeff Antidote efficacy eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeKillerRescue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: Killer-Rescue System — cubeKillerRescue","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeMEDEA.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: MEDEA (Maternal Effect Dominant Embryonic Arrest) — cubeMEDEA","title":"Inheritance Cube: MEDEA (Maternal Effect Dominant Embryonic Arrest) — cubeMEDEA","text":"function creates inheritance cube model MEDEA drive system. system first discovered flour beetles. biases inheritance expressing maternal toxin offspring die unless express zygotic antidote.  drive 3 alleles 1 locus: W: Wild-type allele M: MEDEA allele R: Resistance allele","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeMEDEA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: MEDEA (Maternal Effect Dominant Embryonic Arrest) — cubeMEDEA","text":"","code":"cubeMEDEA(   rM = 0,   rW = 0,   Teff = 1,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeMEDEA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: MEDEA (Maternal Effect Dominant Embryonic Arrest) — cubeMEDEA","text":"rM Breakdown MEDEA allele, homing/toxin/antidote, M -> R conversion rW De novo resistance generation, W -> R conversion Teff Efficacy toxin eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeMEDEA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: MEDEA (Maternal Effect Dominant Embryonic Arrest) — cubeMEDEA","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeMendelian.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: Mendelian — cubeMendelian","title":"Inheritance Cube: Mendelian — cubeMendelian","text":"function creates Mendelian Inheritance Cube. handles simple, alphabetic genotypes.  default 3 alleles 1 locus, can extended however many alleles one interested , 1 locus.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeMendelian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: Mendelian — cubeMendelian","text":"","code":"cubeMendelian(   gtype = c(\"AA\", \"Aa\", \"aa\"),   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeMendelian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: Mendelian — cubeMendelian","text":"gtype Vector genotypes, wild-type first position eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeMendelian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: Mendelian — cubeMendelian","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeModifiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate and Modify Default Genotype-specific Parameters — cubeModifiers","title":"Generate and Modify Default Genotype-specific Parameters — cubeModifiers","text":"internal function cubes.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeModifiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate and Modify Default Genotype-specific Parameters — cubeModifiers","text":"","code":"cubeModifiers(   gtype,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeModifiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate and Modify Default Genotype-specific Parameters — cubeModifiers","text":"gtype character vector genotypes eta genotype-specific mating fitness, handles assortative mating well phi genotype-specific sex ratio emergence omega genotype-specific multiplicative modifier adult mortality xiF genotype-specific female pupatory success xiM genotype-specific male pupatory success s genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeOneLocusTA.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: 1 Locus Maternal-Toxin/Zygotic-Antidote System — cubeOneLocusTA","title":"Inheritance Cube: 1 Locus Maternal-Toxin/Zygotic-Antidote System — cubeOneLocusTA","text":"function creates 1 locus maternal-toxin/zygotic-antidote system. similar construct called UDmel. resistance generation model.  drive 3 alleles 1 locus: : Maternal-toxin 1, zygotic-antidote 2 B: Maternal-toxin 2, zygotic-antidote 1 W: Wild-type allele","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeOneLocusTA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: 1 Locus Maternal-Toxin/Zygotic-Antidote System — cubeOneLocusTA","text":"","code":"cubeOneLocusTA(   TAEfficacy = 1,   TBEfficacy = 1,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeOneLocusTA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: 1 Locus Maternal-Toxin/Zygotic-Antidote System — cubeOneLocusTA","text":"TAEfficacy Maternal toxin efficacy TBEfficacy Maternal toxin B efficacy eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeOneLocusTA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: 1 Locus Maternal-Toxin/Zygotic-Antidote System — cubeOneLocusTA","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeRIDL.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: RIDL (Release of Insects with Dominant Lethality) — cubeRIDL","title":"Inheritance Cube: RIDL (Release of Insects with Dominant Lethality) — cubeRIDL","text":"function creates RIDL system. RIDL (Release Insects Dominant Lethality), form SIT. Created Oxitec, based positive feedback loop using toxic tTAV gene, controlled lab conditions TetO promoter. 2 alleles 1 locus W: Wild-type allele R: OX513 RIDL allele","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeRIDL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: RIDL (Release of Insects with Dominant Lethality) — cubeRIDL","text":"","code":"cubeRIDL(   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeRIDL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: RIDL (Release of Insects with Dominant Lethality) — cubeRIDL","text":"eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeRIDL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: RIDL (Release of Insects with Dominant Lethality) — cubeRIDL","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeReciprocalTranslocations.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: Reciprocal Translocation — cubeReciprocalTranslocations","title":"Inheritance Cube: Reciprocal Translocation — cubeReciprocalTranslocations","text":"function creates inheritance cube model reciprocal translocation. technology original form underdominant system. involves 2 chromosomes, two alleles.  drive 4 alleles 2 loci: : Wild-type locus : Translocation locus b: Wile-type locus B B: Translocation locus B","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeReciprocalTranslocations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: Reciprocal Translocation — cubeReciprocalTranslocations","text":"","code":"cubeReciprocalTranslocations(   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeReciprocalTranslocations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: Reciprocal Translocation — cubeReciprocalTranslocations","text":"eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeReciprocalTranslocations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: Reciprocal Translocation — cubeReciprocalTranslocations","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeSplitDrive.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: Split CRISPR Drive with 2 Resistance Alleles and male/female specific homing — cubeSplitDrive","title":"Inheritance Cube: Split CRISPR Drive with 2 Resistance Alleles and male/female specific homing — cubeSplitDrive","text":"sex-specific version split CRISPR drive. one locus Cas9, inherited Mendelian fashion. second, unlinked, locus gRNAs. two loci occur together, gRNAs drive, potential damaged alleles, Cas9 remains Mendelian. assumed autosomal drive. drive corresponds confinable gene drive system developed Akbari lab.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeSplitDrive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: Split CRISPR Drive with 2 Resistance Alleles and male/female specific homing — cubeSplitDrive","text":"","code":"cubeSplitDrive(   cM = 1,   chM = 0,   crM = 0,   ccM = cM,   cchM = chM,   ccrM = crM,   cF = 1,   chF = 0,   crF = 0,   ccF = cF,   cchF = chF,   ccrF = crF,   dW = 0,   dhW = 0,   drW = 0,   ddW = dW,   ddhW = dhW,   ddrW = drW,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeSplitDrive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: Split CRISPR Drive with 2 Resistance Alleles and male/female specific homing — cubeSplitDrive","text":"cM Cutting efficiency males, one Cas9 allele chM Homing efficiency males, one Cas9 allele crM Resistance efficiency males, one Cas9 allele ccM Cutting efficiency males, two Cas9 alleles cchM Homing efficiency males, two Cas9 alleles ccrM Resistance efficiency males, two Cas9 alleles cF Cutting efficiency females, one Cas9 allele chF Homing efficiency females, one Cas9 allele crF Resistance efficiency females, one Cas9 allele ccF Cutting efficiency females, two Cas9 alleles cchF Homing efficiency females, two Cas9 alleles ccrF Resistance efficiency females, two Cas9 alleles dW Maternal deposition cutting, one Cas9 allele dhW Maternal deposition homing, one Cas9 allele drW Maternal deposition resistance, one Cas9 allele ddW Maternal deposition cutting, two Cas9 alleles ddhW Maternal deposition homing, two Cas9 alleles ddrW Maternal deposition resistance, two Cas9 alleles eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeSplitDrive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: Split CRISPR Drive with 2 Resistance Alleles and male/female specific homing — cubeSplitDrive","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeSplitDriveX.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: X-linked Split CRISPR Drive with 2 Resistance Alleles and male/female specific homing — cubeSplitDriveX","title":"Inheritance Cube: X-linked Split CRISPR Drive with 2 Resistance Alleles and male/female specific homing — cubeSplitDriveX","text":"X-linked, sex-specific version split CRISPR drive. X locus Cas9, inherited Mendelian fashion. second, unlinked, autosomal locus gRNAs. two loci occur together, gRNAs drive, potential damaged alleles, Cas9 remains Mendelian. Deposition cube performed pieces come together females. drive 2 loci: \"Locus\" 1, sex chromosomes, 3 alleles X: Wild-type X chromosome C: X-chromosome carrying Cas9 construct Y: Wild-type Y chromosome Locus 2, autosomal locus, 4 alleles: W: Wild-type allele G: gRNA allele R: Functional low-cost resistance allele B: Non-functional high-cost resistance allele","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeSplitDriveX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: X-linked Split CRISPR Drive with 2 Resistance Alleles and male/female specific homing — cubeSplitDriveX","text":"","code":"cubeSplitDriveX(   cM = 1,   chM = 0,   crM = 0,   cF = 1,   chF = 0,   crF = 0,   ccF = cF,   cchF = chF,   ccrF = crF,   dW = 0,   dhW = 0,   drW = 0,   ddW = dW,   ddhW = dhW,   ddrW = drW,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeSplitDriveX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: X-linked Split CRISPR Drive with 2 Resistance Alleles and male/female specific homing — cubeSplitDriveX","text":"cM Cutting efficiency males chM Homing efficiency males crM Resistance efficiency males cF Cutting efficiency females, one Cas9 allele chF Homing efficiency females, one Cas9 allele crF Resistance efficiency females, one Cas9 allele ccF Cutting efficiency females, two Cas9 alleles cchF Homing efficiency females, two Cas9 alleles ccrF Resistance efficiency females, two Cas9 alleles dW Maternal deposition cutting, one Cas9 allele dhW Maternal deposition homing, one Cas9 allele drW Maternal deposition resistance, one Cas9 allele ddW Maternal deposition cutting, two Cas9 alleles ddhW Maternal deposition homing, two Cas9 alleles ddrW Maternal deposition resistance, two Cas9 alleles eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeSplitDriveX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: X-linked Split CRISPR Drive with 2 Resistance Alleles and male/female specific homing — cubeSplitDriveX","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeSplitDriveY.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: Y-linked Split CRISPR Drive with 2 Resistance Alleles — cubeSplitDriveY","title":"Inheritance Cube: Y-linked Split CRISPR Drive with 2 Resistance Alleles — cubeSplitDriveY","text":"Y-linked version split CRISPR drive. Y-locus Cas9, inherited Mendelian fashion. second, unlinked, autosomal locus gRNAs. two loci occur together (.e. males), gRNAs drive, potential damaged alleles, Cas9 remains Mendelian. drive 2 loci: \"Locus\" 1, sex chromosomes, 3 alleles: X: Wild-type X chromosome Y: Wild-type Y chromosome C: Y chromosome Cas9 Locus 2, autosomal locus, 4 alleles: W: Wild-type allele G: gRNA allele R: Functional low-cost resistance allele B: Non-functional high-cost resistance allele","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeSplitDriveY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: Y-linked Split CRISPR Drive with 2 Resistance Alleles — cubeSplitDriveY","text":"","code":"cubeSplitDriveY(   cM = 1,   chM = 0,   crM = 0,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeSplitDriveY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: Y-linked Split CRISPR Drive with 2 Resistance Alleles — cubeSplitDriveY","text":"cM Cutting efficiency males chM Homing efficiency males crM Resistance efficiency males eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeSplitDriveY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: Y-linked Split CRISPR Drive with 2 Resistance Alleles — cubeSplitDriveY","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeTGD.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: tGD — cubeTGD","title":"Inheritance Cube: tGD — cubeTGD","text":"trans-complementing Gene Drive (tGD) 1-locus, 2 target site drive. first target site corresponds Cas protein, second effector gene gRNAs. two sets gRNAs, target site may different cutting/homing/resistance rates, sex can different rates things. Additionally, parent receive Cas dictates efficiency. Therefor, construct 5 alleles first locus 4 alleles second. Locus 1 W: Wild-type P: Paternal Cas9 M: Maternal Cas9 R: Resistant allele 1 B: Resistant allele 2 Locus 2 W: Wild-type G: gRNAs R: Resistant 1 B: Resistant 2","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeTGD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: tGD — cubeTGD","text":"","code":"cubeTGD(   cM1 = 0,   cM2 = 0,   cP1 = 0,   cP2 = 0,   hM1 = 0,   hM2 = 0,   hP1 = 0,   hP2 = 0,   rM1 = 0,   rM2 = 0,   rP1 = 0,   rP2 = 0,   crM = 0,   crP = 0,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeTGD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: tGD — cubeTGD","text":"cM1 Maternally inherited Cas9 cutting rate locus 1 cM2 Maternally inherited Cas9 cutting rate locus 2 cP1 Paternally inherited Cas9 cutting rate locus 1 cP2 Paternally inherited Cas9 cutting rate locus 2 hM1 Maternally inherited Cas9 homing efficiency locus 1 hM2 Maternally inherited Cas9 homing efficiency locus 2 hP1 Paternally inherited Cas9 homing efficiency locus 1 hP2 Paternally inherited Cas9 homing efficiency locus 2 rM1 Maternally inherited Cas9 resistance efficiency locus 1 rM2 Maternally inherited Cas9 resistance efficiency locus 2 rP1 Paternally inherited Cas9 resistance efficiency locus 1 rP2 Paternally inherited Cas9 resistance efficiency locus 2 crM Maternal crossover rate, 0 completely linked, 0.5 unlinked, 1.0 complete divergence crP Paternal crossover rate, 0 completely linked, 0.5 unlinked, 1.0 complete divergence eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeTGD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: tGD — cubeTGD","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeTGD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inheritance Cube: tGD — cubeTGD","text":"drive corresponds transcomplementing gene drive developed Gantz Bier lab.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeTGDX.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: tGDX — cubeTGDX","title":"Inheritance Cube: tGDX — cubeTGDX","text":"trans-complementing Gene Drive (tGD) 1-locus, 2 target site drive. first target site corresponds Cas protein, second effector gene gRNAs. two sets gRNAs, target site may different cutting/homing/resistance rates, sex can different rates things. Additionally, parent receive Cas dictates efficiency. Therefor, construct 6 alleles first locus 5 alleles second. Locus 1 W: Wild-type P: Paternal Cas9 M: Maternal Cas9 R: Resistant allele 1 B: Resistant allele 2 Y: Y allele Locus 2 W: Wild-type G: gRNAs R: Resistant 1 B: Resistant 2 Y: Y allele","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeTGDX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: tGDX — cubeTGDX","text":"","code":"cubeTGDX(   cM1 = 0,   cM2 = 0,   cP1 = 0,   cP2 = 0,   hM1 = 0,   hM2 = 0,   hP1 = 0,   hP2 = 0,   rM1 = 0,   rM2 = 0,   rP1 = 0,   rP2 = 0,   crM = 0,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeTGDX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: tGDX — cubeTGDX","text":"cM1 Maternally inherited Cas9 cutting rate locus 1 cM2 Maternally inherited Cas9 cutting rate locus 2 cP1 Paternally inherited Cas9 cutting rate locus 1 cP2 Paternally inherited Cas9 cutting rate locus 2 hM1 Maternally inherited Cas9 homing efficiency locus 1 hM2 Maternally inherited Cas9 homing efficiency locus 2 hP1 Paternally inherited Cas9 homing efficiency locus 1 hP2 Paternally inherited Cas9 homing efficiency locus 2 rM1 Maternally inherited Cas9 resistance efficiency locus 1 rM2 Maternally inherited Cas9 resistance efficiency locus 2 rP1 Paternally inherited Cas9 resistance efficiency locus 1 rP2 Paternally inherited Cas9 resistance efficiency locus 2 crM Maternal crossover rate, 0 completely linked, 0.5 unlinked, 1.0 complete divergence eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeTGDX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: tGDX — cubeTGDX","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeTGDX.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inheritance Cube: tGDX — cubeTGDX","text":"drive corresponds transcomplementing gene drive developed Gantz Bier lab.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeTwoLocusTA.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: 2 Locus Maternal-Toxin/Zygotic-Antidote System — cubeTwoLocusTA","title":"Inheritance Cube: 2 Locus Maternal-Toxin/Zygotic-Antidote System — cubeTwoLocusTA","text":"function creates 2 locus maternal-toxin/zygotic-antidote system. similar construct called UDmel. resistance generation model.  drive 2 unlinked alleles, 1 allele 2 loci: : Maternal-toxin 1, zygotic-antidote 2 : Wild-type locus B: Maternal-toxin 2, zygotic-antidote 1 b: Wild-type locus B","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeTwoLocusTA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: 2 Locus Maternal-Toxin/Zygotic-Antidote System — cubeTwoLocusTA","text":"","code":"cubeTwoLocusTA(   TAEfficacy = 1,   TBEfficacy = 1,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeTwoLocusTA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: 2 Locus Maternal-Toxin/Zygotic-Antidote System — cubeTwoLocusTA","text":"TAEfficacy Maternal toxin efficacy TBEfficacy Maternal toxin B efficacy eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeTwoLocusTA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: 2 Locus Maternal-Toxin/Zygotic-Antidote System — cubeTwoLocusTA","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeWolbachia.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: Wolbachia — cubeWolbachia","title":"Inheritance Cube: Wolbachia — cubeWolbachia","text":"function creates inheritance cube model Wolbachia infection. Wolbachia parasite can infect mosquitoes. biases inheritance cytoplasmic incompatibility.  drive 2 alleles 1 locus: W: Wolbachia w: Wolbachia","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeWolbachia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: Wolbachia — cubeWolbachia","text":"","code":"cubeWolbachia(   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeWolbachia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: Wolbachia — cubeWolbachia","text":"eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeWolbachia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: Wolbachia — cubeWolbachia","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeWolbachia.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inheritance Cube: Wolbachia — cubeWolbachia","text":"Cytoplasmic Incompatibility: male W cross female w -> offspring die (complete penetrance) male w cross female W -> offspring inherit Wolbachia","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeXHomingDeposition.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: CRISPR (Clustered Regularly Interspaced Short Palindromic Repeats) X-linked with 2 Resistance Allele and Maternal Deposition — cubeXHomingDeposition","title":"Inheritance Cube: CRISPR (Clustered Regularly Interspaced Short Palindromic Repeats) X-linked with 2 Resistance Allele and Maternal Deposition — cubeXHomingDeposition","text":"X-linked version 2 allele cube. assumes construct X chromosome male homing. also maternal deposition, .e., male provides W allele female H allele, portion cut oogenesis. deposition parameters zero (*D parameters), just X-linked drive.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeXHomingDeposition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: CRISPR (Clustered Regularly Interspaced Short Palindromic Repeats) X-linked with 2 Resistance Allele and Maternal Deposition — cubeXHomingDeposition","text":"","code":"cubeXHomingDeposition(   cF = 1,   chF = 0,   crF = 0,   dF = 0,   dhF = 0,   drF = 0,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeXHomingDeposition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: CRISPR (Clustered Regularly Interspaced Short Palindromic Repeats) X-linked with 2 Resistance Allele and Maternal Deposition — cubeXHomingDeposition","text":"cF Female cutting rate chF Female proper homing rate crF Female -cost resistance generation rate dF Female deposition cutting rate dhF Female deposition proper homing rate drF Female deposition -cost resistance generation rate eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeXHomingDeposition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: CRISPR (Clustered Regularly Interspaced Short Palindromic Repeats) X-linked with 2 Resistance Allele and Maternal Deposition — cubeXHomingDeposition","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeXShredderMF.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: Autosomal X-Shredder — cubeXShredderMF","title":"Inheritance Cube: Autosomal X-Shredder — cubeXShredderMF","text":"function creates inheritance cube model autosomal X-Shredder construct. construct resides autosomal chromosome, chops X chromosome many pieces gametogenesis, destroying X chromosome. Thus, males may produce Y gametes females can become sterile.  drive 2 loci: Locus 1, autosomal locus, 3 alleles: W: Wild-type allele : Attacking allele, contains shredder construct B: Broken attacking allele, shredder construct defunct Locus 2, sex locus, 3 alleles: X: Wild-type X allele R: X-allele resistant cleavage Y: Wild-type Y allele","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeXShredderMF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: Autosomal X-Shredder — cubeXShredderMF","text":"","code":"cubeXShredderMF(   cM = 1,   cF = 1,   crM = 0,   crF = 0,   cbM = 0,   cbF = 0,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeXShredderMF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: Autosomal X-Shredder — cubeXShredderMF","text":"cM Rate X shredding males (default 1, complete shredding) cF Rate X shredding females (default 1, complete shredding) crM Rate resistance chromosome generation males (default 0) crF Rate resistance chromosome generation females (default 0) cbM Rate shredder construct breakdown males (default 0) cbF Rate shredder construct breakdown females (default 0) eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeXShredderMF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: Autosomal X-Shredder — cubeXShredderMF","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeXShredderY.html","id":null,"dir":"Reference","previous_headings":"","what":"Inheritance Cube: Y-Linked X-Shredder — cubeXShredderY","title":"Inheritance Cube: Y-Linked X-Shredder — cubeXShredderY","text":"function creates inheritance cube model Y-linked X-Shredder construct. construct resides Y chromosome, chops X chromosome many pieces male spermatogenesis, destroying X chromosome. Thus, males produce Y gametes.  drive 5 alleles 1 locus: X: Wild-type X chromosome R: X chromosome resistant destruction shredder construct Y: Wild-type Y chromosome : Attacking Y chromosome, Y chromosome shredder construct B: Broken Y chromosome, Y chromosome defunct shredder construct","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeXShredderY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inheritance Cube: Y-Linked X-Shredder — cubeXShredderY","text":"","code":"cubeXShredderY(   cX = 1,   crX = 0,   cB = 0,   eta = NULL,   phi = NULL,   omega = NULL,   xiF = NULL,   xiM = NULL,   s = NULL )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeXShredderY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inheritance Cube: Y-Linked X-Shredder — cubeXShredderY","text":"cX Rate X shredding (default 1, complete shredding) crX Rate resistance chromosome generation (default 0) cB Rate shredder construct breakdown (default 0) eta Genotype-specific mating fitness phi Genotype-specific sex ratio emergence omega Genotype-specific multiplicative modifier adult mortality xiF Genotype-specific female pupatory success xiM Genotype-specific male pupatory success s Genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/cubeXShredderY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inheritance Cube: Y-Linked X-Shredder — cubeXShredderY","text":"Named list containing inheritance cube, transition matrix, genotypes, wild-type allele, genotype-specific parameters.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/eraseDirectory.html","id":null,"dir":"Reference","previous_headings":"","what":"Erase all files in a directory — eraseDirectory","title":"Erase all files in a directory — eraseDirectory","text":"Given directory path, check exists, , delete contents.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/eraseDirectory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Erase all files in a directory — eraseDirectory","text":"","code":"eraseDirectory(directory, verbose = TRUE)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/eraseDirectory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Erase all files in a directory — eraseDirectory","text":"directory Directory whose contents deleted verbose Chatty? Default TRUE","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/eraseDirectory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Erase all files in a directory — eraseDirectory","text":"","code":"if (FALSE) { # \\dontrun{ # Path to directory, can tilde expand myPath <- \"~/path/to/write/output\"  # Erase directory #  No return value eraseDirectory(directory = myPath) } # }"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/generateReleaseVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Make List of Modified Mosquito Releases — generateReleaseVector","title":"Make List of Modified Mosquito Releases — generateReleaseVector","text":"Sets release schedule single patch, calls basicRepeatedReleases internally.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/generateReleaseVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make List of Modified Mosquito Releases — generateReleaseVector","text":"","code":"generateReleaseVector(driveCube, releasesParameters, nameGenotypes = NULL)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/generateReleaseVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make List of Modified Mosquito Releases — generateReleaseVector","text":"driveCube Gene-drive cube releasesParameters list containing releasesStart, releasesNumber releasesInterval, releaseProportion named values. nameGenotypes Optional list specify different genotypes egg/male/female releases. required mated female releases. parameter overrides default release type.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/generateReleaseVector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make List of Modified Mosquito Releases — generateReleaseVector","text":"","code":"# setup a drive cube, using Mendelian as the example cube <- cubeMendelian()  # setup release parameter list #  releasesStart is the time of first release #  releasesNumber is the number of releases #  releasesInterval is the number of days between releases #  releaseProportion is the number of mosquitoes released relParams <- list(releasesStart = 25, releasesNumber = 1,                   releasesInterval = 0, releaseProportion = 10)  # generate male releases mRelVec <- generateReleaseVector(driveCube = cube,                                  releasesParameters = relParams)  # generate mated female releases fRelVec <- generateReleaseVector(driveCube = cube,                                  releasesParameters = relParams,                                  nameGenotypes = list(c(\"AA\",\"AA\", 10),                                                       c(\"AA\",\"aa\", 10)))"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_alpha_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get alpha — get_alpha_Network","title":"Get alpha — get_alpha_Network","text":"Return density dependent mortality, see calcDensityDependentDeathRate","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_alpha_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get alpha — get_alpha_Network","text":"","code":"get_alpha_Network(ix)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_alpha_Network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get alpha — get_alpha_Network","text":"ix Index patch","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_beta_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get beta — get_beta_Network","title":"Get beta — get_beta_Network","text":"Return size wild-type egg batch","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_beta_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get beta — get_beta_Network","text":"","code":"get_beta_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_conF_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get conADF — get_conF_Network","title":"Get conADF — get_conF_Network","text":"Return connection adult female dynamics written ","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_conF_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get conADF — get_conF_Network","text":"","code":"get_conF_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_conM_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get conADM — get_conM_Network","title":"Get conADM — get_conM_Network","text":"Return connection adult male dynamics written ","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_conM_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get conADM — get_conM_Network","text":"","code":"get_conM_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_drivecubeindex_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Element(s) of Drive Cube by Index — get_drivecubeindex_Network","title":"Get Element(s) of Drive Cube by Index — get_drivecubeindex_Network","text":"Return elements slices drive cube. NULL return entire cube.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_drivecubeindex_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Element(s) of Drive Cube by Index — get_drivecubeindex_Network","text":"","code":"get_drivecubeindex_Network(fG = NULL, mG = NULL, oG = NULL)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_drivecubeindex_Network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Element(s) of Drive Cube by Index — get_drivecubeindex_Network","text":"fG Female genotype index mG Male genotype index oG Offspring genotype index","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_eta_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get eta — get_eta_Network","title":"Get eta — get_eta_Network","text":"Get eta","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_eta_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get eta — get_eta_Network","text":"","code":"get_eta_Network(fIdx)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_eta_Network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get eta — get_eta_Network","text":"fIdx Index female genotype pull","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_femalePop_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get female Population — get_femalePop_Patch","title":"Get female Population — get_femalePop_Patch","text":"Return  females (nGenotypes X nGenotypes matrix)","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_femalePop_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get female Population — get_femalePop_Patch","text":"","code":"get_femalePop_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_genotypesID_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genotypesID — get_genotypesID_Network","title":"Get genotypesID — get_genotypesID_Network","text":"Return character vector possible genotypes","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_genotypesID_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genotypesID — get_genotypesID_Network","text":"","code":"get_genotypesID_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_genotypesN_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genotypesN — get_genotypesN_Network","title":"Get genotypesN — get_genotypesN_Network","text":"Return number possible genotypes","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_genotypesN_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genotypesN — get_genotypesN_Network","text":"","code":"get_genotypesN_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_malePop_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get male Population — get_malePop_Patch","title":"Get male Population — get_malePop_Patch","text":"Return males (nGenotypes vector)","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_malePop_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get male Population — get_malePop_Patch","text":"","code":"get_malePop_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_muAd_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get muAd — get_muAd_Network","title":"Get muAd — get_muAd_Network","text":"Return adult mortality","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_muAd_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get muAd — get_muAd_Network","text":"","code":"get_muAd_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_muAq_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get muAq — get_muAq_Network","title":"Get muAq — get_muAq_Network","text":"Return larval mortality, see calcLarvalStageMortalityRate","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_muAq_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get muAq — get_muAq_Network","text":"","code":"get_muAq_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_nPatch_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get nPatch — get_nPatch_Network","title":"Get nPatch — get_nPatch_Network","text":"Return number patches","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_nPatch_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get nPatch — get_nPatch_Network","text":"","code":"get_nPatch_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_omega_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get omega — get_omega_Network","title":"Get omega — get_omega_Network","text":"Return genotype-specific multiplicative modifier adult mortality","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_omega_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get omega — get_omega_Network","text":"","code":"get_omega_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_patchReleases_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Patch Release Schedule — get_patchReleases_Network","title":"Get Patch Release Schedule — get_patchReleases_Network","text":"Return release schedule patch male female","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_patchReleases_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Patch Release Schedule — get_patchReleases_Network","text":"","code":"get_patchReleases_Network(patch, sex = \"M\")"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_patchReleases_Network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Patch Release Schedule — get_patchReleases_Network","text":"patch Index patch sex Character 'M', 'F', 'Egg', 'mF'","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_phi_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get phi — get_phi_Network","title":"Get phi — get_phi_Network","text":"Return genotype-specific sex ratio emergence","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_phi_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get phi — get_phi_Network","text":"","code":"get_phi_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_s_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get s — get_s_Network","title":"Get s — get_s_Network","text":"Return genotype-specific fractional reduction(increase) fertility","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_s_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get s — get_s_Network","text":"","code":"get_s_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_tNow_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tNow — get_tNow_Network","title":"Get tNow — get_tNow_Network","text":"Return current simulation time","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_tNow_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tNow — get_tNow_Network","text":"","code":"get_tNow_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_tau_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Female Viability Mask (tau) — get_tau_Network","title":"Get Female Viability Mask (tau) — get_tau_Network","text":"Get Female Viability Mask (tau)","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_tau_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Female Viability Mask (tau) — get_tau_Network","text":"","code":"get_tau_Network(fG = NULL, mG = NULL, oG = NULL)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_tau_Network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Female Viability Mask (tau) — get_tau_Network","text":"fG Number female genotype get mG Number male genotype get oG Number offspring genotype get","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_timeAq_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get timeAq — get_timeAq_Network","title":"Get timeAq — get_timeAq_Network","text":"Return duration aquatic stages.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_timeAq_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get timeAq — get_timeAq_Network","text":"","code":"get_timeAq_Network(stage = NULL)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_timeAq_Network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get timeAq — get_timeAq_Network","text":"stage Character 'E', 'L', 'P'; NULL return total duration","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_xiF_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get xiF — get_xiF_Network","title":"Get xiF — get_xiF_Network","text":"Return genotype-specific female pupatory success","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_xiF_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get xiF — get_xiF_Network","text":"","code":"get_xiF_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_xiM_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get xiM — get_xiM_Network","title":"Get xiM — get_xiM_Network","text":"Return genotype-specific male pupatory success","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/get_xiM_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get xiM — get_xiM_Network","text":"","code":"get_xiM_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/ggColUtility.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility to Imitate ggplot2 Colors — ggColUtility","title":"Utility to Imitate ggplot2 Colors — ggColUtility","text":"Sample equally spaced intervals along color wheel","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/ggColUtility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility to Imitate ggplot2 Colors — ggColUtility","text":"","code":"ggColUtility(n, alpha = 0.75)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/ggColUtility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility to Imitate ggplot2 Colors — ggColUtility","text":"n Number colors alpha Transparency","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/kernels.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernels Parameters — kernels","title":"Kernels Parameters — kernels","text":"named list containing maximum likelihood fitted parameter values mosquito dispersal estimates.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/kernels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernels Parameters — kernels","text":"","code":"data(kernels)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/kernels.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Kernels Parameters — kernels","text":"named list 5 elements: lnorm_mean log mean log-normal density lnorm_sd log standard deviation log-normal density gamma_shape shape parameter gamma density gamma_sd rate parameter gamma density exp_rate rate parameter exponential density","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatAll2.html","id":null,"dir":"Reference","previous_headings":"","what":"Movement Matrix: All 2 — moveMatAll2","title":"Movement Matrix: All 2 — moveMatAll2","text":"movement matrix simulation 3 patches.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatAll2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Movement Matrix: All 2 — moveMatAll2","text":"","code":"data(moveMatAll2)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatAll2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Movement Matrix: All 2 — moveMatAll2","text":"matrix 3 rows 3 columns:","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatCascade3.html","id":null,"dir":"Reference","previous_headings":"","what":"Movement Matrix: Cascade 3 — moveMatCascade3","title":"Movement Matrix: Cascade 3 — moveMatCascade3","text":"movement matrix simulation 3 patches.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatCascade3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Movement Matrix: Cascade 3 — moveMatCascade3","text":"","code":"data(moveMatCascade3)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatCascade3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Movement Matrix: Cascade 3 — moveMatCascade3","text":"matrix 3 rows 3 columns:","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatDiag.html","id":null,"dir":"Reference","previous_headings":"","what":"Movement Matrix: Diagonal — moveMatDiag","title":"Movement Matrix: Diagonal — moveMatDiag","text":"movement matrix simulation 3 patches.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatDiag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Movement Matrix: Diagonal — moveMatDiag","text":"","code":"data(moveMatDiag)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatDiag.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Movement Matrix: Diagonal — moveMatDiag","text":"matrix 3 rows 3 columns:","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatDiagOneCity.html","id":null,"dir":"Reference","previous_headings":"","what":"Movement Matrix: Diagonal One City — moveMatDiagOneCity","title":"Movement Matrix: Diagonal One City — moveMatDiagOneCity","text":"movement matrix simulation 1 patch.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatDiagOneCity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Movement Matrix: Diagonal One City — moveMatDiagOneCity","text":"","code":"data(moveMatDiagOneCity)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatDiagOneCity.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Movement Matrix: Diagonal One City — moveMatDiagOneCity","text":"matrix 1 rows 1 columns:","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatDie.html","id":null,"dir":"Reference","previous_headings":"","what":"Movement Matrix: Die — moveMatDie","title":"Movement Matrix: Die — moveMatDie","text":"movement matrix simulation 3 patches.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatDie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Movement Matrix: Die — moveMatDie","text":"","code":"data(moveMatDie)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatDie.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Movement Matrix: Die — moveMatDie","text":"matrix 3 rows 3 columns:","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatIndependent3.html","id":null,"dir":"Reference","previous_headings":"","what":"Movement Matrix: Independent 3 — moveMatIndependent3","title":"Movement Matrix: Independent 3 — moveMatIndependent3","text":"movement matrix simulation 3 patches.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatIndependent3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Movement Matrix: Independent 3 — moveMatIndependent3","text":"","code":"data(moveMatIndependent3)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatIndependent3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Movement Matrix: Independent 3 — moveMatIndependent3","text":"matrix 3 rows 3 columns:","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatMixedSpil.html","id":null,"dir":"Reference","previous_headings":"","what":"Movement Matrix: Mixed Spill — moveMatMixedSpil","title":"Movement Matrix: Mixed Spill — moveMatMixedSpil","text":"movement matrix simulation 3 patches.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatMixedSpil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Movement Matrix: Mixed Spill — moveMatMixedSpil","text":"","code":"data(moveMatMixedSpil)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatMixedSpil.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Movement Matrix: Mixed Spill — moveMatMixedSpil","text":"matrix 3 rows 3 columns:","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatTaleOfTwoCities.html","id":null,"dir":"Reference","previous_headings":"","what":"Movement Matrix: Tale of Two Cities — moveMatTaleOfTwoCities","title":"Movement Matrix: Tale of Two Cities — moveMatTaleOfTwoCities","text":"movement matrix simulation 2 patches.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatTaleOfTwoCities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Movement Matrix: Tale of Two Cities — moveMatTaleOfTwoCities","text":"","code":"data(moveMatTaleOfTwoCities)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatTaleOfTwoCities.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Movement Matrix: Tale of Two Cities — moveMatTaleOfTwoCities","text":"matrix 2 rows 2 columns:","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatTriDiagonal.html","id":null,"dir":"Reference","previous_headings":"","what":"Movement Matrix: Tri-diagonal — moveMatTriDiagonal","title":"Movement Matrix: Tri-diagonal — moveMatTriDiagonal","text":"movement matrix simulation 12 patches.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatTriDiagonal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Movement Matrix: Tri-diagonal — moveMatTriDiagonal","text":"","code":"data(moveMatTriDiagonal)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatTriDiagonal.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Movement Matrix: Tri-diagonal — moveMatTriDiagonal","text":"matrix 12 rows 12 columns:","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatTriple.html","id":null,"dir":"Reference","previous_headings":"","what":"Movement Matrix: Triple — moveMatTriple","title":"Movement Matrix: Triple — moveMatTriple","text":"movement matrix simulation 3 patches.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatTriple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Movement Matrix: Triple — moveMatTriple","text":"","code":"data(moveMatTriple)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/moveMatTriple.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Movement Matrix: Triple — moveMatTriple","text":"matrix 3 rows 3 columns:","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/multRun_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Simulation — multRun_Network","title":"Run Simulation — multRun_Network","text":"Run multiple simulations network","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/multRun_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Simulation — multRun_Network","text":"","code":"multRun_Network(verbose = TRUE)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/multRun_Network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Simulation — multRun_Network","text":"verbose Chatty? Default TRUE","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/normalise.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise a Numeric Vector — normalise","title":"Normalise a Numeric Vector — normalise","text":"Normalise numeric vector sum one","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/normalise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise a Numeric Vector — normalise","text":"","code":"normalise(vector)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/normalise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise a Numeric Vector — normalise","text":"vector Numeric vector","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_Migration_Deterministic_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Deterministic Inter-Patch Migration — oneDay_Migration_Deterministic_Network","title":"Deterministic Inter-Patch Migration — oneDay_Migration_Deterministic_Network","text":"Deterministic model interpatch migration patch. popFemale/popMale retrieved patch using get_femalePop_Patch/get_malePop_Patch. Migration location determined supplied matrices, private$migrationFemale private$migrationMale. Final migration status held private$fMoveArray private$mMoveMat.  Batch migration used deterministic model.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_Migration_Deterministic_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deterministic Inter-Patch Migration — oneDay_Migration_Deterministic_Network","text":"","code":"oneDay_Migration_Deterministic_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_Migration_Deterministic_Network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deterministic Inter-Patch Migration — oneDay_Migration_Deterministic_Network","text":"function handles outbound inbound migration. See MGDrivE-Model, 'Migration' section details inter-patch migration handled.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_Migration_Stochastic_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Stochastic Inter-Patch Migration — oneDay_Migration_Stochastic_Network","title":"Stochastic Inter-Patch Migration — oneDay_Migration_Stochastic_Network","text":"Stochastic model interpatch migration patch. popFemale/popMale retrieved patch using get_femalePop_Patch/get_malePop_Patch. Migration location determined supplied matrices, private$migrationFemale private$migrationMale. Migration modeled Multinomial process parameterized migration location probabilities corresponding patch . Movement sampled rmultinom.  Batch migration begins rbinom sampled private$migrationBatch$batchProbs.batch migration, location migration sampled uniformly (see sample), parameterized private$migrationBatch$moveProbs. amount sex migrations sampled rbinom, parameterized private$migrationBatch$sexProbs.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_Migration_Stochastic_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stochastic Inter-Patch Migration — oneDay_Migration_Stochastic_Network","text":"","code":"oneDay_Migration_Stochastic_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_Migration_Stochastic_Network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stochastic Inter-Patch Migration — oneDay_Migration_Stochastic_Network","text":"function handles outbound inbound migration. See MGDrivE-Model, 'Migration' section details inter-patch migration handled.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a Single Day on a Network — oneDay_Network","title":"Run a Single Day on a Network — oneDay_Network","text":"Runs single day simulation Network object, handling population dynamics, migration, population update, output.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a Single Day on a Network — oneDay_Network","text":"","code":"oneDay_Network()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_PopDynamics_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Daily Population Dynamics for a Patch — oneDay_PopDynamics_Patch","title":"Daily Population Dynamics for a Patch — oneDay_PopDynamics_Patch","text":"Run population dynamics (including migration) patch.  Performed order, see following function:  Adult Death: oneDay_adultDeath_deterministic_Patch oneDay_adultDeath_stochastic_Patch  Pupa Death/Maturation: oneDay_pupaDM_deterministic_Patch oneDay_pupaDM_stochastic_Patch  Larva Death/Maturation: oneDay_larvaDM_deterministic_Patch oneDay_larvaDM_stochastic_Patch  Egg Death/Maturation: oneDay_eggDM_deterministic_Patch oneDay_eggDM_stochastic_Patch  Pupation: oneDay_pupation_deterministic_Patch oneDay_pupation_stochastic_Patch  Releases: oneDay_releases_Patch  Mating: oneDay_mating_deterministic_Patch oneDay_mating_stochastic_Patch  Lay Eggs: oneDay_oviposit_deterministic_Patch oneDay_oviposit_stochastic_Patch  Release Eggs: oneDay_eggReleases_Patch","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_PopDynamics_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daily Population Dynamics for a Patch — oneDay_PopDynamics_Patch","text":"","code":"oneDay_PopDynamics_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_adultDeath_deterministic_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Deterministic Adult Survival — oneDay_adultDeath_deterministic_Patch","title":"Deterministic Adult Survival — oneDay_adultDeath_deterministic_Patch","text":"Daily adult survival calculated according $$\\overline{\\overline{Af_{[t-1]}}} * (1-\\mu_{ad}) * \\overline{\\omega_{m/f}}$$, \\(\\mu_{ad}\\) corresponds adult mortality rate \\(\\overline{\\omega_{m/f}}\\) corresponds genotype-specific male/female mortality effects.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_adultDeath_deterministic_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deterministic Adult Survival — oneDay_adultDeath_deterministic_Patch","text":"","code":"oneDay_adultDeath_deterministic_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_adultDeath_stochastic_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Stochastic Adult Survival — oneDay_adultDeath_stochastic_Patch","title":"Stochastic Adult Survival — oneDay_adultDeath_stochastic_Patch","text":"Daily adult survival sampled binomial distribution survival probability given $$(1-\\mu_{ad}) * \\overline{\\omega_m/f}$$. \\(\\mu_{ad}\\) corresponds adult mortality rate \\(\\overline{\\omega_m/f}\\) corresponds genotype-specific mortality effects.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_adultDeath_stochastic_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stochastic Adult Survival — oneDay_adultDeath_stochastic_Patch","text":"","code":"oneDay_adultDeath_stochastic_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_eggDM_deterministic_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Deterministic Egg Death and Pupation — oneDay_eggDM_deterministic_Patch","title":"Deterministic Egg Death and Pupation — oneDay_eggDM_deterministic_Patch","text":"Daily egg survival calculated according $$\\overline{E_{[t-1]}} * (1-\\mu_{aq})$$, \\(\\mu_{aq}\\) corresponds daily non-density-dependent aquatic mortality. Eggs transition larvae end \\(T_e\\).  See parameterizeMGDrivE parameters derived.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_eggDM_deterministic_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deterministic Egg Death and Pupation — oneDay_eggDM_deterministic_Patch","text":"","code":"oneDay_eggDM_deterministic_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_eggDM_stochastic_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Stochastic Egg Death and Pupation — oneDay_eggDM_stochastic_Patch","title":"Stochastic Egg Death and Pupation — oneDay_eggDM_stochastic_Patch","text":"Daily egg survival sampled binomial distribution, survival probability given \\(1-\\mu_{aq}\\). \\(\\mu_{aq}\\) corresponds daily non-density-dependent aquatic mortality.  Eggs transition larvae end \\(T_e\\).  See parameterizeMGDrivE parameters derived.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_eggDM_stochastic_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stochastic Egg Death and Pupation — oneDay_eggDM_stochastic_Patch","text":"","code":"oneDay_eggDM_stochastic_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_eggReleases_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Release Eggs in a Patch — oneDay_eggReleases_Patch","title":"Release Eggs in a Patch — oneDay_eggReleases_Patch","text":"Based patch's release schedule, generateReleaseVector, function handles daily egg releases.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_eggReleases_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Release Eggs in a Patch — oneDay_eggReleases_Patch","text":"","code":"oneDay_eggReleases_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_initOutput_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Output from Focal Patch — oneDay_initOutput_Patch","title":"Initialize Output from Focal Patch — oneDay_initOutput_Patch","text":"Writes output text connections specified enclosing Network.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_initOutput_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Output from Focal Patch — oneDay_initOutput_Patch","text":"","code":"oneDay_initOutput_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_larvaDM_deterministic_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Deterministic Larva Death and Pupation — oneDay_larvaDM_deterministic_Patch","title":"Deterministic Larva Death and Pupation — oneDay_larvaDM_deterministic_Patch","text":"Calculate number larvae surviving day day, given : $$\\overline{L_{[t-1]}} * (1-\\mu_{aq}) * F(L)$$. F(L), density dependence calculated $$F(L[t])=\\Bigg(\\frac{\\alpha}{\\alpha+\\sum{\\overline{L[t]}}}\\Bigg)^{1/T_l}$$. See parameterizeMGDrivE parameters derived. Pupation parameters, final day larvae naturally enter pupal state.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_larvaDM_deterministic_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deterministic Larva Death and Pupation — oneDay_larvaDM_deterministic_Patch","text":"","code":"oneDay_larvaDM_deterministic_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_larvaDM_stochastic_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Stochastic Larva Death and Pupation — oneDay_larvaDM_stochastic_Patch","title":"Stochastic Larva Death and Pupation — oneDay_larvaDM_stochastic_Patch","text":"daily number larvae surviving drawn binomial distribution, survival probability given $$(1-\\mu_{aq}) * F(L)$$. F(L), density dependence calculated $$F(L[t])=\\Bigg(\\frac{\\alpha}{\\alpha+\\sum{\\overline{L[t]}}}\\Bigg)^{1/T_l}$$. See parameterizeMGDrivE parameters derived. Pupation parameters, final day larvae naturally enter pupal state.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_larvaDM_stochastic_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stochastic Larva Death and Pupation — oneDay_larvaDM_stochastic_Patch","text":"","code":"oneDay_larvaDM_stochastic_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_mating_deterministic_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Deterministic Mating — oneDay_mating_deterministic_Patch","title":"Deterministic Mating — oneDay_mating_deterministic_Patch","text":"Mating calculated outer product newly emerging adult females -current adult males, modulated \\(\\overline{\\overline{\\eta}}\\), genotype-specific male mating fitness. \\(\\overline{\\overline{\\eta}}\\) corresponds female (rows) male (columns) genotypes, perform type assortative mating.  adult males, unmated females experience one day death, calculated $$\\overline{Af_t} * (1-\\mu_{ad}) * \\overline{\\omega_f}$$, remain unmated tomorrow.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_mating_deterministic_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deterministic Mating — oneDay_mating_deterministic_Patch","text":"","code":"oneDay_mating_deterministic_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_mating_stochastic_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Stochastic Mating — oneDay_mating_stochastic_Patch","title":"Stochastic Mating — oneDay_mating_stochastic_Patch","text":"Mating newly emerging adult female genotype sampled multinomial distribution probabilities equal adult male population vector multiplied \\(\\overline{\\overline{\\eta}}\\), genotype-specific male mating fitness. \\(\\overline{\\overline{\\eta}}\\) corresponds female (rows) male (columns) genotypes, perform type assortative mating.  adult males, unmated females experience one day death, sampled binomial distribution parameterized $$(1-\\mu_{ad}) * \\overline{\\omega_f}$$, remain unmated tomorrow.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_mating_stochastic_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stochastic Mating — oneDay_mating_stochastic_Patch","text":"","code":"oneDay_mating_stochastic_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_migrationIn_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Inbound Migration — oneDay_migrationIn_Patch","title":"Inbound Migration — oneDay_migrationIn_Patch","text":"Accumulate inbound migration patch.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_migrationIn_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inbound Migration — oneDay_migrationIn_Patch","text":"","code":"oneDay_migrationIn_Patch(maleIn, femaleIn)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_migrationIn_Patch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inbound Migration — oneDay_migrationIn_Patch","text":"maleIn Vector inbound migration femaleIn Matrix inbound migration","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_oviposit_deterministic_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Deterministic Oviposition — oneDay_oviposit_deterministic_Patch","title":"Deterministic Oviposition — oneDay_oviposit_deterministic_Patch","text":"Calculate number eggs oviposited female mosquitoes following: $$\\overline{O(T_x)} = \\sum_{j=1}^{n} \\Bigg( \\bigg( (\\beta*\\overline{s} * \\overline{ \\overline{Af_{[t]}}}) * \\overline{\\overline{\\overline{Ih}}} \\bigg) * \\Lambda \\Bigg)^{\\top}_{ij}$$","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_oviposit_deterministic_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deterministic Oviposition — oneDay_oviposit_deterministic_Patch","text":"","code":"oneDay_oviposit_deterministic_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_oviposit_stochastic_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Stochastic Oviposition — oneDay_oviposit_stochastic_Patch","title":"Stochastic Oviposition — oneDay_oviposit_stochastic_Patch","text":"Calculate number eggs oviposited female mosquitoes following: $$\\overline{O(T_x)} = \\sum_{j=1}^{n} \\Bigg( \\bigg( (\\beta*\\overline{s} * \\overline{ \\overline{Af_{[t]}}}) * \\overline{\\overline{\\overline{Ih}}} \\bigg) * \\Lambda  \\Bigg)^{\\top}_{ij}$$ deterministic result number eggs used mean Poisson-distributed number actual eggs oviposited.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_oviposit_stochastic_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stochastic Oviposition — oneDay_oviposit_stochastic_Patch","text":"","code":"oneDay_oviposit_stochastic_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_pupaDM_deterministic_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Deterministic Pupa Death and Pupation — oneDay_pupaDM_deterministic_Patch","title":"Deterministic Pupa Death and Pupation — oneDay_pupaDM_deterministic_Patch","text":"Daily pupa survival calculated according $$\\overline{P_{[t-1]}} * (1-\\mu_{aq})$$, \\(\\mu_{aq}\\) corresponds daily non-density-dependent aquatic mortality.  See parameterizeMGDrivE parameters derived.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_pupaDM_deterministic_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deterministic Pupa Death and Pupation — oneDay_pupaDM_deterministic_Patch","text":"","code":"oneDay_pupaDM_deterministic_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_pupaDM_stochastic_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Stochastic Pupa Death and Pupation — oneDay_pupaDM_stochastic_Patch","title":"Stochastic Pupa Death and Pupation — oneDay_pupaDM_stochastic_Patch","text":"Daily pupa survival sampled binomial distribution, survival probability given $$1-\\mu_{aq}$$. \\(\\mu_{aq}\\) corresponds daily non-density-dependent aquatic mortality.  See parameterizeMGDrivE parameters derived.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_pupaDM_stochastic_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stochastic Pupa Death and Pupation — oneDay_pupaDM_stochastic_Patch","text":"","code":"oneDay_pupaDM_stochastic_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_pupation_deterministic_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Deterministic Pupation — oneDay_pupation_deterministic_Patch","title":"Deterministic Pupation — oneDay_pupation_deterministic_Patch","text":"Pupa first undergo one extra day survival, calculated $$\\overline{P_{[t-1]}} * (1-\\mu_{ad})$$. artifact conversion continuous discrete time (mentioned original Hancock paper model derived ).  , pupation adult males calculated $$(1-\\overline{\\phi}) * \\overline{P_{[t]}}$$ adult females $$\\overline{\\phi} * \\overline{P_{[t]}}$$","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_pupation_deterministic_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deterministic Pupation — oneDay_pupation_deterministic_Patch","text":"","code":"oneDay_pupation_deterministic_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_pupation_stochastic_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Stochastic Pupation — oneDay_pupation_stochastic_Patch","title":"Stochastic Pupation — oneDay_pupation_stochastic_Patch","text":"Pupa first undergo one extra day survival, calculated binomial $$\\overline{P_{[t-1]}} * (1-\\mu_{ad})$$. artifact conversion continuous discrete time (mentioned original Hancock paper model derived ).  , pupation sampled binomial, \\((1-\\overline{\\phi})\\) genotype-specific probability becoming male, \\(\\overline{\\phi}\\) genotype-specific becoming female.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_pupation_stochastic_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stochastic Pupation — oneDay_pupation_stochastic_Patch","text":"","code":"oneDay_pupation_stochastic_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_releases_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Release Male/Female/Mated-Female Mosquitoes in a Patch — oneDay_releases_Patch","title":"Release Male/Female/Mated-Female Mosquitoes in a Patch — oneDay_releases_Patch","text":"Based patch's release schedule, generateReleaseVector, function handles daily releases.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_releases_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Release Male/Female/Mated-Female Mosquitoes in a Patch — oneDay_releases_Patch","text":"","code":"oneDay_releases_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_writeOutput_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Output from Focal Patch — oneDay_writeOutput_Patch","title":"Write Output from Focal Patch — oneDay_writeOutput_Patch","text":"Writes output text connections specified enclosing Network.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneDay_writeOutput_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Output from Focal Patch — oneDay_writeOutput_Patch","text":"","code":"oneDay_writeOutput_Patch()"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneRun_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Simulation — oneRun_Network","title":"Run Simulation — oneRun_Network","text":"Run single simulation network.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneRun_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Simulation — oneRun_Network","text":"","code":"oneRun_Network(verbose = TRUE)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/oneRun_Network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Simulation — oneRun_Network","text":"verbose Chatty? Default TRUE","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/parameterizeMGDrivE.html","id":null,"dir":"Reference","previous_headings":"","what":"parameterizeMGDrivE — parameterizeMGDrivE","title":"parameterizeMGDrivE — parameterizeMGDrivE","text":"Generate parameters simulation Network. Parameters include: average generation time \\(g\\), population growth rate \\(R_{m}\\), aquatic mortality \\(\\mu_{Aq}\\), aquatic survival \\(\\theta_{Aq}\\), shared patches calculated calcAverageGenerationTime, calcPopulationGrowthRate, calcLarvalStageMortalityRate.  Patch-specific parameters \\(\\alpha\\) \\(L_{eq}\\) calculated patch calcDensityDependentDeathRate calcLarvalPopEquilibrium.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/parameterizeMGDrivE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parameterizeMGDrivE — parameterizeMGDrivE","text":"","code":"parameterizeMGDrivE(   runID = 1L,   nPatch,   simTime,   sampTime = 1L,   tEgg = 1L,   tLarva = 14L,   tPupa = 1L,   beta = 32,   muAd = 0.123,   popGrowth = 1.096,   AdPopEQ,   LarPopRatio,   AdPopRatio_F,   AdPopRatio_M,   inheritanceCube )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/parameterizeMGDrivE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parameterizeMGDrivE — parameterizeMGDrivE","text":"runID Begin counting runs set parameters value nPatch Number Patch simTime Maximum time run simulation sampTime Times sample, used tNow %% sampTime, default every day tEgg Length egg stage tLarva Length larval instar stage tPupa Length pupal stage beta Female egg batch size wild-type muAd Wild-type daily adult mortality (1/muAd average wild-type lifespan) popGrowth Daily population growth rate (used calculate equilibrium) AdPopEQ Single number vector adult population size equilibrium (single number implies patches population) LarPopRatio May empty; , vector gives wildtype gene frequencies among larval stages beginning simulation matrix provides different initial frequencies patch (every row different patch, must nrow = nPatch) AdPopRatio_F May empty; , vector gives wildtype gene frequencies among adult females beginning simulation matrix provides different initial frequencies patch (every row different patch, must nrow = nPatch) AdPopRatio_M May empty; , vector gives wildtype gene frequencies among adult males beginning simulation matrix provides different initial frequencies patch (every row different patch, must nrow = nPatch) inheritanceCube Inheritance cube check/set population ratios beginning simulation","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/parameterizeMGDrivE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"parameterizeMGDrivE — parameterizeMGDrivE","text":"","code":"# using default parameters for 2 patches #  using different population sizes for patches simPars <- parameterizeMGDrivE(nPatch = 2, simTime = 365,                                AdPopEQ = c(100,200), inheritanceCube = cubeMendelian())"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/plotMGDrivEMult.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot — plotMGDrivEMult","title":"Plot — plotMGDrivEMult","text":"Plots several traces MGDrivE, assuming set another repetition experiment.  Given readDir, function assumes follow file structure: readDir repetition 1 patch 1 patch 2 patch 3 repetition 2 patch 1 patch 2 patch 3 repetition 3 repetition 4 ...","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/plotMGDrivEMult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot — plotMGDrivEMult","text":"","code":"plotMGDrivEMult(readDir, whichPatches = NULL, totalPop = FALSE,                        nonZeroGen = FALSE, lwd = 0.75, alpha = 0.75)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/plotMGDrivEMult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot — plotMGDrivEMult","text":"readDir Directory find repetition folders whichPatches Vector patches plot, must less 15. Default NULL less 15 patches totalPop Boolean, plot total population . Default FALSE nonZeroGen Boolean, plot genotypes always zero simulation lwd Double, specify line width plotting alpha Double, specify opacity plotting","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/plotMGDrivEMult.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot — plotMGDrivEMult","text":"function plots output one run one set runs analyzed. Setting totalPop FALSE keeps plotting total population. NonZeroGen accounts genotypes exist, created simulation. Default FALSE, easier read plot.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/plotMGDrivEMult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot — plotMGDrivEMult","text":"","code":"if (FALSE) { # \\dontrun{ # Requires the user to have run MGDrivE, logically stochastic, analyzed #  the data, and stored it in the directory shown below. # See vignette for complete example  # Folder where single run is stored fPath <- \"path/to/data/containing/folder\"  # plot output to see effect plotMGDrivEMult(readDir=fPath,totalPop = TRUE,lwd=3.5,alpha=1) } # }"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/plotMGDrivESingle.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot — plotMGDrivESingle","title":"Plot — plotMGDrivESingle","text":"Plots one run MGDrivE","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/plotMGDrivESingle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot — plotMGDrivESingle","text":"","code":"plotMGDrivESingle(readDir, whichPatches = NULL, totalPop = FALSE,                          nonZeroGen = FALSE, lwd = 0.75, alpha = 0.75)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/plotMGDrivESingle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot — plotMGDrivESingle","text":"readDir Path file single-run MGDrivE analysis function whichPatches Vector patches plot, must less 15. Default NULL less 15 patches totalPop Boolean, plot total population . nonZeroGen Boolean, plot genotypes always zero simulation lwd Double, specify line width plotting alpha Double, specify opacity plotting","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/plotMGDrivESingle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot — plotMGDrivESingle","text":"function plots output one run one set runs analyzed. Setting totalPop FALSE keeps plotting total population. NonZeroGen accounts genotypes exist, created simulation. Default FALSE, easier read plot.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/plotMGDrivESingle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot — plotMGDrivESingle","text":"","code":"if (FALSE) { # \\dontrun{ # Requires the user to have run MGDrivE, deterministic or stochastic, analyzed #  the data, and stored it in the directory shown below. # See vignette for complete example  # Folder where single run is stored fPath <- \"path/to/data/containing/folder\"  # plot output to see effect plotMGDrivESingle(readDir=fPath,totalPop = TRUE,lwd=3.5,alpha=1) } # }"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/quantileC.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantiles Function — quantileC","title":"Quantiles Function — quantileC","text":"Calculate given quantiles matrix.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/quantileC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantiles Function — quantileC","text":"","code":"quantileC(Trials, Probs)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/quantileC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantiles Function — quantileC","text":"Trials Integer matrix calculate quantiles Probs Vector quantiles","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/quantileC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantiles Function — quantileC","text":"Numeric Matrix","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/quantileC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantiles Function — quantileC","text":"function calculates given quantiles rows integer matrix. uses method 8 stat::quantiles() function. gives result, numerical accuracy, designed handle matrix input. designed work integer matrices!","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/rDirichlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Dirichlet Distribution — rDirichlet","title":"Dirichlet Distribution — rDirichlet","text":"Make single draw Dirichlet distribution shape parameter one.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/rDirichlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dirichlet Distribution — rDirichlet","text":"","code":"rDirichlet(migrationPoint)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/rDirichlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dirichlet Distribution — rDirichlet","text":"migrationPoint Vector weights draws. Must positive.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/reset_Network.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset Network — reset_Network","title":"Reset Network — reset_Network","text":"Reset Network runs, useful Monte Carlo simulation. calls reset_Patch patch resets tNow = 2 increments runID.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/reset_Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset Network — reset_Network","text":"","code":"reset_Network(verbose = TRUE)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/reset_Network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset Network — reset_Network","text":"verbose Chatty? Default TRUE","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/reset_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset Patch to Initial Conditions — reset_Patch","title":"Reset Patch to Initial Conditions — reset_Patch","text":"Resets patch initial configuration new one created allocated network (Monte Carlo simulation).","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/reset_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset Patch to Initial Conditions — reset_Patch","text":"","code":"reset_Patch(verbose = TRUE)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/reset_Patch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset Patch to Initial Conditions — reset_Patch","text":"verbose Chatty? Default TRUE","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/retrieveOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Output — retrieveOutput","title":"Retrieve Output — retrieveOutput","text":"Read output directory. resulting object nested list; outermost nesting dimension indexes runID, within runID elements split sex innermost nesting patches.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/retrieveOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Output — retrieveOutput","text":"","code":"retrieveOutput(readDir, verbose = TRUE)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/retrieveOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Output — retrieveOutput","text":"readDir Directory output written ; must end path separator verbose Chatty? Default TRUE","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/retrieveOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Output — retrieveOutput","text":"Nested List","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/retrieveOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Output — retrieveOutput","text":"","code":"if (FALSE) { # \\dontrun{ # Example assumes user has run and analyzed MGDrivE. #  See vignette for examples of how to do that.  # set read directory fPath <- \"path/to/split/aggregated/output\"  # read in data as nested lists dataList <- retrieveOutput(readDir = fPath) } # }"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/set_NetworkPointer_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Network Pointer — set_NetworkPointer_Patch","title":"Set Network Pointer — set_NetworkPointer_Patch","text":"Set reference enclosing Network object","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/set_NetworkPointer_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Network Pointer — set_NetworkPointer_Patch","text":"","code":"set_NetworkPointer_Patch(NetworkPointer)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/set_NetworkPointer_Patch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Network Pointer — set_NetworkPointer_Patch","text":"NetworkPointer Network object","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/set_initialPopulation_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Initial Population — set_initialPopulation_Patch","title":"Set Initial Population — set_initialPopulation_Patch","text":"hidden function distributes population time 0 steady-state conformation. involves finding number mosquitoes day aquatic stages, splitting adults male female. stage appropriately split amongst initial population genotypes (see parameterizeMGDrivE). internally calls calcLarvalDist determine distribution larvae setting eggs pupa .","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/set_initialPopulation_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Initial Population — set_initialPopulation_Patch","text":"","code":"set_initialPopulation_Patch(   adultEQ = adultEQ,   larvalEQ = larvalEQ,   adultRatioF = adultRatioF,   adultRatioM = adultRatioM,   larvalRatio = larvalRatio,   timeAq = timeAq,   muAq = muAq,   alpha = alpha )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/set_initialPopulation_Patch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Initial Population — set_initialPopulation_Patch","text":"adultEQ Equilibrium number adults larvalEQ Equilibrium number larvae adultRatioF Genotype specific ratio adult females adultRatioM Genotype specific ratio adult males larvalRatio Genotype specific ratio larvae timeAq Time aquatic stage muAq Aquatic death rate alpha Density-dependent centering parameter","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/set_population_deterministic_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Initial Population Deterministic — set_population_deterministic_Patch","title":"Set Initial Population Deterministic — set_population_deterministic_Patch","text":"Calls set_initialPopulation_Patch initialize steady-state population distribution.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/set_population_deterministic_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Initial Population Deterministic — set_population_deterministic_Patch","text":"","code":"set_population_deterministic_Patch(   adultEQ = adultEQ,   larvalEQ = larvalEQ,   adultRatioF = adultRatioF,   adultRatioM = adultRatioM,   larvalRatio = larvalRatio,   timeAq = timeAq,   muAq = muAq,   alpha = alpha )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/set_population_deterministic_Patch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Initial Population Deterministic — set_population_deterministic_Patch","text":"adultEQ Equilibrium number adults larvalEQ Equilibrium number larvae adultRatioF Genotype specific ratio adult females adultRatioM Genotype specific ratio adult males larvalRatio Genotype specific ratio larvae timeAq Time aquatic stage muAq Aquatic death rate alpha Density-dependent centering parameter","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/set_population_stochastic_Patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Initial Population Stochastic — set_population_stochastic_Patch","title":"Set Initial Population Stochastic — set_population_stochastic_Patch","text":"Calls set_initialPopulation_Patch initialize steady-state population distribution. Populations rounded integer values.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/set_population_stochastic_Patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Initial Population Stochastic — set_population_stochastic_Patch","text":"","code":"set_population_stochastic_Patch(   adultEQ = adultEQ,   larvalEQ = larvalEQ,   adultRatioF = adultRatioF,   adultRatioM = adultRatioM,   larvalRatio = larvalRatio,   timeAq = timeAq,   muAq = muAq,   alpha = alpha )"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/set_population_stochastic_Patch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Initial Population Stochastic — set_population_stochastic_Patch","text":"adultEQ Equilibrium number adults larvalEQ Equilibrium number larvae adultRatioF Genotype specific ratio adult females adultRatioM Genotype specific ratio adult males larvalRatio Genotype specific ratio larvae timeAq Time aquatic stage muAq Aquatic death rate alpha Density-dependent centering parameter","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/setupMGDrivE.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup MGDrivE — setupMGDrivE","title":"Setup MGDrivE — setupMGDrivE","text":"Initialize methods Patch run deterministic stochastic simulations. sets internal function definitions oneRun_Network multRun_Network run either deterministic stochastic functions.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/setupMGDrivE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup MGDrivE — setupMGDrivE","text":"","code":"setupMGDrivE(stochasticityON = FALSE, verbose = TRUE)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/setupMGDrivE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup MGDrivE — setupMGDrivE","text":"stochasticityON Enable/disable stochastic simulation. Default FALSE, implying deterministic simulation verbose Chatty? Default TRUE","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/setupMGDrivE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup MGDrivE — setupMGDrivE","text":"","code":"# run deterministic MGDrivE setupMGDrivE(stochasticityON = FALSE) #> initializing MGDrivE  # run stochastic MGDrivE setupMGDrivE(stochasticityON = TRUE) #> initializing MGDrivE"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/splitOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Output by Patch — splitOutput","title":"Split Output by Patch — splitOutput","text":"Split output multiple files patches.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/splitOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Output by Patch — splitOutput","text":"","code":"splitOutput(readDir, writeDir = NULL, remFile = TRUE, verbose = TRUE)"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/splitOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Output by Patch — splitOutput","text":"readDir Directory output written writeDir Directory write output . Default readDir remFile Remove original output? Default TRUE verbose Chatty? Default TRUE","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/reference/splitOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Output by Patch — splitOutput","text":"","code":"if (FALSE) { # \\dontrun{ # This example assumes user has already run MGDrivE and generated output. #  If that's untree, see vignette for complete example fPath <- \"path/to/data/containing/folder\" oPath <- \"path/to/write/output\"  # split data by patch, keep original files #  no return value splitOutput(readDir = fPath, writeDir = oPath, remFile = FALSE)  # Alternatively, remove the original files and write new ones in their place fPath <- \"path/to/data/containing/folder\"  splitOutput(readDir = fPath, writeDir = NULL, remFile = TRUE) } # }"},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/news/index.html","id":"mgdrive-110","dir":"Changelog","previous_headings":"","what":"MGDrivE 1.1.0","title":"MGDrivE 1.1.0","text":"CRAN release: 2019-08-19","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/news/index.html","id":"major-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"MGDrivE 1.1.0","text":"data.table moved Imports, Depends. retrieveOutput() calcQuantiles() plotMGDrivESingle()","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/news/index.html","id":"minor-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"MGDrivE 1.1.0","text":"Several spelling errors addressed. Realistic landscape example changed use zero-inflated kernel, instead basic exponential kernel. Several plotting tweaks. Added links accompanying data analysis package, MoNeT-MGDrivE, part MoNeT package.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/news/index.html","id":"mgdrive-150","dir":"Changelog","previous_headings":"","what":"MGDrivE 1.5.0","title":"MGDrivE 1.5.0","text":"CRAN release: 2020-01-29","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/news/index.html","id":"major-changes-1-5-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"MGDrivE 1.5.0","text":"underlying mathematics , implementation changed. Significant memory reductions. Significant computational reduction. internal objects functions updated. important, stochastic implementation bug , resolved. releases now numeric vectors/matrices indicating genotype release number; handled internally. now possible release mated females. Male-mating ability now female-genotype dependent, allowing assortative mating. sampTime indicates often output written simulation inheritanceCube now required parameterize initial genotype distributions LarPopRatio, AdPopRatio_F, AdPopRatio_M updated internally reflect accurate default behavior handle different user input set . splitOutput() aggregateFemales() calcQuantiles() splitOutput() aggregateFemales() fixed properly use writeDir parameter.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/news/index.html","id":"minor-changes-1-5-0","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"MGDrivE 1.5.0","text":"verbose options updated consistency. default TRUE. parameters previously vectors length number patches updated take single number, implying parameters patch, vector, patch can specified individually. Plotting functions updated handle sampling scheme (.e., output written every day). parameterizeMGDrivE() internal loops replaced vectorized functions. Spelling errors documentation inconsistencies addressed. Citation updated reflect publication Methods Ecology Evolution.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/news/index.html","id":"mgdrive-160","dir":"Changelog","previous_headings":"","what":"MGDrivE 1.6.0","title":"MGDrivE 1.6.0","text":"CRAN release: 2020-10-05","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/news/index.html","id":"major-changes-1-6-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"MGDrivE 1.6.0","text":"Migration handled Network level now. removes objects Patch class, making package lighter efficient. Migration longer Dirichlet distributed. One Two locus Cleave Rescue (ClvR) constructs made available. ERACR/eCHACR constructs made available.","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/news/index.html","id":"minor-changes-1-6-0","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"MGDrivE 1.6.0","text":"Spelling checked errors corrected. Function links documentation updated.","code":""},{"path":[]},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/news/index.html","id":"major-changes-1-6-1","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"MGDrivE 1.6.1","text":"fixes bug introduced eta() turned matrix object, allowing selective mating. omega() supposed matrix, change node. isn’t implemented , don’t know .","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/news/index.html","id":"minor-changes-1-6-1","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"MGDrivE 1.6.1","text":"closed-form expression derived, stats::uniroot() dependency removed. actually fix issue found, bounds mu. Better bounds-checking introduced, clear error message, warn users encounter error.","code":""},{"path":[]},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/news/index.html","id":"major-changes-1-6-2","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"MGDrivE 1.6.2","text":"None","code":""},{"path":"https://marshalllab.github.io/MGDrivE/docs_v1/news/index.html","id":"minor-changes-1-6-2","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"MGDrivE 1.6.2","text":"Fixed deposition issues cubeClvR2() - Thank Dr. Leftwich. Updated internal documentation - per CRAN requests. Exported several new inheritance patterns development. Updated website documentation, switched current version pkgdown. Updated vignette options reduce package size.","code":""}]
